CREATE OR REPLACE PROCEDURE WSO2_DEVICE_CODE_CLEANUP_DATA_RESTORATION_SP() AS $$
DECLARE

rowcount bigint;
enableLog boolean;
logLevel VARCHAR(10);

BEGIN

-- ------------------------------------------
-- CONFIGURABLE ATTRIBUTES
-- ------------------------------------------
enableLog := TRUE; -- ENABLE LOGGING [DEFAULT : TRUE]
logLevel := 'TRACE'; -- SET LOG LEVELS : TRACE

IF (enableLog) THEN
RAISE NOTICE 'WSO2_DEVICE_CODE_CLEANUP_DATA_RESTORATION_SP STARTED .... !';
RAISE NOTICE '';
END IF;

-----------------------

SELECT COUNT(1) INTO rowcount  FROM PG_CATALOG.PG_TABLES WHERE SCHEMANAME = CURRENT_SCHEMA() AND TABLENAME IN ('idn_oauth2_device_flow');
IF (rowcount = 1)
THEN
IF (enableLog AND logLevel IN ('TRACE')) THEN
RAISE NOTICE 'CLEANUP DATA RESTORATION STARTED ON IDN_OAUTH2_DEVICE_FLOW TABLE !';
END IF;
INSERT INTO IDN_OAUTH2_DEVICE_FLOW SELECT A.* FROM BAK_IDN_OAUTH2_DEVICE_FLOW A LEFT JOIN IDN_OAUTH2_DEVICE_FLOW B ON A.CODE_ID = B.CODE_ID WHERE B.CODE_ID IS NULL;
GET DIAGNOSTICS rowcount := ROW_COUNT;
IF (enableLog ) THEN
RAISE NOTICE 'CLEANUP DATA RESTORATION COMPLETED ON IDN_OAUTH2_DEVICE_FLOW WITH %',ROWCOUNT;
END IF;
END IF;

-----------------------

SELECT COUNT(1) INTO rowcount  FROM PG_CATALOG.PG_TABLES WHERE SCHEMANAME = CURRENT_SCHEMA() AND TABLENAME IN ('idn_oauth2_device_flow_scopes');
IF (rowcount = 1)
THEN
IF (enableLog AND logLevel IN ('TRACE')) THEN
RAISE NOTICE 'CLEANUP DATA RESTORATION STARTED ON IDN_OAUTH2_DEVICE_FLOW_SCOPES TABLE !';
END IF;
INSERT INTO IDN_OAUTH2_DEVICE_FLOW_SCOPES SELECT A.* FROM BAK_IDN_OAUTH2_DEVICE_FLOW_SCOPES A LEFT JOIN IDN_OAUTH2_DEVICE_FLOW_SCOPES B ON A.SCOPE_ID = B.SCOPE_ID WHERE B.SCOPE_ID IS NULL;
GET DIAGNOSTICS rowcount := ROW_COUNT;
IF (enableLog ) THEN
RAISE NOTICE 'CLEANUP DATA RESTORATION COMPLETED ON IDN_OAUTH2_DEVICE_FLOW_SCOPES WITH %',ROWCOUNT;
END IF;
END IF;

IF (enableLog) THEN
RAISE NOTICE 'WSO2_TOKEN_CLEANUP_DATA_RESTORATION_SP COMPLETED .... !';
RAISE NOTICE '';
END IF;

END;
$$
LANGUAGE 'plpgsql';
