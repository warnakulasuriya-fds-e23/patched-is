ALTER TABLE IDN_OAUTH2_ACCESS_TOKEN_AUDIT ADD ID INTEGER NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY (ID);

ALTER TABLE IDN_OAUTH2_SCOPE_BINDING ADD ID INTEGER NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY (ID);

ALTER TABLE IDN_AUTH_USER_SESSION_MAPPING ADD ID INTEGER NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY (ID);

ALTER TABLE IDN_OAUTH2_CIBA_REQUEST_SCOPES ADD ID INTEGER NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY (ID);

-- Add CONSENTED_TOKEN column if it doesn't exist.
DROP PROCEDURE IF EXISTS ALTER_IDN_OAUTH2_ACCESS_TOKEN;

DELIMITER $$
CREATE PROCEDURE ALTER_IDN_OAUTH2_ACCESS_TOKEN()
BEGIN
    IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='IDN_OAUTH2_ACCESS_TOKEN') THEN
        IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='IDN_OAUTH2_ACCESS_TOKEN' AND COLUMN_NAME='CONSENTED_TOKEN') THEN
            ALTER TABLE `IDN_OAUTH2_ACCESS_TOKEN` ADD COLUMN `CONSENTED_TOKEN` VARCHAR(6);
        END IF;
    END IF;
END $$
DELIMITER ;

CALL ALTER_IDN_OAUTH2_ACCESS_TOKEN();

DROP PROCEDURE IF EXISTS ALTER_IDN_FED_AUTH_SESSION_MAPPING;

DELIMITER $$
CREATE PROCEDURE ALTER_IDN_FED_AUTH_SESSION_MAPPING()
BEGIN
    IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='IDN_FED_AUTH_SESSION_MAPPING') THEN
        IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA=DATABASE() AND TABLE_NAME='IDN_FED_AUTH_SESSION_MAPPING' AND COLUMN_NAME='ID') THEN
            ALTER TABLE IDN_FED_AUTH_SESSION_MAPPING DROP PRIMARY KEY;
            ALTER TABLE IDN_FED_AUTH_SESSION_MAPPING ADD ID INTEGER NOT NULL AUTO_INCREMENT, ADD PRIMARY KEY (ID);
            ALTER TABLE IDN_FED_AUTH_SESSION_MAPPING ADD TENANT_ID INTEGER DEFAULT 0 NOT NULL;
            ALTER TABLE IDN_FED_AUTH_SESSION_MAPPING ADD UNIQUE(IDP_SESSION_ID, TENANT_ID);
        END IF;
    END IF;
END $$
DELIMITER ;

CALL ALTER_IDN_FED_AUTH_SESSION_MAPPING();

DROP PROCEDURE IF EXISTS ALTER_IDN_FED_AUTH_SESSION_MAPPING;

DROP PROCEDURE IF EXISTS ADD_TENANT_ID_SP;

DELIMITER $$
CREATE PROCEDURE ADD_TENANT_ID_SP()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE sessionId VARCHAR(255);
    DECLARE tenantId INTEGER;
    DECLARE curSessionId CURSOR FOR SELECT SESSION_ID FROM IDN_FED_AUTH_SESSION_MAPPING WHERE TENANT_ID = 0;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN curSessionId;
    getSession: LOOP
        FETCH curSessionId INTO sessionId;
        IF done THEN
            LEAVE getSession;
        END IF;

        SET tenantId = (SELECT TENANT_ID FROM IDN_AUTH_SESSION_STORE WHERE SESSION_ID = sessionId LIMIT 1);
        IF tenantId IS NOT NULL THEN
            UPDATE IDN_FED_AUTH_SESSION_MAPPING SET TENANT_ID = tenantId WHERE SESSION_ID = sessionId;
        END IF;
    END LOOP getSession;
    CLOSE curSessionId;
END $$
DELIMITER ;

CALL ADD_TENANT_ID_SP();

DROP PROCEDURE IF EXISTS ADD_TENANT_ID_SP;
