CREATE OR REPLACE PROCEDURE ADD_PRIMARY_KEY_COLUMN(TABLE_NAME IN VARCHAR2, SEQUENCE_NAME IN VARCHAR2, TRIGGER_NAME IN VARCHAR2)
    IS
BEGIN
    DECLARE
        ADD_COLUMN_STATEMENT VARCHAR2(300);
        SEQ_STATEMENT VARCHAR2(400);
        TRIG_STATEMENT VARCHAR2(600);
        UPDATE_STATEMENT VARCHAR2(300);
        PK_STATEMENT VARCHAR2(300);

    BEGIN
        ADD_COLUMN_STATEMENT := 'ALTER TABLE ' || TABLE_NAME || ' ADD ID INTEGER DEFAULT 0 NOT NULL';
        SEQ_STATEMENT := 'CREATE SEQUENCE ' || SEQUENCE_NAME || ' START WITH 1 INCREMENT BY 1 NOCACHE';
        TRIG_STATEMENT := 'CREATE OR REPLACE TRIGGER ' || TRIGGER_NAME || ' BEFORE INSERT ON ' || TABLE_NAME || ' REFERENCING NEW AS NEW FOR EACH ROW BEGIN SELECT ' || SEQUENCE_NAME || '.nextval INTO :NEW.ID FROM dual; END;';
        UPDATE_STATEMENT := 'UPDATE ' || TABLE_NAME || ' SET ID = ' || SEQUENCE_NAME || '.NEXTVAL';
        PK_STATEMENT := 'ALTER TABLE ' || TABLE_NAME || ' ADD PRIMARY KEY (ID)';

        EXECUTE IMMEDIATE ADD_COLUMN_STATEMENT;
        EXECUTE IMMEDIATE SEQ_STATEMENT;
        EXECUTE IMMEDIATE TRIG_STATEMENT;
        EXECUTE IMMEDIATE UPDATE_STATEMENT;
        EXECUTE IMMEDIATE PK_STATEMENT;
        COMMIT;
    END;
END;
/

CALL ADD_PRIMARY_KEY_COLUMN('IDN_OAUTH2_ACCESS_TOKEN_AUDIT', 'IDN_OAUTH2_ACCESS_TKN_ADT_SEQ', 'IDN_OAUTH2_ACCESS_TKN_ADT_TRIG')
/

CALL ADD_PRIMARY_KEY_COLUMN('IDN_OAUTH2_SCOPE_BINDING', 'IDN_OAUTH2_SCOPE_BINDING_SEQ', 'IDN_OAUTH2_SCOPE_BINDING_TRIG')
/

CALL ADD_PRIMARY_KEY_COLUMN('IDN_AUTH_USER_SESSION_MAPPING', 'IDN_AUTH_USER_SESSION_MAP_SEQ', 'IDN_AUTH_USER_SESSION_MAP_TRIG')
/

CALL ADD_PRIMARY_KEY_COLUMN('IDN_OAUTH2_CIBA_REQUEST_SCOPES', 'IDN_OAUTH2_CIBA_SCOPES_SEQ', 'IDN_OAUTH2_CIBA_SCOPES_TRIG')
/

ALTER TABLE IDN_OAUTH2_ACCESS_TOKEN ADD CONSENTED_TOKEN VARCHAR(6)
/

CREATE OR REPLACE PROCEDURE ALTER_IDN_FED_AUTH_SESSION_MAPPING
IS
  BEGIN
    declare
      column_count INTEGER;
    begin
      select count(*) INTO column_count
      FROM ALL_TAB_COLUMNS
      WHERE OWNER = (SELECT USER FROM DUAL)
        AND TABLE_NAME = 'IDN_FED_AUTH_SESSION_MAPPING'
        AND COLUMN_NAME = 'ID';
      IF column_count = 0
      THEN
        EXECUTE IMMEDIATE 'ALTER TABLE IDN_FED_AUTH_SESSION_MAPPING DROP PRIMARY KEY';
        EXECUTE IMMEDIATE 'CALL ADD_PRIMARY_KEY_COLUMN(''IDN_FED_AUTH_SESSION_MAPPING'', ''IDN_FED_AUTH_SESSION_MAPPING_SEQ'', ''IDN_FED_AUTH_SESSION_MAPPING_TRIG'')';
        EXECUTE IMMEDIATE 'ALTER TABLE IDN_FED_AUTH_SESSION_MAPPING ADD TENANT_ID INTEGER DEFAULT 0 NOT NULL';
        EXECUTE IMMEDIATE 'ALTER TABLE IDN_FED_AUTH_SESSION_MAPPING ADD UNIQUE (IDP_SESSION_ID, TENANT_ID)';
      END IF;
    end;
  END;
/

CALL ALTER_IDN_FED_AUTH_SESSION_MAPPING()
/

DROP PROCEDURE ALTER_IDN_FED_AUTH_SESSION_MAPPING
/

CREATE OR REPLACE PROCEDURE ADD_TENANT_ID_SP IS
   CURSOR curSessionId IS
      SELECT SESSION_ID FROM IDN_FED_AUTH_SESSION_MAPPING WHERE TENANT_ID = 0;

   sessionId   IDN_FED_AUTH_SESSION_MAPPING.SESSION_ID%TYPE;
   tenantId    IDN_AUTH_SESSION_STORE.TENANT_ID%TYPE;
BEGIN
   OPEN curSessionId;
   LOOP
      FETCH curSessionId INTO sessionId;
      EXIT WHEN curSessionId%NOTFOUND;
      BEGIN
         SELECT TENANT_ID INTO tenantId FROM IDN_AUTH_SESSION_STORE WHERE SESSION_ID = sessionId AND ROWNUM = 1;
         IF tenantId IS NOT NULL THEN
            UPDATE IDN_FED_AUTH_SESSION_MAPPING SET TENANT_ID = tenantId WHERE SESSION_ID = sessionId;
         END IF;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            NULL;
      END;
   END LOOP;
   CLOSE curSessionId;
END;
/

CALL ADD_TENANT_ID_SP()
/

DROP PROCEDURE ADD_TENANT_ID_SP
/

DROP PROCEDURE ADD_PRIMARY_KEY_COLUMN
/
