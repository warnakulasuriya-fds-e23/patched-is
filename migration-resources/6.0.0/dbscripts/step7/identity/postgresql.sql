DROP SEQUENCE IF EXISTS IDN_OAUTH2_ACCESS_TOKEN_AUDIT_PK_SEQ;
CREATE SEQUENCE IDN_OAUTH2_ACCESS_TOKEN_AUDIT_PK_SEQ;
ALTER TABLE IDN_OAUTH2_ACCESS_TOKEN_AUDIT ADD ID INTEGER DEFAULT NEXTVAL('IDN_OAUTH2_ACCESS_TOKEN_AUDIT_PK_SEQ') PRIMARY KEY;

DROP SEQUENCE IF EXISTS IDN_OAUTH2_SCOPE_BINDING_PK_SEQ;
CREATE SEQUENCE IDN_OAUTH2_SCOPE_BINDING_PK_SEQ;
ALTER TABLE IDN_OAUTH2_SCOPE_BINDING ADD ID INTEGER DEFAULT NEXTVAL('IDN_OAUTH2_SCOPE_BINDING_PK_SEQ') PRIMARY KEY;

DROP SEQUENCE IF EXISTS IDN_AUTH_USER_SESSION_MAPPING_PK_SEQ;
CREATE SEQUENCE IDN_AUTH_USER_SESSION_MAPPING_PK_SEQ;
ALTER TABLE IDN_AUTH_USER_SESSION_MAPPING ADD ID INTEGER DEFAULT NEXTVAL('IDN_AUTH_USER_SESSION_MAPPING_PK_SEQ') PRIMARY KEY;

DROP SEQUENCE IF EXISTS IDN_OAUTH2_CIBA_REQUEST_SCOPES_PK_SEQ;
CREATE SEQUENCE IDN_OAUTH2_CIBA_REQUEST_SCOPES_PK_SEQ;
ALTER TABLE IDN_OAUTH2_CIBA_REQUEST_SCOPES ADD ID INTEGER DEFAULT NEXTVAL('IDN_OAUTH2_CIBA_REQUEST_SCOPES_PK_SEQ') PRIMARY KEY;

ALTER TABLE IDN_OAUTH2_ACCESS_TOKEN ADD COLUMN IF NOT EXISTS CONSENTED_TOKEN VARCHAR(6);

--<![[Start of Procedure]]>--
DO $$
DECLARE
    con_name varchar(300);
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns WHERE table_name = 'idn_fed_auth_session_mapping' AND column_name = 'id'
    ) THEN
        SELECT 'ALTER TABLE IDN_FED_AUTH_SESSION_MAPPING DROP CONSTRAINT ' || tc.constraint_name INTO con_name
        FROM information_schema.table_constraints AS tc
        JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name
        JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name
        WHERE tc.constraint_type = 'PRIMARY KEY' AND tc.table_name = 'idn_fed_auth_session_mapping' LIMIT 1;

        IF con_name IS NOT NULL THEN
            EXECUTE con_name;
        END IF;

        DROP SEQUENCE IF EXISTS IDN_FED_AUTH_SESSION_MAPPING_PK_SEQ;
        CREATE SEQUENCE IDN_FED_AUTH_SESSION_MAPPING_PK_SEQ;
        ALTER TABLE IDN_FED_AUTH_SESSION_MAPPING ADD COLUMN ID INTEGER DEFAULT NEXTVAL('IDN_FED_AUTH_SESSION_MAPPING_PK_SEQ') PRIMARY KEY;
        ALTER TABLE IDN_FED_AUTH_SESSION_MAPPING ADD COLUMN TENANT_ID INTEGER NOT NULL DEFAULT 0;
        ALTER TABLE IDN_FED_AUTH_SESSION_MAPPING ADD CONSTRAINT IDN_FED_AUTH_SESSION_MAPPING_UQ_KEY UNIQUE (IDP_SESSION_ID, TENANT_ID);
    END IF;
END;
$$
LANGUAGE 'plpgsql';
--<![[End of Procedure]]>--

--<![[Start of Procedure]]>--
CREATE OR REPLACE PROCEDURE add_tenant_id_sp()
LANGUAGE plpgsql
AS $$
DECLARE
    sessionId TEXT;
    tenantId INTEGER;
    curSessionId CURSOR FOR SELECT session_id FROM idn_fed_auth_session_mapping WHERE tenant_id = 0;
BEGIN
    OPEN curSessionId;
    LOOP
        FETCH curSessionId INTO sessionId;
        EXIT WHEN NOT FOUND;
        SELECT tenant_id INTO tenantId FROM idn_auth_session_store WHERE session_id = sessionId LIMIT 1;
        IF tenantId IS NOT NULL THEN
            UPDATE idn_fed_auth_session_mapping SET tenant_id = tenantId WHERE session_id = sessionId;
        END IF;
    END LOOP;
    CLOSE curSessionId;
END;
$$;
--<![[End of Procedure]]>--

CALL add_tenant_id_sp();

DROP PROCEDURE IF EXISTS add_tenant_id_sp;
