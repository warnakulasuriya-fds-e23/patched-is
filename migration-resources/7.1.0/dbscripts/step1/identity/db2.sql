CREATE TABLE SP_TRUSTED_APPS (
			ID INTEGER NOT NULL,
			SP_ID INTEGER NOT NULL,
			PLATFORM_TYPE VARCHAR(255) NOT NULL,
			APP_IDENTIFIER VARCHAR(255) NOT NULL,
			THUMBPRINTS VARCHAR(2048),
			IS_FIDO_TRUSTED BOOLEAN WITH DEFAULT FALSE,
			TENANT_ID INTEGER NOT NULL,
			PRIMARY KEY (ID),
			UNIQUE (SP_ID, PLATFORM_TYPE),
			FOREIGN KEY (SP_ID) REFERENCES SP_APP(ID) ON DELETE CASCADE)
/
CREATE SEQUENCE SP_TRUSTED_APPS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER SP_TRUSTED_APPS_TRIG NO CASCADE
            BEFORE INSERT
            ON SP_TRUSTED_APPS
            REFERENCING NEW AS NEW
            FOR EACH ROW MODE DB2SQL
                BEGIN ATOMIC
                    SET (NEW.ID) = (NEXTVAL FOR SP_TRUSTED_APPS_SEQ);
                END
/
CREATE TABLE IDN_NOTIFICATION_TYPE (
    ID INTEGER NOT NULL,
    TYPE_KEY VARCHAR(255) NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    CHANNEL VARCHAR(255) NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    VERSION VARCHAR(15) NOT NULL,
    CREATED_AT TIMESTAMP NOT NULL,
    UPDATED_AT TIMESTAMP NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT NOTIFICATION_TYPE_KEY_CONSTRAINT UNIQUE (TYPE_KEY, CHANNEL, TENANT_ID),
    CONSTRAINT NOTIFICATION_TYPE_NAME_CONSTRAINT UNIQUE (NAME, CHANNEL, TENANT_ID)
)
/
CREATE SEQUENCE IDN_NOTIFICATION_TYPE_SEQUENCE START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER IDN_NOTIFICATION_TYPE_TRIGGER NO CASCADE BEFORE INSERT ON IDN_NOTIFICATION_TYPE
REFERENCING NEW AS NEW FOR EACH ROW MODE DB2SQL
  BEGIN ATOMIC
    SET (NEW.ID)
    = (NEXTVAL FOR IDN_NOTIFICATION_TYPE_SEQUENCE);
  END
/
CREATE TABLE IDN_NOTIFICATION_ORG_TEMPLATE (
    ID INTEGER NOT NULL,
    TEMPLATE_KEY VARCHAR(50) NOT NULL,
    LOCALE VARCHAR(50) NOT NULL,
    CONTENT BLOB NOT NULL,
    CONTENT_TYPE VARCHAR(50),
    TYPE_ID INTEGER NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    VERSION VARCHAR(15) NOT NULL,
    CREATED_AT TIMESTAMP NOT NULL,
    UPDATED_AT TIMESTAMP NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (TYPE_ID) REFERENCES IDN_NOTIFICATION_TYPE(ID) ON DELETE CASCADE,
    CONSTRAINT ORG_NOTIFICATION_TEMPLATE_KEY_CONSTRAINT UNIQUE (TEMPLATE_KEY, TYPE_ID, TENANT_ID),
    CONSTRAINT ORG_NOTIFICATION_TEMPLATE_LOCALE_CONSTRAINT UNIQUE (LOCALE, TYPE_ID, TENANT_ID)
)
/
CREATE SEQUENCE IDN_NOTIFICATION_ORG_TEMPLATE_SEQUENCE START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER IDN_NOTIFICATION_ORG_TEMPLATE_TRIGGER NO CASCADE BEFORE INSERT ON IDN_NOTIFICATION_ORG_TEMPLATE
REFERENCING NEW AS NEW FOR EACH ROW MODE DB2SQL
  BEGIN ATOMIC
    SET (NEW.ID)
    = (NEXTVAL FOR IDN_NOTIFICATION_ORG_TEMPLATE_SEQUENCE);
  END
/
CREATE TABLE IDN_NOTIFICATION_APP_TEMPLATE (
    ID INTEGER NOT NULL,
    TEMPLATE_KEY VARCHAR(50) NOT NULL,
    LOCALE VARCHAR(50) NOT NULL,
    CONTENT BLOB NOT NULL,
    CONTENT_TYPE VARCHAR(50),
    TYPE_ID INTEGER NOT NULL,
    APP_ID VARCHAR(255) NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    VERSION VARCHAR(15) NOT NULL,
    CREATED_AT TIMESTAMP NOT NULL,
    UPDATED_AT TIMESTAMP NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (TYPE_ID) REFERENCES IDN_NOTIFICATION_TYPE(ID) ON DELETE CASCADE,
    CONSTRAINT APP_NOTIFICATION_TEMPLATE_KEY_CONSTRAINT UNIQUE (TEMPLATE_KEY, TYPE_ID, APP_ID, TENANT_ID),
    CONSTRAINT APP_NOTIFICATION_TEMPLATE_LOCALE_CONSTRAINT UNIQUE (LOCALE, TYPE_ID, APP_ID, TENANT_ID)
)
/
CREATE SEQUENCE IDN_NOTIFICATION_APP_TEMPLATE_SEQUENCE START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER IDN_NOTIFICATION_APP_TEMPLATE_TRIGGER NO CASCADE BEFORE INSERT ON IDN_NOTIFICATION_APP_TEMPLATE
REFERENCING NEW AS NEW FOR EACH ROW MODE DB2SQL
  BEGIN ATOMIC
    SET (NEW.ID)
    = (NEXTVAL FOR IDN_NOTIFICATION_APP_TEMPLATE_SEQUENCE);
  END
/
CREATE TABLE IDN_ACTION (
    UUID CHAR(36) NOT NULL,
    TYPE VARCHAR(50) NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(255),
    STATUS VARCHAR(10) NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    VERSION VARCHAR(15) NOT NULL,
    PRIMARY KEY (UUID)
)
/
CREATE TABLE IDN_ACTION_PROPERTIES (
    ACTION_UUID CHAR(36) NOT NULL,
    PROPERTY_NAME VARCHAR(100) NOT NULL,
    PROPERTY_VALUE VARCHAR(255) NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    PRIMARY KEY (ACTION_UUID, PROPERTY_NAME),
    FOREIGN KEY (ACTION_UUID) REFERENCES IDN_ACTION(UUID) ON DELETE CASCADE
)
/
CREATE TABLE IDN_OAUTH2_TOKEN_CLAIMS (
    ID INTEGER NOT NULL,
    APP_ID INTEGER NOT NULL,
    CLAIM_URI VARCHAR(255) NOT NULL,
    PRIMARY KEY (ID),
    CONSTRAINT IDN_OAUTH2_TOKEN_CLAIMS_CONSTRAINT UNIQUE (APP_ID, CLAIM_URI),
    FOREIGN KEY (APP_ID) REFERENCES IDN_OAUTH_CONSUMER_APPS(ID) ON DELETE CASCADE
)
/
CREATE SEQUENCE IDN_OAUTH2_TOKEN_CLAIMS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER IDN_OAUTH2_TOKEN_CLAIMS_TRIG NO CASCADE BEFORE INSERT ON IDN_OAUTH2_TOKEN_CLAIMS
REFERENCING NEW AS NEW FOR EACH ROW MODE DB2SQL
    BEGIN ATOMIC
        SET (NEW.ID)
        = (NEXTVAL FOR IDN_OAUTH2_TOKEN_CLAIMS_SEQ);
    END
/

CREATE TABLE IDN_SAML2_SERVICE_PROVIDER (
    ID INTEGER NOT NULL,
    ISSUER VARCHAR(255) NOT NULL,
    DEFAULT_ASSERTION_CONSUMER_URL VARCHAR(2048) NOT NULL,
    NAME_ID_FORMAT VARCHAR(255) NOT NULL,
    CERT_ALIAS VARCHAR(255),
    REQ_SIG_VALIDATION CHAR(1),
    SIGN_RESPONSE CHAR(1) NOT NULL,
    SIGN_ASSERTIONS CHAR(1) NOT NULL,
    SIGNING_ALGO VARCHAR(255) NOT NULL,
    DIGEST_ALGO VARCHAR(255) NOT NULL,
    ENCRYPT_ASSERTION CHAR(1),
    ASSERTION_ENCRYPTION_ALGO VARCHAR(255),
    KEY_ENCRYPTION_ALGO VARCHAR(255),
    ATTR_PROFILE_ENABLED CHAR(1) NOT NULL,
    ATTR_SERVICE_INDEX VARCHAR(255),
    SLO_PROFILE_ENABLED CHAR(1) NOT NULL,
    SLO_METHOD VARCHAR(255),
    SLO_RESPONSE_URL VARCHAR(2048),
    SLO_REQUEST_URL VARCHAR(2048),
    IDP_INIT_SSO_ENABLED CHAR(1),
    IDP_INIT_SLO_ENABLED CHAR(1),
    QUERY_REQUEST_PROFILE_ENABLED CHAR(1) NOT NULL,
    ECP_ENABLED CHAR(1) NOT NULL,
    ARTIFACT_BINDING_ENABLED CHAR(1) NOT NULL,
    ARTIFACT_RESOLVE_REQ_SIG_VALIDATION CHAR(1),
    IDP_ENTITY_ID_ALIAS VARCHAR(255),
    ISSUER_QUALIFIER VARCHAR(255),
    SUPPORTED_ASSERTION_QUERY_REQUEST_TYPES VARCHAR(255),
    TENANT_ID INTEGER NOT NULL,
    VERSION VARCHAR(15) NOT NULL,
    CREATED_AT TIMESTAMP NOT NULL,
    UPDATED_AT TIMESTAMP NOT NULL,
    ATTR_NAME_FORMAT VARCHAR(255),
    PRIMARY KEY (ID),
    CONSTRAINT IDN_SAML2_SERVICE_PROVIDER_CONSTRAINT UNIQUE (ISSUER, TENANT_ID)
)
/
CREATE SEQUENCE IDN_SAML2_SERVICE_PROVIDER_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER IDN_SAML2_SERVICE_PROVIDER_TRIG NO CASCADE
    BEFORE INSERT
    ON IDN_SAML2_SERVICE_PROVIDER
    REFERENCING NEW AS NEW
    FOR EACH ROW MODE DB2SQL
        BEGIN ATOMIC
            SET (NEW.ID) = (NEXTVAL FOR IDN_SAML2_SERVICE_PROVIDER_SEQ);
        END
/

CREATE TABLE IDN_SAML2_SP_PROPERTIES (
    ID INTEGER NOT NULL,
    PROPERTY_NAME VARCHAR(255) NOT NULL,
    PROPERTY_VALUE VARCHAR(2048) NOT NULL,
    SP_ID INTEGER NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (SP_ID) REFERENCES IDN_SAML2_SERVICE_PROVIDER(ID) ON DELETE CASCADE
)
/
CREATE SEQUENCE IDN_SAML2_SP_PROPERTIES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER IDN_SAML2_SP_PROPERTIES_TRIG NO CASCADE
    BEFORE INSERT
    ON IDN_SAML2_SP_PROPERTIES
    REFERENCING NEW AS NEW
    FOR EACH ROW MODE DB2SQL
        BEGIN ATOMIC
            SET (NEW.ID) = (NEXTVAL FOR IDN_SAML2_SP_PROPERTIES_SEQ);
        END
/

CREATE TABLE AUTHORIZATION_DETAILS_TYPES (
    ID CHAR(36) NOT NULL,
    TYPE VARCHAR(255) NOT NULL,
    API_ID CHAR(36) NOT NULL,
    CURSOR_KEY INTEGER NOT NULL,
    NAME VARCHAR(255),
    DESCRIPTION VARCHAR(255),
    JSON_SCHEMA CLOB NOT NULL,
    TENANT_ID INTEGER NOT NULL DEFAULT -1,

    PRIMARY KEY (ID),
    CONSTRAINT AUTHORIZATION_DETAILS_TYPES_UNIQUE_CONSTRAINT UNIQUE (TYPE, TENANT_ID),
    FOREIGN KEY (API_ID) REFERENCES API_RESOURCE(ID) ON DELETE CASCADE
)
/
CREATE SEQUENCE AUTHORIZATION_DETAILS_TYPES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER AUTHORIZATION_DETAILS_TYPES_TRIG NO CASCADE
    BEFORE INSERT
    ON AUTHORIZATION_DETAILS_TYPES
    REFERENCING NEW AS NEW
    FOR EACH ROW MODE DB2SQL
    BEGIN ATOMIC
        SET (NEW.CURSOR_KEY) = (NEXTVAL FOR AUTHORIZATION_DETAILS_TYPES_SEQ);
    END
/

CREATE TABLE AUTHORIZED_AUTHORIZATION_DETAILS_TYPES (
    APP_ID CHAR(36) NOT NULL,
    API_ID CHAR(36) NOT NULL,
    TYPE_ID CHAR(36) NOT NULL,

    PRIMARY KEY (APP_ID, API_ID, TYPE_ID),
    FOREIGN KEY (API_ID) REFERENCES API_RESOURCE(ID),
    FOREIGN KEY (TYPE_ID) REFERENCES AUTHORIZATION_DETAILS_TYPES(ID) ON DELETE CASCADE,
    FOREIGN KEY (APP_ID) REFERENCES SP_APP(UUID),
    FOREIGN KEY (APP_ID, API_ID) REFERENCES AUTHORIZED_API(APP_ID, API_ID),

    CONSTRAINT AUTHORIZED_AUTHORIZATION_DETAILS_UNIQUE UNIQUE (APP_ID, TYPE_ID)
)
/

CREATE TABLE IDN_OAUTH2_USER_CONSENTED_AUTHORIZATION_DETAILS (
    ID INTEGER NOT NULL,
    CONSENT_ID VARCHAR(255) NOT NULL,
    TYPE_ID CHAR(36) NOT NULL,
    AUTHORIZATION_DETAILS CLOB NOT NULL,
    CONSENT BOOLEAN WITH DEFAULT FALSE,
    TENANT_ID INTEGER NOT NULL,

    PRIMARY KEY (ID, CONSENT_ID, TYPE_ID),
    FOREIGN KEY (TYPE_ID) REFERENCES AUTHORIZATION_DETAILS_TYPES(ID) ON DELETE CASCADE,
    FOREIGN KEY (CONSENT_ID) REFERENCES IDN_OAUTH2_USER_CONSENT(CONSENT_ID) ON DELETE CASCADE
)
/
CREATE SEQUENCE IDN_OAUTH2_USER_CONSENTED_AUTHORIZATION_DETAILS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER IDN_OAUTH2_USER_CONSENTED_AUTHORIZATION_DETAILS_TRIG NO CASCADE
    BEFORE INSERT
    ON IDN_OAUTH2_USER_CONSENTED_AUTHORIZATION_DETAILS
    REFERENCING NEW AS NEW
    FOR EACH ROW MODE DB2SQL
        BEGIN ATOMIC
            SET (NEW.ID) = (NEXTVAL FOR IDN_OAUTH2_USER_CONSENTED_AUTHORIZATION_DETAILS_SEQ);
        END
/

CREATE TABLE IDN_OAUTH2_ACCESS_TOKEN_AUTHORIZATION_DETAILS (
    ID INTEGER NOT NULL,
    TYPE_ID CHAR(36) NOT NULL,
    AUTHORIZATION_DETAILS CLOB NOT NULL,
    TOKEN_ID VARCHAR (255) NOT NULL,
    TENANT_ID INTEGER DEFAULT -1,

    PRIMARY KEY (ID, TOKEN_ID, TYPE_ID),
    FOREIGN KEY (TYPE_ID) REFERENCES AUTHORIZATION_DETAILS_TYPES(ID) ON DELETE CASCADE,
    FOREIGN KEY (TOKEN_ID) REFERENCES IDN_OAUTH2_ACCESS_TOKEN(TOKEN_ID) ON DELETE CASCADE
)
/
CREATE SEQUENCE IDN_OAUTH2_ACCESS_TOKEN_AUTHORIZATION_DETAILS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER IDN_OAUTH2_ACCESS_TOKEN_AUTHORIZATION_DETAILS_TRIG NO CASCADE
    BEFORE INSERT
    ON IDN_OAUTH2_ACCESS_TOKEN_AUTHORIZATION_DETAILS
    REFERENCING NEW AS NEW
    FOR EACH ROW MODE DB2SQL
        BEGIN ATOMIC
            SET (NEW.ID) = (NEXTVAL FOR IDN_OAUTH2_ACCESS_TOKEN_AUTHORIZATION_DETAILS_SEQ);
        END
/

CREATE TABLE IDN_OAUTH2_AUTHZ_CODE_AUTHORIZATION_DETAILS (
    ID INTEGER NOT NULL,
    TYPE_ID CHAR(36) NOT NULL,
    AUTHORIZATION_DETAILS CLOB NOT NULL,
    CODE_ID VARCHAR(255) NOT NULL,
    TENANT_ID INTEGER DEFAULT -1,

    PRIMARY KEY (ID, CODE_ID, TYPE_ID),
    FOREIGN KEY (TYPE_ID) REFERENCES AUTHORIZATION_DETAILS_TYPES(ID) ON DELETE CASCADE,
    FOREIGN KEY (CODE_ID) REFERENCES IDN_OAUTH2_AUTHORIZATION_CODE(CODE_ID) ON DELETE CASCADE
)
/
CREATE SEQUENCE IDN_OAUTH2_AUTHZ_CODE_AUTHORIZATION_DETAILS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER IDN_OAUTH2_AUTHZ_CODE_AUTHORIZATION_DETAILS_TRIG NO CASCADE
    BEFORE INSERT
    ON IDN_OAUTH2_AUTHZ_CODE_AUTHORIZATION_DETAILS
    REFERENCING NEW AS NEW
    FOR EACH ROW MODE DB2SQL
        BEGIN ATOMIC
            SET (NEW.ID) = (NEXTVAL FOR IDN_OAUTH2_AUTHZ_CODE_AUTHORIZATION_DETAILS_SEQ);
        END
/

CREATE TABLE IDN_RULE (
    ID INTEGER NOT NULL,
    UUID CHAR(36) NOT NULL,
    CONTENT BLOB NOT NULL,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    TENANT_ID INTEGER NOT NULL,
    VERSION VARCHAR(15) NOT NULL,
    PRIMARY KEY (ID),
    UNIQUE (UUID)
)
/
CREATE SEQUENCE IDN_RULE_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TABLE IDN_RULE_REFERENCES (
    ID INTEGER NOT NULL,
    RULE_ID INTEGER NOT NULL,
    FIELD_NAME VARCHAR(100) NOT NULL,
    FIELD_REFERENCE VARCHAR(255) NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (RULE_ID) REFERENCES IDN_RULE(ID) ON DELETE CASCADE
)
/
CREATE TRIGGER IDN_RULE_TRIG NO CASCADE BEFORE INSERT ON IDN_RULE
REFERENCING NEW AS NEW FOR EACH ROW MODE DB2SQL
    BEGIN ATOMIC
        SET (NEW.ID) = (NEXTVAL FOR IDN_RULE_SEQ);
    END
/
CREATE SEQUENCE IDN_RULE_REFERENCES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE TRIGGER IDN_RULE_REFERENCES_TRIG NO CASCADE BEFORE INSERT ON IDN_RULE_REFERENCES
REFERENCING NEW AS NEW FOR EACH ROW MODE DB2SQL
    BEGIN ATOMIC
        SET (NEW.ID) = (NEXTVAL FOR IDN_RULE_REFERENCES_SEQ);
    END
/

CREATE TABLE IDN_PUSH_DEVICE_STORE (
    ID VARCHAR(255) NOT NULL,
    USER_ID VARCHAR(255) NOT NULL,
    DEVICE_NAME VARCHAR(45) NOT NULL,
    DEVICE_MODEL VARCHAR(45) NOT NULL,
    DEVICE_TOKEN VARCHAR(255) NOT NULL,
    DEVICE_HANDLE VARCHAR(255),
    PUBLIC_KEY VARCHAR(2048) NOT NULL,
    PROVIDER VARCHAR(45) NOT NULL,
    TENANT_ID INTEGER NOT NULL,
    PRIMARY KEY (ID),
    UNIQUE (USER_ID)
)
/

ALTER TABLE IDN_OAUTH2_ACCESS_TOKEN_AUDIT ADD COLUMN TOKEN_BINDING_REF VARCHAR(32) NOT NULL DEFAULT 'NONE'
/
BEGIN
  DECLARE v_count INT DEFAULT 0;

  SELECT COUNT(*) INTO v_count
  FROM SYSCAT.COLUMNS
  WHERE TABNAME = 'IDN_OAUTH2_ACCESS_TOKEN_AUDIT'
    AND COLNAME = 'CONSENTED_TOKEN';

  IF v_count = 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE IDN_OAUTH2_ACCESS_TOKEN_AUDIT ADD COLUMN CONSENTED_TOKEN VARCHAR(6)';
  END IF;
END
/
ALTER TABLE IDN_OAUTH2_ACCESS_TOKEN_AUDIT ADD AUTHORIZED_ORGANIZATION varchar(36) NOT NULL DEFAULT 'NONE'
/

ALTER TABLE IDP_AUTHENTICATOR ADD COLUMN DEFINED_BY VARCHAR(25) NOT NULL DEFAULT 'SYSTEM'
/
ALTER TABLE IDP_AUTHENTICATOR ADD COLUMN AUTHENTICATION_TYPE VARCHAR(25) NOT NULL DEFAULT 'IDENTIFICATION'
/
ALTER TABLE IDP_AUTHENTICATOR ADD COLUMN IMAGE_URL VARCHAR(1024)
/
ALTER TABLE IDP_AUTHENTICATOR ADD COLUMN DESCRIPTION VARCHAR(1024)
/
CREATE OR REPLACE PROCEDURE ALTER_SP_APP
BEGIN ATOMIC
    IF EXISTS(SELECT * FROM SYSCAT.TABLES WHERE TABNAME='SP_APP')
	THEN
	    IF NOT EXISTS(SELECT * FROM SYSCAT.COLUMNS WHERE TABNAME='SP_APP' AND COLNAME='VERSION')
	    THEN
	        EXECUTE IMMEDIATE 'ALTER TABLE SP_APP ADD COLUMN VERSION VARCHAR(255) NOT NULL DEFAULT ''v1.0.0''';
	    END IF;
    END IF;
END
/
CALL ALTER_SP_APP
/
DROP PROCEDURE ALTER_SP_APP
/
ALTER TABLE IDN_CERTIFICATE ADD COLUMN UUID CHAR(36)
/

INSERT INTO IDN_SECRET_TYPE (ID, NAME, DESCRIPTION) VALUES
('33f0a41b-569d-4ea5-a891-6c0e78a1c3b0', 'ACTION_API_ENDPOINT_AUTH_SECRETS', 'Secret type to uniquely identify secrets relevant to action endpoint authentication properties'),
('b411dafd-e2c4-4d2f-afba-3900d802725a', 'PUSH_PROVIDER_SECRET_PROPERTIES', 'Secret type to uniquely identify secrets relevant to push provider properties'),
('ce234fd5-3fb4-4a40-9911-818be9b4ee10', 'REMOTE_LOGGING_SECRETS', 'Secret type to uniquely identify secrets relevant to remote logging properties')
/

INSERT INTO IDN_CONFIG_TYPE (ID, NAME, DESCRIPTION)
SELECT '3e5b1f91-72d8-4fbc-94d1-1b9a4f8c3b07', 'IMPERSONATION_CONFIGURATION', 'A resource type to keep the tenant impersonation preferences.' FROM "SYSIBM".SYSDUMMY1
WHERE NOT EXISTS (SELECT * FROM IDN_CONFIG_TYPE WHERE id = '3e5b1f91-72d8-4fbc-94d1-1b9a4f8c3b07' OR name = 'IMPERSONATION_CONFIGURATION')
/

INSERT INTO IDN_CONFIG_TYPE (ID, NAME, DESCRIPTION) VALUES
('91116e95-ca63-4787-be2d-de13d04d1b55', 'CERTIFICATE_VALIDATOR', 'A resource type to keep the certificate validators.'),
('a17952b9-0942-4669-8529-479ca481146b', 'CERTIFICATE_REVOCATION_VALIDATION_CA', 'A resource type to keep the certificate revocation validation related certificate authorities.'),
('32360745-9c3e-4391-b563-66f17f0eb93a', 'ADMIN_ADVISORY_BANNER', 'A resource type to store admin advisory banner configurations.'),
('82ab7001-fb0e-44da-9169-1f63e4964d9b', 'REMOTE_LOGGING_CONFIG', 'A resource type to store remote server logger configurations.')
/

-- --------------------------- INDEX CREATION -----------------------------

-- ACTIONS --
CREATE INDEX IDX_IDN_ACTION_TY_TI ON IDN_ACTION (TYPE, TENANT_ID);
/
CREATE INDEX IDX_IDN_ACTION_PROPERTIES_AU_TI ON IDN_ACTION_PROPERTIES (ACTION_UUID, TENANT_ID);
/

--SAML--
CREATE INDEX IDX_SAML2_SP_TENANT_ID ON IDN_SAML2_SERVICE_PROVIDER (TENANT_ID)
/
CREATE INDEX IDX_SAML2_SP_PROPERTIES ON IDN_SAML2_SP_PROPERTIES (SP_ID)
/

-- RULES --
CREATE INDEX IDX_IDN_RULE_UUID_TID ON IDN_RULE (UUID, TENANT_ID)
/
CREATE INDEX IDX_IDN_RULE_REF_RID_TID ON IDN_RULE_REFERENCES (RULE_ID, TENANT_ID)
/

--SP_CLAIM_MAPPING--
CREATE INDEX IDX_SPCM_APP ON SP_CLAIM_MAPPING (APP_ID)
/

-- IDP_AUTHENTICATOR --
CREATE INDEX IDX_IDP_AUTH_DEFINED_BY ON IDP_AUTHENTICATOR (DEFINED_BY)
/
CREATE INDEX IDX_IDP_AUTH_IDP_ID ON IDP_AUTHENTICATOR (IDP_ID)
/
