/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-07-07 07:26:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.includes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl;
import java.nio.charset.StandardCharsets;
import java.util.*;
import org.json.JSONObject;
import java.util.Calendar;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.owasp.encoder.Encode;

public final class language_002dswitcher_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key) {
        return i18n(resourceBundle, customText, key, null, true);
    }

    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     * Overloaded method with default value.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @param defaultValue Default value.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key, String defaultValue) {
        return i18n(resourceBundle, customText, key, defaultValue, true);
    }

    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     * Overloaded method with default value with the ability to not fallback to resource bundle and return "" as default.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @param defaultValue Default value.
     * @param shouldFallbackToResourceBundle Should fallback to resource bundle.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key, String defaultValue, boolean shouldFallbackToResourceBundle) {
        String localizedString = null;
        Calendar calendar = Calendar.getInstance();
        int currentYear = calendar.get(Calendar.YEAR);

        try {
            if (customText != null && customText.has(key)) {
                localizedString = Encode.forHtmlContent(customText.getString(key));
            } else {
                if (StringUtils.isNotBlank(defaultValue)) {
                    localizedString = Encode.forHtmlContent(defaultValue);
                } else if (shouldFallbackToResourceBundle) {
                    localizedString = AuthenticationEndpointUtil.i18n(resourceBundle, key);
                } else {
                    localizedString = "";
                }
            }
        } catch (Exception e) {
            // Return the key itself as a fallback
            localizedString = Encode.forHtmlContent(key);
        }

        // Replace newline characters with actual line breaks
        localizedString = localizedString.replace("\\n", "\n");

        return localizedString.replace("{{currentYear}}", String.valueOf(currentYear));
    }

    /**
     * Replaces i18n path placeholders in a given link with locale and country codes.
     *
     * @param locale The locale from which to derive values for placeholders.
     * @param link The link containing i18n placeholders (e.g., {{lang}}, {{country}}, {{locale}}).
     * @return The link with placeholders replaced by actual values based on the given locale.
     */
    public String i18nLink(Locale locale, String link) {
        String transformedLink = link;

        try {
            String langCode = locale.getLanguage();
            String countryCode = locale.getCountry();
            String localeCode = locale.toLanguageTag();

            String LANGUAGE_PLACEHOLDER = "{{lang}}";
            String COUNTRY_PLACEHOLDER = "{{country}}";
            String LOCALE_PLACEHOLDER = "{{locale}}";

            if (transformedLink.contains(LANGUAGE_PLACEHOLDER) || transformedLink.contains(COUNTRY_PLACEHOLDER) || transformedLink.contains(LOCALE_PLACEHOLDER)) {
                transformedLink = transformedLink
                    .replace("{{lang}}", langCode)
                    .replace("{{country}}", countryCode)
                    .replace("{{locale}}", localeCode);
            } else {
                if (transformedLink.contains("?")) {
                    return transformedLink.concat("&ui_locales=" + localeCode);
                } else {
                    return transformedLink.concat("?ui_locales=" + localeCode);
                }
            }

            return StringEscapeUtils.escapeHtml4(transformedLink);
        } catch (Exception e) {
            // Return the link itself as a fallback.
            return StringEscapeUtils.escapeHtml4(transformedLink);
        }
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/includes/localize.jsp", Long.valueOf(1740062656000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(19);
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl");
    _jspx_imports_classes.add("org.apache.commons.text.StringEscapeUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.io.BufferedReader");
    _jspx_imports_classes.add("java.io.FileReader");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String lang = "en_US"; // Default lang is en_US
    String COOKIE_NAME = "ui_lang";
    Locale browserLocale = request.getLocale();
    Locale userLocale = browserLocale;
    String uiLocaleFromURL = request.getParameter("ui_locales");
    String localeFromCookie = null;
    String BUNDLE = "org.wso2.carbon.identity.application.authentication.endpoint.i18n.Resources";

    // List of screen names for retrieving text branding customizations.
    List<String> screenNames = new ArrayList<>();
    screenNames.add("common");

    // Map to store default supported language codes.
    // TODO: Use this map to generate the `language-switcher.jsp`.
    Map<String, String> supportedLanguages = new HashMap<>();
    supportedLanguages.put("en", "US");
    supportedLanguages.put("fr", "FR");
    supportedLanguages.put("es", "ES");
    supportedLanguages.put("pt", "PT");
    supportedLanguages.put("de", "DE");
    supportedLanguages.put("zh", "CN");
    supportedLanguages.put("ja", "JP");

    List<String> languageSupportedCountries = new ArrayList<>();
    languageSupportedCountries.add("US");
    languageSupportedCountries.add("FR");
    languageSupportedCountries.add("ES");
    languageSupportedCountries.add("PT");
    languageSupportedCountries.add("DE");
    languageSupportedCountries.add("CN");
    languageSupportedCountries.add("JP");
    languageSupportedCountries.add("BR");

    // Check cookie for the user selected language first
    Cookie[] cookies = request.getCookies();
    if (cookies != null) {
        for (Cookie cookie : cookies) {
            if (cookie.getName().equals(COOKIE_NAME)) {
                localeFromCookie = cookie.getValue();
            }
        }
    }

    // Set lang from the priority order
    if (localeFromCookie != null) {
        lang = localeFromCookie;

        try {
            String langStr = "en";
            String langLocale = "US";

            if (lang.contains("_")) {
                langStr = lang.split("_")[0];
                langLocale = lang.split("_")[1];
            } else if (lang.contains("-")) {
                langStr = lang.split("-")[0];
                langLocale = lang.split("-")[1];
            }

            userLocale = new Locale(langStr, langLocale);
        } catch (Exception e) {
            // In case the language is defined but not in the correct format
            userLocale = browserLocale;
        }
    } else if (uiLocaleFromURL != null) {
        for (String localeStr : uiLocaleFromURL.split(" ")) {
            String langStr = "en";
            String langLocale = "US";

            if (localeStr.contains("_")) {
                langStr = localeStr.split("_")[0];
                langLocale = localeStr.split("_")[1];
            } else if (localeStr.contains("-")) {
                langStr = localeStr.split("-")[0];
                langLocale = localeStr.split("-")[1];
            }

            Locale tempLocale = new Locale(langStr, langLocale);

            // Trying to find out whether we have resource bundle for the given locale
            try {
                ResourceBundle foundBundle = ResourceBundle.getBundle(BUNDLE, tempLocale);

                // If so, setting the userLocale to that locale. If not, set the browser locale as user locale
                // Currently, we only care about the language - we do not compare about country locales since our
                // supported locale set is limited.
                if (tempLocale.getLanguage().equals(foundBundle.getLocale().getLanguage())) {
                    userLocale = tempLocale;
                    break;
                } else if (tempLocale.getLanguage().equals("en") && foundBundle.getLocale().getLanguage().equals("")) {
                    // When the given locale is en - which is our fallback one, we have to handle it separately because
                    // returns and empty string as locale language
                    userLocale = tempLocale;
                    break;
                } else {
                    userLocale = browserLocale;
                }
            } catch (Exception e) {
                userLocale = browserLocale;
            }
        }
    } else {
        // `browserLocale` is coming as `en` instead of `en_US` for the first render before switching the language from the dropdown.
        String countryCode = browserLocale.getCountry();
        String fallbackCountryCode = supportedLanguages.get(browserLocale.getLanguage());

        if (StringUtils.isNotBlank(countryCode) && languageSupportedCountries.contains(countryCode)) {
            userLocale = new Locale(browserLocale.getLanguage(), countryCode);
        } else if (StringUtils.isNotBlank(fallbackCountryCode)){
            userLocale = new Locale(browserLocale.getLanguage(), fallbackCountryCode);
        } else {
            userLocale = new Locale("en","US");
        }
    }

    ResourceBundle resourceBundle = ResourceBundle.getBundle(BUNDLE, userLocale, new
        EncodedControl(StandardCharsets.UTF_8.toString()));

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("<script src=\"libs/jquery_3.6.0/jquery-3.6.0.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    $(document).ready(function(){\n");
      out.write("        const languageDropdown = $(\"#language-selector-dropdown\");\n");
      out.write("        const languageSelectionInput = $(\"#language-selector-input\");\n");
      out.write("        const selectedLanguageText = $(\"#language-selector-selected-text\");\n");
      out.write("\n");
      out.write("        // Setting language dropdown\n");
      out.write("        languageDropdown.dropdown('hide');\n");
      out.write("        $(\"> input.search\", languageDropdown).attr(\"role\", \"presentation\");\n");
      out.write("\n");
      out.write("        // Set current lang value coming from cookie\n");
      out.write("        const urlParams = new URLSearchParams(window.location.search);\n");
      out.write("        const localeFromCookie = getCookie(\"ui_lang\");\n");
      out.write("        var localeFromUrlParams = null;\n");
      out.write("        if (urlParams.has('ui_locales')) {\n");
      out.write("            localeFromUrlParams = \"");
      out.print( Encode.forHtmlAttribute(request.getParameter("ui_locales")) );
      out.write("\";\n");
      out.write("        }\n");
      out.write("        const browserLocale = \"");
      out.print( userLocale );
      out.write("\"\n");
      out.write("        const computedLocale = computeLocale(localeFromCookie, localeFromUrlParams, browserLocale);\n");
      out.write("\n");
      out.write("        languageSelectionInput.val(computedLocale);\n");
      out.write("        setUILocaleCookie(computedLocale);\n");
      out.write("\n");
      out.write("        const dataOption = $( \"div[data-value='\" + computedLocale + \"']\" );\n");
      out.write("        dataOption.addClass(\"active selected\")\n");
      out.write("\n");
      out.write("        selectedLanguageText.removeClass(\"default\");\n");
      out.write("        selectedLanguageText.html(dataOption.html());\n");
      out.write("\n");
      out.write("        document.documentElement.lang = computedLocale;\n");
      out.write("    });\n");
      out.write("\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Look for a specific browser cookie.\n");
      out.write("     * @param name - Name of the cookie to find.\n");
      out.write("     */\n");
      out.write("    function getCookie(name) {\n");
      out.write("        var match = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]+)\"));\n");
      out.write("\n");
      out.write("        if (match) {\n");
      out.write("            return match[2];\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Creates a cookie with the given parameters, which lives within the given domain\n");
      out.write("     * @param name - Name of the cookie\n");
      out.write("     * @param value - Value to be stored\n");
      out.write("     * @param days - Expiry days\n");
      out.write("     * @param options - Additional options for the cookie such as `httpOnly` and `secure`.\n");
      out.write("     */\n");
      out.write("    function setCookie(name, value, days, options) {\n");
      out.write("        var expires = \"\";\n");
      out.write("        var domain = \";domain=\" + URLUtils.getDomain(window.location.href);\n");
      out.write("\n");
      out.write("        if (days) {\n");
      out.write("            var date = new Date();\n");
      out.write("            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n");
      out.write("            expires = \"; expires=\" + date.toUTCString();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var httpOnlyString = (options && options.httpOnly) ? \"; HttpOnly\" : \"\";\n");
      out.write("        var secureString = (options && options.secure) ? \"; Secure\" : \"\";\n");
      out.write("\n");
      out.write("        document.cookie = name + \"=\" + (value || \"\") + expires + domain + \"; path=/\" + httpOnlyString + secureString;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Handles language change by setting the `ui_locale` cookie.\n");
      out.write("     */\n");
      out.write("    function setUILocaleCookie(language) {\n");
      out.write("        var EXPIRY_DAYS = 30;\n");
      out.write("        setCookie('ui_lang', language, EXPIRY_DAYS, { secure: true });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Handles language change by setting the `ui_locale` cookie, and reload the page to get the content translated.\n");
      out.write("     */\n");
      out.write("    function onLangChange() {\n");
      out.write("        const langSwitchForm = document.getElementById(\"language-selector-input\");\n");
      out.write("        const language = langSwitchForm.value;\n");
      out.write("        setUILocaleCookie(language);\n");
      out.write("\n");
      out.write("        window.location.reload();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function computeLocale(localeFromCookie, localeFromUrlParams, browserLocale) {\n");
      out.write("        if (localeFromCookie) {\n");
      out.write("            return localeFromCookie;\n");
      out.write("        } else if (localeFromUrlParams) {\n");
      out.write("            const firstLangFromUrlParams = localeFromUrlParams.split(\" \")[0];\n");
      out.write("            return firstLangFromUrlParams;\n");
      out.write("        } else if (browserLocale) {\n");
      out.write("            return browserLocale;\n");
      out.write("        } else {\n");
      out.write("            return \"en_US\";\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<link href=\"css/language-selector.css\" rel=\"stylesheet\">\n");
      out.write("\n");

    // Specify the file path
    String filePath = application.getRealPath("/") + "/WEB-INF/classes/LanguageOptions.properties";

    // Create a List to store the parsed data
    List<String[]> languageList = new ArrayList<>();

    // Use a BufferedReader to read the file content
    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath))) {
        String line;
        while ((line = bufferedReader.readLine()) != null) {
            // Ignore comments and empty lines
            if (!line.trim().startsWith("#") && !line.trim().isEmpty()) {
                // Split the line into key and value using '=' as the delimiter
                String[] keyValue = line.split("=");
                // Split the key further using '.' as the delimiter
                String[] parts = keyValue[0].split("\\.");
                String languageCode = parts[parts.length - 1];
                // Split the value further using ',' as the delimiter
                String[] values = keyValue[1].split(",");
                String country = values[0];
                String displayName = values[1];
                // Add the values to the list
                languageList.add(new String[]{languageCode, country, displayName});
            }
        }
    } catch (Exception e) {
        throw e;
    }

      out.write("\n");
      out.write("\n");
      out.write("<div id=\"language-selector-dropdown\" class=\"ui fluid selection dropdown language-selector-dropdown\" data-testid=\"language-selector-dropdown\">\n");
      out.write("    <input type=\"hidden\" id=\"language-selector-input\" onChange=\"onLangChange()\" name=\"language-select\" />\n");
      out.write("    <i class=\"dropdown icon\"></i>\n");
      out.write("    <div id=\"language-selector-selected-text\" class=\"default text\">\n");
      out.write("        ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "select.language"));
      out.write("\n");
      out.write("    </div>\n");
      out.write("    <div class=\"menu\">\n");
      out.write("        ");
 for (String[] language : languageList) { 
      out.write("\n");
      out.write("            <div class=\"item\"\n");
      out.write("                 data-value=\"");
      out.print( language[0] );
      out.write("\"\n");
      out.write("                 style=\"background-color: var(--language-selector-background-color) !important; color: var(--language-selector-text-color) !important;\"\n");
      out.write("            >\n");
      out.write("                <i class=\"");
      out.print( language[1] );
      out.write(" flag\"></i>\n");
      out.write("                ");
      out.print( AuthenticationEndpointUtil.i18n(resourceBundle, language[2]) );
      out.write("\n");
      out.write("            </div>\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("    </div>\n");
      out.write("</div>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
