/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-07-07 07:26:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.includes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.wso2.carbon.identity.core.ServiceURLBuilder;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl;
import java.nio.charset.StandardCharsets;
import java.util.*;
import org.json.JSONObject;
import java.util.Calendar;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.owasp.encoder.Encode;
import java.io.File;
import java.util.Map;
import java.util.HashMap;
import org.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import javax.servlet.http.HttpServletRequest;
import java.util.*;

public final class theme_002dskeleton_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key) {
        return i18n(resourceBundle, customText, key, null, true);
    }

    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     * Overloaded method with default value.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @param defaultValue Default value.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key, String defaultValue) {
        return i18n(resourceBundle, customText, key, defaultValue, true);
    }

    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     * Overloaded method with default value with the ability to not fallback to resource bundle and return "" as default.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @param defaultValue Default value.
     * @param shouldFallbackToResourceBundle Should fallback to resource bundle.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key, String defaultValue, boolean shouldFallbackToResourceBundle) {
        String localizedString = null;
        Calendar calendar = Calendar.getInstance();
        int currentYear = calendar.get(Calendar.YEAR);

        try {
            if (customText != null && customText.has(key)) {
                localizedString = Encode.forHtmlContent(customText.getString(key));
            } else {
                if (StringUtils.isNotBlank(defaultValue)) {
                    localizedString = Encode.forHtmlContent(defaultValue);
                } else if (shouldFallbackToResourceBundle) {
                    localizedString = AuthenticationEndpointUtil.i18n(resourceBundle, key);
                } else {
                    localizedString = "";
                }
            }
        } catch (Exception e) {
            // Return the key itself as a fallback
            localizedString = Encode.forHtmlContent(key);
        }

        // Replace newline characters with actual line breaks
        localizedString = localizedString.replace("\\n", "\n");

        return localizedString.replace("{{currentYear}}", String.valueOf(currentYear));
    }

    /**
     * Replaces i18n path placeholders in a given link with locale and country codes.
     *
     * @param locale The locale from which to derive values for placeholders.
     * @param link The link containing i18n placeholders (e.g., {{lang}}, {{country}}, {{locale}}).
     * @return The link with placeholders replaced by actual values based on the given locale.
     */
    public String i18nLink(Locale locale, String link) {
        String transformedLink = link;

        try {
            String langCode = locale.getLanguage();
            String countryCode = locale.getCountry();
            String localeCode = locale.toLanguageTag();

            String LANGUAGE_PLACEHOLDER = "{{lang}}";
            String COUNTRY_PLACEHOLDER = "{{country}}";
            String LOCALE_PLACEHOLDER = "{{locale}}";

            if (transformedLink.contains(LANGUAGE_PLACEHOLDER) || transformedLink.contains(COUNTRY_PLACEHOLDER) || transformedLink.contains(LOCALE_PLACEHOLDER)) {
                transformedLink = transformedLink
                    .replace("{{lang}}", langCode)
                    .replace("{{country}}", countryCode)
                    .replace("{{locale}}", localeCode);
            } else {
                if (transformedLink.contains("?")) {
                    return transformedLink.concat("&ui_locales=" + localeCode);
                } else {
                    return transformedLink.concat("?ui_locales=" + localeCode);
                }
            }

            return StringEscapeUtils.escapeHtml4(transformedLink);
        } catch (Exception e) {
            // Return the link itself as a fallback.
            return StringEscapeUtils.escapeHtml4(transformedLink);
        }
    }


    /**
    * Get the user's preferred locale based on the request, cookies, and URL parameters.
    *
    * This method determines the user's locale based on the following priority order:
    * 1. Locale set in a cookie (if available).
    * 2. Locales specified in the "ui_locales" URL parameter.
    * 3. Browser's default locale.
    *
    * If a valid locale cannot be determined from the cookie or URL parameters, the browser's
    * default locale is used as the fallback.
    *
    * @param request The HTTP servlet request.
    * @return The user's preferred locale.
    */
    public Locale getUserLocale(HttpServletRequest request) {
        String lang = "en_US"; // Default lang is en_US
        String COOKIE_NAME = "ui_lang";
        String BUNDLE = "org.wso2.carbon.identity.application.authentication.endpoint.i18n.Resources";
        Locale browserLocale = request.getLocale();
        Locale userLocale = browserLocale;
        String uiLocaleFromURL = request.getParameter("ui_locales");
        String localeFromCookie = null;
        // Check cookie for the user selected language first
        Cookie[] cookies = request.getCookies();

        // Map to store default supported language codes.
        Map<String, String> supportedLanguages = new HashMap<>();
        supportedLanguages.put("en", "US");
        supportedLanguages.put("fr", "FR");
        supportedLanguages.put("es", "ES");
        supportedLanguages.put("pt", "PT");
        supportedLanguages.put("de", "DE");
        supportedLanguages.put("zh", "CN");
        supportedLanguages.put("ja", "JP");

        List<String> languageSupportedCountries = new ArrayList<>();
        languageSupportedCountries.add("US");
        languageSupportedCountries.add("FR");
        languageSupportedCountries.add("ES");
        languageSupportedCountries.add("PT");
        languageSupportedCountries.add("DE");
        languageSupportedCountries.add("CN");
        languageSupportedCountries.add("JP");
        languageSupportedCountries.add("BR");

        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals(COOKIE_NAME)) {
                    localeFromCookie = cookie.getValue();
                }
            }
        }
        // Set lang from the priority order
        if (localeFromCookie != null) {
            lang = localeFromCookie;
            try {
                String langStr = "en";
                String langLocale = "US";

                if (lang.contains("_")) {
                    langStr = lang.split("_")[0];
                    langLocale = lang.split("_")[1];
                } else if (lang.contains("-")) {
                    langStr = lang.split("-")[0];
                    langLocale = lang.split("-")[1];
                }

                userLocale = new Locale(langStr, langLocale);
            } catch (Exception e) {
                // In case the language is defined but not in the correct format
                userLocale = browserLocale;
            }
        } else if (uiLocaleFromURL != null) {
            for (String localeStr : uiLocaleFromURL.split(" ")) {
                String langStr = "en";
                String langLocale = "US";

                if (lang.contains("_")) {
                    langStr = lang.split("_")[0];
                    langLocale = lang.split("_")[1];
                } else if (lang.contains("-")) {
                    langStr = lang.split("-")[0];
                    langLocale = lang.split("-")[1];
                }

                Locale tempLocale = new Locale(langStr, langLocale);
                // Trying to find out whether we have a resource bundle for the given locale
                try {
                    ResourceBundle foundBundle = ResourceBundle.getBundle(BUNDLE, tempLocale);
                    // If so, setting the userLocale to that locale. If not, set the browser locale as user locale
                    // Currently, we only care about the language - we do not compare about country locales since our
                    // supported locale set is limited.
                    if (tempLocale.getLanguage().equals(foundBundle.getLocale().getLanguage())) {
                        userLocale = tempLocale;
                        break;
                    } else if (tempLocale.getLanguage().equals("en") && foundBundle.getLocale().getLanguage().equals("")) {
                        // When the given locale is "en," which is our fallback one, we have to handle it separately
                        // because it returns an empty string as locale language
                        userLocale = tempLocale;
                        break;
                    } else {
                        userLocale = browserLocale;
                    }
                } catch (Exception e) {
                    userLocale = browserLocale;
                }
            }
        } else {
            // `browserLocale` is coming as `en` instead of `en_US` for the first render before switching the language from the dropdown.
            String countryCode = browserLocale.getCountry();
            String fallbackCountryCode = supportedLanguages.get(browserLocale.getLanguage());

            if (StringUtils.isNotBlank(countryCode) && languageSupportedCountries.contains(countryCode)) {
                userLocale = new Locale(browserLocale.getLanguage(), countryCode);
            } else if (StringUtils.isNotBlank(fallbackCountryCode)){
                userLocale = new Locale(browserLocale.getLanguage(), fallbackCountryCode);
            } else {
                userLocale = new Locale("en","US");
            }
        }
        return userLocale;
    }
    /**
    * Get the user's locale code in the "language-country" format based on the request, cookies, and URL parameters.
    *
    * This method determines the user's locale based on the getUserLocale method and returns the locale code
    * in the "language-country" format (e.g., "en-US").
    *
    * @param request The HTTP servlet request.
    * @return The user's locale code in the "language-country" format.
    */
    public String getUserLocaleCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getLanguage() + "-" + locale.getCountry();
    }
    /**
    * Get the user's language code based on the request, cookies, and URL parameters.
    *
    * This method determines the user's language code based on the getUserLocale method and returns
    * the language code (e.g., "en").
    *
    * @param request The HTTP servlet request.
    * @return The user's language code.
    */
    public String getUserLanguageCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getLanguage();
    }
    /**
    * Get the user's country code based on the request, cookies, and URL parameters.
    *
    * This method determines the user's country code based on the getUserLocale method and returns
    * the country code (e.g., "US").
    *
    * @param request The HTTP servlet request.
    * @return The user's country code.
    */
    public String getUserCountryCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getCountry();
    }


    /**
    * Convert the application name by replacing spaces with underscores.
    *
    * This serves as a temporary solution for implementing a custom layout for applications with
    * names containing spaces. It is recommended to remove this workaround and implement a more
    * robust solution in the future.
    * Tracked by - https://github.com/wso2-enterprise/asgardeo-product/issues/19824
    *
    * @param applicationName Name of the application (Service Provider Name).
    * @return Converted application name.
    */
    public String convertApplicationName(String applicationName) {
        return StringUtils.replace(applicationName, " ", "_");
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/includes/init-url.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/includes/localize.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/includes/branding-preferences.jsp", Long.valueOf(1747321634000L));
    _jspx_dependants.put("/includes/layout-resolver.jsp", Long.valueOf(1740062656000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(23);
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClientException");
    _jspx_imports_classes.add("org.apache.commons.text.StringEscapeUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityTenantUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.ServiceURLBuilder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String TENANT_DOMAIN_KEY = "tenantDomain";
    String TENANT_DOMAIN_SHORT = "t";
    String USER_TENANT_DOMAIN_SHORT = "ut";
    String SERVICE_PROVIDER_NAME_SHORT = "sp";
    String SERVICE_PROVIDER_ID_SHORT = "spId";

    String identityServerEndpointContextParam = application.getInitParameter("IdentityServerEndpointContextURL");
    String samlssoURL = "../samlsso";
    String commonauthURL = "../commonauth";
    String oauth2AuthorizeURL = "../oauth2/authorize";
    String oidcLogoutURL = "../oidc/logout";
    String openidServerURL = "../openidserver";
    String logincontextURL = "../logincontext";
    String longwaitstatusURL = "/longwaitstatus";

    String tenantDomain;
    String userTenantDomain;
    String tenantForTheming;
    String userTenant;
    String spAppName;
    String spAppId;

    if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
        tenantDomain = IdentityTenantUtil.resolveTenantDomain();
        tenantForTheming = tenantDomain;
        userTenant = tenantDomain;

        spAppName = request.getParameter(SERVICE_PROVIDER_NAME_SHORT);
        if (StringUtils.isBlank(spAppName) && StringUtils.isNotBlank((String) request.getAttribute(SERVICE_PROVIDER_NAME_SHORT))) {
            spAppName = (String) request.getAttribute(SERVICE_PROVIDER_NAME_SHORT);
        }

        spAppId = request.getParameter(SERVICE_PROVIDER_ID_SHORT);
        if (StringUtils.isBlank(spAppId) && StringUtils.isNotBlank((String) request.getAttribute(SERVICE_PROVIDER_ID_SHORT))) {
            spAppId = (String) request.getAttribute(SERVICE_PROVIDER_ID_SHORT);
        }

        String tenantDomainFromURL = request.getParameter(TENANT_DOMAIN_SHORT);
        if (StringUtils.isBlank(tenantDomainFromURL) && StringUtils.isNotBlank((String) request.getAttribute(TENANT_DOMAIN_SHORT))) {
            tenantDomainFromURL = (String) request.getAttribute(TENANT_DOMAIN_SHORT);
        }

        String tenantDomainOfUser = request.getParameter(USER_TENANT_DOMAIN_SHORT);
        if (StringUtils.isBlank(tenantDomainOfUser) && StringUtils.isNotBlank((String) request.getAttribute(USER_TENANT_DOMAIN_SHORT))) {
            tenantDomainOfUser = (String) request.getAttribute(USER_TENANT_DOMAIN_SHORT);
        }

        userTenantDomain = tenantDomainOfUser;

        if (StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)
            && StringUtils.equals(spAppName, "Console")) {
            tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
        } else {
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomainFromURL;
            }
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomain;
            }
            if (StringUtils.isNotBlank(tenantDomainOfUser)) {
                tenantForTheming = tenantDomainOfUser;
            }
            if (StringUtils.equals(spAppName, "My Account")
                && StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {
                tenantForTheming = userTenantDomain;
                userTenant = userTenantDomain;
            }
        }
    } else {
        tenantDomain = request.getParameter(TENANT_DOMAIN_KEY);
        if (StringUtils.isBlank(tenantDomain) && StringUtils.isNotBlank((String) request.getAttribute(TENANT_DOMAIN_KEY))) {
            tenantDomain = (String) request.getAttribute(TENANT_DOMAIN_KEY);
        }

        String tenantDomainFromURL = request.getParameter(TENANT_DOMAIN_SHORT);
        if (StringUtils.isBlank(tenantDomainFromURL) && StringUtils.isNotBlank((String) request.getAttribute(TENANT_DOMAIN_SHORT))) {
            tenantDomainFromURL = (String) request.getAttribute(TENANT_DOMAIN_SHORT);
        }

        String tenantDomainOfUser = request.getParameter(USER_TENANT_DOMAIN_SHORT);
        if (StringUtils.isBlank(tenantDomainOfUser) && StringUtils.isNotBlank((String) request.getAttribute(USER_TENANT_DOMAIN_SHORT))) {
            tenantDomainOfUser = (String) request.getAttribute(USER_TENANT_DOMAIN_SHORT);
        }

        spAppName = request.getParameter(SERVICE_PROVIDER_NAME_SHORT);
        if (StringUtils.isBlank(spAppName) && StringUtils.isNotBlank((String) request.getAttribute(SERVICE_PROVIDER_NAME_SHORT))) {
            spAppName = (String) request.getAttribute(SERVICE_PROVIDER_NAME_SHORT);
        }

        spAppId = request.getParameter(SERVICE_PROVIDER_ID_SHORT);
        if (StringUtils.isBlank(spAppId) && StringUtils.isNotBlank((String) request.getAttribute(SERVICE_PROVIDER_ID_SHORT))) {
            spAppId = (String) request.getAttribute(SERVICE_PROVIDER_ID_SHORT);
        }

        if (StringUtils.isBlank(tenantDomain)) {
            tenantDomain = request.getParameter(IdentityManagementEndpointConstants.TENANT_DOMAIN);
            if (StringUtils.isBlank(tenantDomain) && StringUtils.isNotBlank((String) request.getAttribute(IdentityManagementEndpointConstants.TENANT_DOMAIN))) {
                tenantDomain = (String) request.getAttribute(IdentityManagementEndpointConstants.TENANT_DOMAIN);
            }
        }

        if (!StringUtils.isBlank(tenantDomainFromURL)) {
            tenantDomain = tenantDomainFromURL;
        }

        tenantForTheming = tenantDomain;
        userTenant = tenantDomain;
        userTenantDomain = tenantDomainOfUser;

        if (StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)
            && StringUtils.equals(spAppName, "Console")) {
            tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
        } else {
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomainFromURL;
            }
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomain;
            }
            if (StringUtils.isNotBlank(tenantDomainOfUser)) {
                tenantForTheming = tenantDomainOfUser;
            }
            if (StringUtils.equals(spAppName, "My Account")
                && StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {
                tenantForTheming = userTenantDomain;
                userTenant = userTenantDomain;
            }
        }
    }

    if (Boolean.parseBoolean(application.getInitParameter("IsHostedExternally"))) {
        identityServerEndpointContextParam = application.getInitParameter("IdentityServerEndpointContextURL");
    } else {
        spAppName = request.getParameter(SERVICE_PROVIDER_NAME_SHORT);
        ServiceURLBuilder serviceUrlBuilder = ServiceURLBuilder.create().setTenant(tenantDomain);
        if ("My Account".equals(spAppName) || "Console".equals(spAppName)) {
            serviceUrlBuilder.setSkipDomainBranding(true);
        } 
    
        identityServerEndpointContextParam = serviceUrlBuilder.build().getAbsolutePublicURL();
    }

    if (StringUtils.isNotBlank(identityServerEndpointContextParam)) {

        samlssoURL = identityServerEndpointContextParam + "/samlsso";
        commonauthURL = identityServerEndpointContextParam + "/commonauth";
        oauth2AuthorizeURL = identityServerEndpointContextParam + "/oauth2/authorize";
        oidcLogoutURL = identityServerEndpointContextParam + "/oidc/logout";
        openidServerURL = identityServerEndpointContextParam + "/oidc/logout";
        logincontextURL = identityServerEndpointContextParam + "/logincontext";
        longwaitstatusURL = identityServerEndpointContextParam + "/longwaitstatus";
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String lang = "en_US"; // Default lang is en_US
    String COOKIE_NAME = "ui_lang";
    Locale browserLocale = request.getLocale();
    Locale userLocale = browserLocale;
    String uiLocaleFromURL = request.getParameter("ui_locales");
    String localeFromCookie = null;
    String BUNDLE = "org.wso2.carbon.identity.application.authentication.endpoint.i18n.Resources";

    // List of screen names for retrieving text branding customizations.
    List<String> screenNames = new ArrayList<>();
    screenNames.add("common");

    // Map to store default supported language codes.
    // TODO: Use this map to generate the `language-switcher.jsp`.
    Map<String, String> supportedLanguages = new HashMap<>();
    supportedLanguages.put("en", "US");
    supportedLanguages.put("fr", "FR");
    supportedLanguages.put("es", "ES");
    supportedLanguages.put("pt", "PT");
    supportedLanguages.put("de", "DE");
    supportedLanguages.put("zh", "CN");
    supportedLanguages.put("ja", "JP");

    List<String> languageSupportedCountries = new ArrayList<>();
    languageSupportedCountries.add("US");
    languageSupportedCountries.add("FR");
    languageSupportedCountries.add("ES");
    languageSupportedCountries.add("PT");
    languageSupportedCountries.add("DE");
    languageSupportedCountries.add("CN");
    languageSupportedCountries.add("JP");
    languageSupportedCountries.add("BR");

    // Check cookie for the user selected language first
    Cookie[] cookies = request.getCookies();
    if (cookies != null) {
        for (Cookie cookie : cookies) {
            if (cookie.getName().equals(COOKIE_NAME)) {
                localeFromCookie = cookie.getValue();
            }
        }
    }

    // Set lang from the priority order
    if (localeFromCookie != null) {
        lang = localeFromCookie;

        try {
            String langStr = "en";
            String langLocale = "US";

            if (lang.contains("_")) {
                langStr = lang.split("_")[0];
                langLocale = lang.split("_")[1];
            } else if (lang.contains("-")) {
                langStr = lang.split("-")[0];
                langLocale = lang.split("-")[1];
            }

            userLocale = new Locale(langStr, langLocale);
        } catch (Exception e) {
            // In case the language is defined but not in the correct format
            userLocale = browserLocale;
        }
    } else if (uiLocaleFromURL != null) {
        for (String localeStr : uiLocaleFromURL.split(" ")) {
            String langStr = "en";
            String langLocale = "US";

            if (localeStr.contains("_")) {
                langStr = localeStr.split("_")[0];
                langLocale = localeStr.split("_")[1];
            } else if (localeStr.contains("-")) {
                langStr = localeStr.split("-")[0];
                langLocale = localeStr.split("-")[1];
            }

            Locale tempLocale = new Locale(langStr, langLocale);

            // Trying to find out whether we have resource bundle for the given locale
            try {
                ResourceBundle foundBundle = ResourceBundle.getBundle(BUNDLE, tempLocale);

                // If so, setting the userLocale to that locale. If not, set the browser locale as user locale
                // Currently, we only care about the language - we do not compare about country locales since our
                // supported locale set is limited.
                if (tempLocale.getLanguage().equals(foundBundle.getLocale().getLanguage())) {
                    userLocale = tempLocale;
                    break;
                } else if (tempLocale.getLanguage().equals("en") && foundBundle.getLocale().getLanguage().equals("")) {
                    // When the given locale is en - which is our fallback one, we have to handle it separately because
                    // returns and empty string as locale language
                    userLocale = tempLocale;
                    break;
                } else {
                    userLocale = browserLocale;
                }
            } catch (Exception e) {
                userLocale = browserLocale;
            }
        }
    } else {
        // `browserLocale` is coming as `en` instead of `en_US` for the first render before switching the language from the dropdown.
        String countryCode = browserLocale.getCountry();
        String fallbackCountryCode = supportedLanguages.get(browserLocale.getLanguage());

        if (StringUtils.isNotBlank(countryCode) && languageSupportedCountries.contains(countryCode)) {
            userLocale = new Locale(browserLocale.getLanguage(), countryCode);
        } else if (StringUtils.isNotBlank(fallbackCountryCode)){
            userLocale = new Locale(browserLocale.getLanguage(), fallbackCountryCode);
        } else {
            userLocale = new Locale("en","US");
        }
    }

    ResourceBundle resourceBundle = ResourceBundle.getBundle(BUNDLE, userLocale, new
        EncodedControl(StandardCharsets.UTF_8.toString()));

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');

    JSONObject brandingPreference = null;
    JSONObject customText = new JSONObject();

    boolean isBrandingEnabledInTenantPreferences = true;
    boolean isSelfSignUpEnabledInTenantPreferences = true;
    boolean isPasswordRecoveryEnabledInTenantPreferences = true;
    boolean shouldRemoveDefaultBranding = true;
    @Deprecated
    JSONObject colors = null;
    JSONObject theme = null;
    String activeThemeName = "";
    String overrideStylesheet = "";
    @Deprecated
    String __DEPRECATED__copyrightText = "";
    @Deprecated
    String __DEPRECATED__siteTitle = "";
    String supportEmail = "contact@wso2.com";
    String logoURL = "";
    String logoAlt = "";
    String faviconURL = "libs/themes/wso2is/assets/images/branding/favicon.ico";
    String privacyPolicyURL = "/authenticationendpoint/privacy_policy.do";
    String termsOfUseURL = "https://wso2.com/terms-of-use/";
    String cookiePolicyURL = "/authenticationendpoint/cookie_policy.do";
    String selfSignUpOverrideURL = "";
    String passwordRecoveryOverrideURL = "";
    String layout = "centered";
    String layoutFileRelativePath = "includes/layouts/" + layout + "/body.ser";
    String layoutStoreURL = "extensions/layouts/custom/${tenantDomain}";
    Map<String, Object> layoutData = new HashMap<String, Object>();
    String productName = "WSO2 Identity Server";
    String productURL = "https://wso2.com/identity-server";
    String productLogoURL = "libs/themes/wso2is/assets/images/branding/logo-full.svg";
    String productLogoAlt = "WSO2 Identity Server Logo";
    String productWhiteLogoURL = "libs/themes/wso2is/assets/images/branding/logo-full-inverted.svg";
    String poweredByLogoURL = "";
    String productWhiteLogoAlt = "WSO2 Identity Server Logo White Variation";
    boolean enableDefaultPreLoader = true;

    final String BRANDING_PREFERENCE_CACHE_KEY = "BrandingPreferenceCache";
    final String BRANDING_TEXT_PREFERENCE_CACHE_KEY = "BrandingTextPreferenceCache";

    // Constants used to create full custom layout name
    String PREFIX_FOR_CUSTOM_LAYOUT_NAME = "custom";
    String CUSTOM_LAYOUT_NAME_SEPERATOR = "-";

    // Preferences response object pointer keys.
    String PREFERENCE_KEY = "preference";
    String ACTIVE_THEME_KEY = "activeTheme";
    String COLORS_KEY = "colors";
    String THEME_KEY = "theme";
    String STYLESHEETS_KEY = "stylesheets";
    String ACCOUNT_APP_STYLESHEET_KEY = "accountApp";
    String ORG_DETAILS_KEY = "organizationDetails";
    String COPYRIGHT_TEXT_KEY = "copyrightText";
    String SITE_TITLE_KEY = "siteTitle";
    String SUPPORT_EMAIL_KEY = "supportEmail";
    String IMAGES_KEY = "images";
    String IMAGE_URL_KEY = "imgURL";
    String ALT_TEXT_KEY = "altText";
    String LOGO_KEY = "logo";
    String FAVICON_KEY = "favicon";
    String URLS_KEY = "urls";
    String PRIVACY_POLICY_URL_KEY = "privacyPolicyURL";
    String TERMS_OF_USE_URL_KEY = "termsOfUseURL";
    String COOKIE_POLICY_URL_KEY = "cookiePolicyURL";
    String SELF_SIGN_UP_URL_KEY = "selfSignUpURL";
    String PASSWORD_RECOVERY_URL_KEY = "passwordRecoveryURL";
    String CONFIGS_KEY = "configs";
    String IS_BRANDING_ENABLED_KEY= "isBrandingEnabled";
    String IS_SELF_SIGN_UP_ENABLED_KEY = "isSelfSignUpEnabled";
    String IS_PASSWORD_RECOVERY_ENABLED_KEY = "isPasswordRecoveryEnabled";
    String SHOULD_REMOVE_ASGARDEO_BRANDING_KEY = "removeAsgardeoBranding";
    String SHOULD_REMOVE_DEFAULT_BRANDING_KEY = "removeDefaultBranding";
    String TEXT_KEY = "text";

    // Additional keys to override the fallback values.
    String PRODUCT_NAME_KEY = "productName";
    String PRODUCT_URL_KEY = "productURL";
    String PRODUCT_LOGO_URL_KEY = "productLogoURL";
    String PRODUCT_LOGO_ALT_KEY = "productLogoAlt";
    String PRODUCT_WHITE_LOGO_URL_KEY = "productWhiteLogoURL";
    String PRODUCT_WHITE_LOGO_ALT_KEY = "productWhiteLogoAlt";
    String IS_DEFAULT_PRE_LOADER_ENABLED_KEY = "enableDefaultPreLoader";

    // Load the branding fallback override values file if it exists.
    if (config.getServletContext().getResource("extensions/branding-fallbacks.jsp") != null) {

      out.write("\n");
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/extensions/branding-fallbacks.jsp", out, false);
      out.write('\n');
      out.write('\n');

    }

    /*
        The override values are set within the request object using a Map object.
        This approach is necessary because 'branding-fallbacks.jsp' may not always exist.
        Consequently, a directive include cannot be employed; rather, an action include must be utilized.
        It ensures that the override values are accessible to this JSP page through the request object.
    */
    Map<String, Object> overrideFallbackValues = (Map<String, Object>) request.getAttribute("overrideFallbackValues");

    // Override the branding fallback values
    if (overrideFallbackValues != null) {
        // Configs
        if (overrideFallbackValues.containsKey(IS_BRANDING_ENABLED_KEY)) {
            isBrandingEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_BRANDING_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(IS_SELF_SIGN_UP_ENABLED_KEY)) {
            isSelfSignUpEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_SELF_SIGN_UP_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(IS_PASSWORD_RECOVERY_ENABLED_KEY)) {
            isPasswordRecoveryEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_PASSWORD_RECOVERY_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(SHOULD_REMOVE_DEFAULT_BRANDING_KEY)) {
            shouldRemoveDefaultBranding = (boolean) overrideFallbackValues.get(SHOULD_REMOVE_DEFAULT_BRANDING_KEY);
        }

        // Pre loader
        if (overrideFallbackValues.containsKey(IS_DEFAULT_PRE_LOADER_ENABLED_KEY)) {
            enableDefaultPreLoader = (boolean) overrideFallbackValues.get(IS_DEFAULT_PRE_LOADER_ENABLED_KEY);
        }

        // Colors.
        // @deprecated Moved in to `theme` object. Kept here for backward compatibility.
        if (overrideFallbackValues.containsKey(COLORS_KEY)) {
            colors = (JSONObject) overrideFallbackValues.get(COLORS_KEY);
        }

        // Theme
        if (overrideFallbackValues.containsKey(THEME_KEY)) {
            theme = (JSONObject) overrideFallbackValues.get(THEME_KEY);
        }

        if (overrideFallbackValues.containsKey(ACTIVE_THEME_KEY)) {
            activeThemeName = (String) overrideFallbackValues.get(ACTIVE_THEME_KEY);
        }

        // Product details
        if (overrideFallbackValues.containsKey(PRODUCT_NAME_KEY)) {
            productName = (String) overrideFallbackValues.get(PRODUCT_NAME_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_URL_KEY)) {
            productURL = (String) overrideFallbackValues.get(PRODUCT_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_LOGO_URL_KEY)) {
            productLogoURL = (String) overrideFallbackValues.get(PRODUCT_LOGO_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_LOGO_ALT_KEY)) {
            productLogoAlt = (String) overrideFallbackValues.get(PRODUCT_LOGO_ALT_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_WHITE_LOGO_URL_KEY)) {
            productWhiteLogoURL = (String) overrideFallbackValues.get(PRODUCT_WHITE_LOGO_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_WHITE_LOGO_ALT_KEY)) {
            productWhiteLogoAlt = (String) overrideFallbackValues.get(PRODUCT_WHITE_LOGO_ALT_KEY);
        }

        // Stylesheets
        if (overrideFallbackValues.containsKey(ACCOUNT_APP_STYLESHEET_KEY)) {
            overrideStylesheet = (String) overrideFallbackValues.get(ACCOUNT_APP_STYLESHEET_KEY);
        }

        // Organization Details
        if (overrideFallbackValues.containsKey(COPYRIGHT_TEXT_KEY)) {
            __DEPRECATED__copyrightText = (String) overrideFallbackValues.get(COPYRIGHT_TEXT_KEY);
        }

        if (overrideFallbackValues.containsKey(SITE_TITLE_KEY)) {
            __DEPRECATED__siteTitle = (String) overrideFallbackValues.get(SITE_TITLE_KEY);
        }

        if (overrideFallbackValues.containsKey(SUPPORT_EMAIL_KEY)) {
            supportEmail = (String) overrideFallbackValues.get(SUPPORT_EMAIL_KEY);
        }

        // Images
        if (overrideFallbackValues.containsKey(FAVICON_KEY)) {
            faviconURL = (String) overrideFallbackValues.get(FAVICON_KEY);
        }

        // Links
        if (overrideFallbackValues.containsKey(PRIVACY_POLICY_URL_KEY)) {
            privacyPolicyURL = (String) overrideFallbackValues.get(PRIVACY_POLICY_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(TERMS_OF_USE_URL_KEY)) {
            termsOfUseURL = (String) overrideFallbackValues.get(TERMS_OF_USE_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(COOKIE_POLICY_URL_KEY)) {
            cookiePolicyURL = (String) overrideFallbackValues.get(COOKIE_POLICY_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(SELF_SIGN_UP_URL_KEY)) {
            selfSignUpOverrideURL = (String) overrideFallbackValues.get(SELF_SIGN_UP_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PASSWORD_RECOVERY_URL_KEY)) {
            passwordRecoveryOverrideURL = (String) overrideFallbackValues.get(PASSWORD_RECOVERY_URL_KEY);
        }
    }

    String DEFAULT_RESOURCE_LOCALE = "en-US";
    String ORG_PREFERENCE_RESOURCE_TYPE = "ORG";
    String APP_PREFERENCE_RESOURCE_TYPE = "APP";
    String RESOURCE_TYPE = "type";
    String preferenceResourceType = ORG_PREFERENCE_RESOURCE_TYPE;
    String tenantRequestingPreferences = tenantForTheming;
    String applicationRequestingPreferences = spAppId;
    String locale = StringUtils.isNotBlank(getUserLocaleCode(request)) ? getUserLocaleCode(request) : DEFAULT_RESOURCE_LOCALE;

    try {

        // If the `sp` param is defined, set the resource type as app.
        if (StringUtils.isNotBlank(applicationRequestingPreferences)) {
            preferenceResourceType = APP_PREFERENCE_RESOURCE_TYPE;
        }

        BrandingPreferenceRetrievalClient brandingPreferenceRetrievalClient = new BrandingPreferenceRetrievalClient();
        JSONObject brandingPreferenceResponse = null;
        Object cachedBrandingPreferenceResponse = request.getAttribute(BRANDING_PREFERENCE_CACHE_KEY);
        if (cachedBrandingPreferenceResponse != null && cachedBrandingPreferenceResponse instanceof BrandingPreferenceRetrievalClientException) {
            throw (BrandingPreferenceRetrievalClientException) cachedBrandingPreferenceResponse;
        } else {
            brandingPreferenceResponse = (JSONObject) cachedBrandingPreferenceResponse;
        }
        if (brandingPreferenceResponse == null) {
            brandingPreferenceResponse = brandingPreferenceRetrievalClient.getPreference(tenantRequestingPreferences,
                preferenceResourceType, applicationRequestingPreferences, DEFAULT_RESOURCE_LOCALE);
            request.setAttribute(BRANDING_PREFERENCE_CACHE_KEY, brandingPreferenceResponse);
        }

        if (brandingPreferenceResponse.has(PREFERENCE_KEY)) {
            brandingPreference = brandingPreferenceResponse.getJSONObject(PREFERENCE_KEY);
            preferenceResourceType = brandingPreferenceResponse.getString(RESOURCE_TYPE);
        }


      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');


    // Get the layout store url from the configuration file
    String tempLayoutStoreURL = application.getInitParameter("LayoutStoreURL");
    if (!StringUtils.equals(tenantRequestingPreferences, IdentityManagementEndpointConstants.SUPER_TENANT) && !StringUtils.isBlank(tempLayoutStoreURL)) {
        layoutStoreURL = tempLayoutStoreURL;
    }

    // Common data for the layout file.
    layoutData.put("BASE_URL", "includes/layouts/" + layout);

    if (brandingPreference != null) {
        // First, check if Branding is enabled.
        if (brandingPreference.has(CONFIGS_KEY)) {
            if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_BRANDING_ENABLED_KEY)) {
                isBrandingEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_BRANDING_ENABLED_KEY);
            }
        }

        // Proceed only if the branding is enabled.
        if (isBrandingEnabledInTenantPreferences) {
            // Keys.
            String LAYOUT_KEY = "layout";
            String ACTIVE_LAYOUT_KEY = "activeLayout";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY = "sideImg";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY = "imgURL";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY = "altText";
            String LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY = "productTagLine";

            // Layout names.
            String LEFT_IMAGE_LAYOUT_NAME = "left-image";
            String RIGHT_IMAGE_LAYOUT_NAME = "right-image";
            String LEFT_ALIGNED_LAYOUT_NAME = "left-aligned";
            String RIGHT_ALIGNED_LAYOUT_NAME = "right-aligned";

            // Keys for the layout data hash map.
            String SIDE_IMAGE_URL_KEY = "sideImgUrl";
            String SIDE_IMAGE_ALT_KEY = "sideImgAltText";
            String PRODUCT_TAG_LINE_KEY = "productTagLine";

            // Layout resolving logic.
            if (brandingPreference.has(LAYOUT_KEY)) {
                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(ACTIVE_LAYOUT_KEY)) {
                    if (!StringUtils.isBlank(brandingPreference.getJSONObject(LAYOUT_KEY).getString(ACTIVE_LAYOUT_KEY))){
                        String temp = brandingPreference.getJSONObject(LAYOUT_KEY).getString(ACTIVE_LAYOUT_KEY);
                        if (StringUtils.equals(temp, PREFIX_FOR_CUSTOM_LAYOUT_NAME)) {
                            // App-wise and tenant-wise custom layout resolving logic.
                            if (StringUtils.equals(preferenceResourceType, APP_PREFERENCE_RESOURCE_TYPE)) {
                                layout = temp + CUSTOM_LAYOUT_NAME_SEPERATOR + tenantRequestingPreferences + CUSTOM_LAYOUT_NAME_SEPERATOR + convertApplicationName(applicationRequestingPreferences);
                                layoutFileRelativePath = layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/apps/" + convertApplicationName(applicationRequestingPreferences) + "/body.ser";
                                layoutData.put("BASE_URL", layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/apps/" + convertApplicationName(applicationRequestingPreferences));
                            } else if (StringUtils.equals(preferenceResourceType, ORG_PREFERENCE_RESOURCE_TYPE)) {
                                layout = temp + CUSTOM_LAYOUT_NAME_SEPERATOR + tenantRequestingPreferences;
                                layoutFileRelativePath = layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/body.ser";
                                layoutData.put("BASE_URL", layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences));
                            }
                        } else {
                            // Pre-added layouts
                            String layoutFilePath = "includes/layouts/" + temp + "/body.ser";
                            if (config.getServletContext().getResource(layoutFilePath) != null) {
                                layout = temp;
                                layoutFileRelativePath = layoutFilePath;
                                layoutData.put("BASE_URL", "includes/layouts/" + temp);

                                // Get the related data to specific layouts.
                                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY)) {
                                    if (brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY)) {
                                        layoutData.put(SIDE_IMAGE_URL_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).getString(LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY));
                                    }
                                    if (brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY)) {
                                        layoutData.put(SIDE_IMAGE_ALT_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).getString(LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY));
                                    }
                                }
                                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY)) {
                                    if (!StringUtils.isBlank(brandingPreference.getJSONObject(LAYOUT_KEY).getString(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY))) {
                                        layoutData.put(PRODUCT_TAG_LINE_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getString(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');


        // Proceed only if `preferences` object is defined.
        if (brandingPreference != null) {
            // First, check if Branding is enabled.
            if (brandingPreference.has(CONFIGS_KEY)) {
                if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_BRANDING_ENABLED_KEY)) {
                    isBrandingEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_BRANDING_ENABLED_KEY);
                }
            }

            // Proceed only if the branding is enabled.
            if (isBrandingEnabledInTenantPreferences) {
                // Custom Text
                for (String screenName : screenNames) {
                    StringBuilder textBrandingCacheKey = new StringBuilder(BRANDING_TEXT_PREFERENCE_CACHE_KEY);
                    textBrandingCacheKey.append("-");
                    textBrandingCacheKey.append(screenName);
                    JSONObject customTextPreferenceResponse = (JSONObject) request.getAttribute(textBrandingCacheKey.toString());
                    if (customTextPreferenceResponse == null) {
                        customTextPreferenceResponse = brandingPreferenceRetrievalClient.getCustomTextPreference(
                            tenantRequestingPreferences,
                            preferenceResourceType,
                            applicationRequestingPreferences,
                            screenName,
                            locale
                        );
                        request.setAttribute(textBrandingCacheKey.toString(), customTextPreferenceResponse);
                    }

                    // Merge the preferences for the current screen into the customText object
                    if (customTextPreferenceResponse.has(PREFERENCE_KEY)) {
                        if (customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY) != null && customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).has(TEXT_KEY)) {
                            if (customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY) != null) {
                                for (String key : customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY).keySet()) {
                                    customText.put(key, customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY).getString(key));
                                }
                            }
                        }
                    }
                }

                // Configs
                if (brandingPreference.has(CONFIGS_KEY)) {
                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_SELF_SIGN_UP_ENABLED_KEY)) {
                        isSelfSignUpEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_SELF_SIGN_UP_ENABLED_KEY);
                    }

                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_PASSWORD_RECOVERY_ENABLED_KEY)) {
                        isPasswordRecoveryEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_PASSWORD_RECOVERY_ENABLED_KEY);
                    }

                    // @deprecated Renamed to `removeDefaultBranding` key. Kept here for backward compatibility.
                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(SHOULD_REMOVE_ASGARDEO_BRANDING_KEY)) {
                        shouldRemoveDefaultBranding = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(SHOULD_REMOVE_ASGARDEO_BRANDING_KEY);
                    }

                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(SHOULD_REMOVE_DEFAULT_BRANDING_KEY)) {
                        shouldRemoveDefaultBranding = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(SHOULD_REMOVE_DEFAULT_BRANDING_KEY);
                    }
                }

                // Colors.
                // @deprecated Moved in to `theme` object. Kept here for backward compatibility.
                if (brandingPreference.has(COLORS_KEY)) {
                    colors = brandingPreference.getJSONObject(COLORS_KEY);
                }

                // Theme
                if (brandingPreference.has(THEME_KEY)) {
                    if (brandingPreference.getJSONObject(THEME_KEY).has(ACTIVE_THEME_KEY)) {
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(THEME_KEY).getString(ACTIVE_THEME_KEY))) {
                            activeThemeName = brandingPreference.getJSONObject(THEME_KEY).getString(ACTIVE_THEME_KEY);

                            if (brandingPreference.getJSONObject(THEME_KEY).has(activeThemeName)
                                && brandingPreference.getJSONObject(THEME_KEY).getJSONObject(activeThemeName) != null) {

                                theme = brandingPreference.getJSONObject(THEME_KEY).getJSONObject(activeThemeName);

                                if (theme.has(IMAGES_KEY) && theme.getJSONObject(IMAGES_KEY) != null) {
                                    if (theme.getJSONObject(IMAGES_KEY).has(LOGO_KEY) && theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY) != null) {
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(IMAGE_URL_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY))) {

                                            logoURL = theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY);
                                        }
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(ALT_TEXT_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY))) {

                                            logoAlt = theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY);
                                        }
                                    }
                                    if (theme.getJSONObject(IMAGES_KEY).has(FAVICON_KEY) && theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY) != null) {
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).has(IMAGE_URL_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY))) {

                                            faviconURL = theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // Stylesheets
                if (brandingPreference.has(STYLESHEETS_KEY)) {
                    if (brandingPreference.getJSONObject(STYLESHEETS_KEY).has(ACCOUNT_APP_STYLESHEET_KEY)) {
                        // Only assign the `stylesheet` from response if not empty.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(STYLESHEETS_KEY).getString(ACCOUNT_APP_STYLESHEET_KEY))) {
                            overrideStylesheet = brandingPreference.getJSONObject(STYLESHEETS_KEY).getString(ACCOUNT_APP_STYLESHEET_KEY);
                        }
                    }
                }

                // Organization Details
                if (brandingPreference.has(ORG_DETAILS_KEY)) {
                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(COPYRIGHT_TEXT_KEY)) {
                        // Only assign the `copyright` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(COPYRIGHT_TEXT_KEY))) {
                            __DEPRECATED__copyrightText = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(COPYRIGHT_TEXT_KEY);
                        }
                    }

                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(SITE_TITLE_KEY)) {
                        // Only assign the `siteTitle` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SITE_TITLE_KEY))) {
                            __DEPRECATED__siteTitle = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SITE_TITLE_KEY);
                        }
                    }

                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(SUPPORT_EMAIL_KEY)) {
                        // Only assign the `supportEmail` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SUPPORT_EMAIL_KEY))) {
                            supportEmail = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SUPPORT_EMAIL_KEY);
                        }
                    }
                }

                // Images
                if (brandingPreference.has(IMAGES_KEY)) {
                    if (brandingPreference.getJSONObject(IMAGES_KEY).has(LOGO_KEY)) {
                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(IMAGE_URL_KEY)) {
                            // Only assign the `logoURL` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY))) {
                                logoURL = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY);
                            }
                        }

                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(ALT_TEXT_KEY)) {
                            // Only assign the `logoAlt` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY))) {
                                logoAlt = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY);
                            }
                        }
                    }

                    if (brandingPreference.getJSONObject(IMAGES_KEY).has(FAVICON_KEY)) {
                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).has(IMAGE_URL_KEY)) {
                            // Only assign the `faviconURL` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY))) {
                                faviconURL = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY);
                            }
                        }
                    }
                }

                // Links
                if (brandingPreference.has(URLS_KEY)) {
                    if (brandingPreference.getJSONObject(URLS_KEY).has(PRIVACY_POLICY_URL_KEY)) {
                        // Only assign the `privacyPolicyURL` from response if not empty. Else use the default value.
                        String privacyPolicyURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(PRIVACY_POLICY_URL_KEY);
                        if (!StringUtils.isBlank(privacyPolicyURLInput) && !privacyPolicyURLInput.toLowerCase().contains("javascript:") &&
                            !privacyPolicyURLInput.toLowerCase().contains("data:")) {
                                privacyPolicyURL = privacyPolicyURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(TERMS_OF_USE_URL_KEY)) {
                        // Only assign the `termsOfUseURL` from response if not empty. Else use the default value.
                        String termsOfUseURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(TERMS_OF_USE_URL_KEY);
                        if (!StringUtils.isBlank(termsOfUseURLInput) && !termsOfUseURLInput.toLowerCase().contains("javascript:") &&
                            !termsOfUseURLInput.toLowerCase().contains("data:")) {
                                termsOfUseURL = termsOfUseURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(COOKIE_POLICY_URL_KEY)) {
                        // Only assign the `cookiePolicyURL` from response if not empty. Else use the default value.
                        String cookiePolicyURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(COOKIE_POLICY_URL_KEY);
                        if (!StringUtils.isBlank(cookiePolicyURLInput) && !cookiePolicyURLInput.toLowerCase().contains("javascript:") &&
                            !cookiePolicyURLInput.toLowerCase().contains("data:")) {
                                cookiePolicyURL = cookiePolicyURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(SELF_SIGN_UP_URL_KEY)) {
                        String selfSignUpURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(SELF_SIGN_UP_URL_KEY);
                        if (!StringUtils.isBlank(selfSignUpURLInput) && !selfSignUpURLInput.toLowerCase().contains("javascript:") &&
                            !selfSignUpURLInput.toLowerCase().contains("data:")) {
                            selfSignUpOverrideURL = selfSignUpURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(PASSWORD_RECOVERY_URL_KEY)) {
                        String passwordRecoveryURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(PASSWORD_RECOVERY_URL_KEY);
                        if (!StringUtils.isBlank(passwordRecoveryURLInput) && !passwordRecoveryURLInput.toLowerCase().contains("javascript:") &&
                            !passwordRecoveryURLInput.toLowerCase().contains("data:")) {
                            passwordRecoveryOverrideURL = passwordRecoveryURLInput;
                        }
                    }
                }
            }
        }

    } catch (BrandingPreferenceRetrievalClientException e) {
        // Exception is ignored and the variable will use the fallbacks.
        // TODO: Move the duplicated logic to a common place.
        request.setAttribute(BRANDING_PREFERENCE_CACHE_KEY, e);
    } finally {

        // Set fallbacks.
        if (StringUtils.isEmpty(logoURL)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                logoURL = productLogoURL;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                logoURL = productWhiteLogoURL;
            } else {
                logoURL = productLogoURL;
            }
        }

        // Set powered by logo URL.
        if (StringUtils.isEmpty(poweredByLogoURL)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                poweredByLogoURL = productLogoURL;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                poweredByLogoURL = productWhiteLogoURL;
            } else {
                poweredByLogoURL = productLogoURL;
            }
        }

        if (StringUtils.isEmpty(logoAlt)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                logoAlt = productLogoAlt;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                logoAlt = productWhiteLogoAlt;
            } else {
                logoAlt = productLogoAlt;
            }
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    String externalConnectionButtonBaseBackgroundColor = "";
    String externalConnectionButtonBaseBorderRadius = "";
    String externalConnectionButtonBaseFontColor = "";
    String primaryColorMain = "";
    String secondaryColorMain = "";
    String bodyBackgroundColorMain = "";
    String surfaceBackgroundColorMain = "";
    String surfaceBackgroundColorLight = "";
    String surfaceBackgroundColorDark = "";
    String surfaceBackgroundColorInverted = "";
    String outlinedComponentDefaultBorderColor = "";
    String primaryIllustrationColorMain = "";
    String secondaryIllustrationColorMain = "";
    String accent1IllustrationColorMain = "";
    String accent2IllustrationColorMain = "";
    String accent3IllustrationColorMain = "";
    String neutralAlertColorMain = "#f8f8f9";
    String infoAlertColorMain = "#eff7fd";
    String warningAlertColorMain = "#fff6e7";
    String errorAlertColorMain = "#ffd8d8";
    String primaryTextColor = "";
    String secondaryTextColor = "";
    String loginPageBackgroundColor = "";
    String loginPageFontColor = "";
    String footerBorderColor = "";
    String footerFontColor = "inherit";
    String headingFontColor = "inherit";
    String inputBaseBackgroundColor = "";
    String inputBaseBorderColor = "";
    String inputBaseBorderRadius = "";
    String inputBaseFontColor = "inherit";
    String inputBaseLabelFontColor = "inherit";
    String loginBoxBackgroundColor = "";
    String loginBoxBorderColor = "";
    String loginBoxBorderRadius = "";
    String loginBoxBorderWidth = "";
    String loginBoxFontColor = "inherit";
    String primaryButtonBaseFontColor = "";
    String primaryButtonBaseBorderRadius = "";
    String secondaryButtonBaseFontColor = "";
    String secondaryButtonBaseBorderRadius = "";
    String typographyFontFamily = "";
    String typographyFontFamilyImportURL = "";

    // Preferences response object pointer keys.
    String ELEMENT_STATE_BASE_KEY = "base";
    String BUTTONS_KEY = "buttons";
    String BUTTONS_PRIMARY_KEY = "primary";
    String BUTTONS_SECONDARY_KEY = "secondary";
    String BUTTONS_EXTERNAL_CONNECTION_KEY = "externalConnection";
    String COLORS_PRIMARY_KEY = "primary";
    String COLORS_SECONDARY_KEY = "secondary";
    String COLORS_BACKGROUND_KEY = "background";
    String COLORS_OUTLINED_KEY = "outlined";
    String COLORS_BACKGROUND_BODY_KEY = "body";
    String COLORS_BACKGROUND_SURFACE_KEY = "surface";
    String COLORS_TEXT_KEY = "text";
    String COLORS_ALERTS_KEY = "alerts";
    String COLORS_ILLUSTRATIONS_KEY = "illustrations";
    String COLORS_ALERTS_NEUTRAL_KEY = "neutral";
    String COLORS_ALERTS_INFO_KEY = "info";
    String COLORS_ALERTS_WARNING_KEY = "warning";
    String COLORS_ALERTS_ERROR_KEY = "error";
    String COLORS_MAIN_VARIANT_KEY = "main";
    String COLORS_LIGHT_VARIANT_KEY = "light";
    String COLORS_DARK_VARIANT_KEY = "dark";
    String COLORS_INVERTED_VARIANT_KEY = "inverted";
    String COLORS_DEFAULT_VARIANT_KEY = "default";
    String COLORS_PRIMARY_VARIANT_KEY = "primary";
    String COLORS_SECONDARY_VARIANT_KEY = "secondary";
    String COLORS_ACCENT1_VARIANT_KEY = "accent1";
    String COLORS_ACCENT2_VARIANT_KEY = "accent2";
    String COLORS_ACCENT3_VARIANT_KEY = "accent3";
    String FOOTER_KEY = "footer";
    String LOGIN_BOX_KEY = "loginBox";
    /* @deprecated Renamed to loginPage */
    String PAGE_KEY = "page";
    String LOGIN_PAGE_KEY = "loginPage";
    String BACKGROUND_KEY = "background";
    String BACKGROUND_COLOR_KEY = "backgroundColor";
    String BORDER_KEY = "border";
    String BORDER_COLOR_KEY = "borderColor";
    String BORDER_RADIUS_KEY = "borderRadius";
    String BORDER_WIDTH_KEY = "borderWidth";
    String FONT_KEY = "font";
    String FONT_COLOR_KEY = "color";
    String FONT_FAMILY_KEY = "fontFamily";
    String FONT_FAMILY_IMPORT_URL = "importURL";
    String HEADING_KEY = "heading";
    String INPUTS_KEY = "inputs";
    String INPUT_LABELS_KEY = "labels";
    String TYPOGRAPHY_KEY = "typography";

    // Extract the attributes from the `theme` object.
    // If null, check for `colors` object to check if the user is on the deprecated document version.
    if (theme != null) {
        if (theme.has(COLORS_KEY)) {

            JSONObject colorPalette = theme.optJSONObject(COLORS_KEY);

            if (colorPalette != null) {
                if (colorPalette.has(COLORS_PRIMARY_KEY)) {
                    JSONObject primary = colorPalette.optJSONObject(COLORS_PRIMARY_KEY);

                    if (primary != null) {
                        if (primary.has(COLORS_MAIN_VARIANT_KEY)
                            && !StringUtils.isBlank(primary.getString(COLORS_MAIN_VARIANT_KEY))) {

                            primaryColorMain = primary.getString(COLORS_MAIN_VARIANT_KEY);
                        }
                    } else if (!StringUtils.isBlank(colorPalette.getString(COLORS_PRIMARY_KEY))) {
                        primaryColorMain = colorPalette.getString(COLORS_PRIMARY_KEY);
                    }
                }
                if (colorPalette.has(COLORS_SECONDARY_KEY)) {
                    JSONObject secondary = colorPalette.optJSONObject(COLORS_SECONDARY_KEY);

                    if (secondary != null) {
                        if (secondary.has(COLORS_MAIN_VARIANT_KEY)
                            && !StringUtils.isBlank(secondary.getString(COLORS_MAIN_VARIANT_KEY))) {

                            secondaryColorMain = secondary.getString(COLORS_MAIN_VARIANT_KEY);
                        }
                    } else if (!StringUtils.isBlank(colorPalette.getString(COLORS_SECONDARY_KEY))) {
                        secondaryColorMain = colorPalette.getString(COLORS_SECONDARY_KEY);
                    }
                }
                if (colorPalette.has(COLORS_BACKGROUND_KEY)) {
                    JSONObject background = colorPalette.optJSONObject(COLORS_BACKGROUND_KEY);

                    if (background != null) {
                        if (background.has(COLORS_BACKGROUND_BODY_KEY)) {
                            JSONObject body = background.optJSONObject(COLORS_BACKGROUND_BODY_KEY);

                            if (body != null) {
                                if (body.has(COLORS_MAIN_VARIANT_KEY)
                                    && !StringUtils.isBlank(body.getString(COLORS_MAIN_VARIANT_KEY))) {

                                    bodyBackgroundColorMain = body.getString(COLORS_MAIN_VARIANT_KEY);
                                }
                            }
                        }
                        if (background.has(COLORS_BACKGROUND_SURFACE_KEY)) {
                            JSONObject surface = background.optJSONObject(COLORS_BACKGROUND_SURFACE_KEY);

                            if (surface != null) {
                                if (surface.has(COLORS_MAIN_VARIANT_KEY)
                                    && !StringUtils.isBlank(surface.getString(COLORS_MAIN_VARIANT_KEY))) {

                                    surfaceBackgroundColorMain = surface.getString(COLORS_MAIN_VARIANT_KEY);
                                }
                                if (surface.has(COLORS_LIGHT_VARIANT_KEY)
                                    && !StringUtils.isBlank(surface.getString(COLORS_LIGHT_VARIANT_KEY))) {

                                    surfaceBackgroundColorLight = surface.getString(COLORS_LIGHT_VARIANT_KEY);
                                }
                                if (surface.has(COLORS_DARK_VARIANT_KEY)
                                    && !StringUtils.isBlank(surface.getString(COLORS_DARK_VARIANT_KEY))) {

                                    surfaceBackgroundColorDark = surface.getString(COLORS_DARK_VARIANT_KEY);
                                }
                                if (surface.has(COLORS_INVERTED_VARIANT_KEY)
                                    && !StringUtils.isBlank(surface.getString(COLORS_INVERTED_VARIANT_KEY))) {

                                    surfaceBackgroundColorInverted = surface.getString(COLORS_INVERTED_VARIANT_KEY);
                                }
                            }
                        }
                    }
                }
                if (colorPalette.has(COLORS_OUTLINED_KEY)) {
                    JSONObject outlined = colorPalette.optJSONObject(COLORS_OUTLINED_KEY);

                    if (outlined != null) {
                        if (outlined.has(COLORS_DEFAULT_VARIANT_KEY)
                            && !StringUtils.isBlank(outlined.getString(COLORS_DEFAULT_VARIANT_KEY))) {

                            outlinedComponentDefaultBorderColor = outlined.getString(COLORS_DEFAULT_VARIANT_KEY);
                        }
                    }
                }
                if (colorPalette.has(COLORS_TEXT_KEY)) {
                    JSONObject text = colorPalette.optJSONObject(COLORS_TEXT_KEY);

                    if (text != null) {
                        if (text.has(COLORS_PRIMARY_VARIANT_KEY)
                            && !StringUtils.isBlank(text.getString(COLORS_PRIMARY_VARIANT_KEY))) {

                            primaryTextColor = text.getString(COLORS_PRIMARY_VARIANT_KEY);
                        }
                        if (text.has(COLORS_SECONDARY_VARIANT_KEY)
                            && !StringUtils.isBlank(text.getString(COLORS_SECONDARY_VARIANT_KEY))) {

                            secondaryTextColor = text.getString(COLORS_SECONDARY_VARIANT_KEY);
                        }
                    }
                }
                if (colorPalette.has(COLORS_ALERTS_KEY)) {
                    JSONObject alerts = colorPalette.optJSONObject(COLORS_ALERTS_KEY);

                    if (alerts != null) {
                        if (alerts.has(COLORS_ALERTS_NEUTRAL_KEY)) {
                            JSONObject neutralAlert = alerts.optJSONObject(COLORS_ALERTS_NEUTRAL_KEY);

                            if (neutralAlert != null) {
                                if (neutralAlert.has(COLORS_MAIN_VARIANT_KEY)
                                    && !StringUtils.isBlank(neutralAlert.getString(COLORS_MAIN_VARIANT_KEY))) {

                                    neutralAlertColorMain = neutralAlert.getString(COLORS_MAIN_VARIANT_KEY);
                                }
                            }
                        }
                        if (alerts.has(COLORS_ALERTS_INFO_KEY)) {
                            JSONObject infoAlert = alerts.optJSONObject(COLORS_ALERTS_INFO_KEY);

                            if (infoAlert != null) {
                                if (infoAlert.has(COLORS_MAIN_VARIANT_KEY)
                                    && !StringUtils.isBlank(infoAlert.getString(COLORS_MAIN_VARIANT_KEY))) {

                                    infoAlertColorMain = infoAlert.getString(COLORS_MAIN_VARIANT_KEY);
                                }
                            }
                        }
                        if (alerts.has(COLORS_ALERTS_WARNING_KEY)) {
                            JSONObject warningAlert = alerts.optJSONObject(COLORS_ALERTS_WARNING_KEY);

                            if (warningAlert != null) {
                                if (warningAlert.has(COLORS_MAIN_VARIANT_KEY)
                                    && !StringUtils.isBlank(warningAlert.getString(COLORS_MAIN_VARIANT_KEY))) {

                                    warningAlertColorMain = warningAlert.getString(COLORS_MAIN_VARIANT_KEY);
                                }
                            }
                        }
                        if (alerts.has(COLORS_ALERTS_ERROR_KEY)) {
                            JSONObject errorAlert = alerts.optJSONObject(COLORS_ALERTS_ERROR_KEY);

                            if (errorAlert != null) {
                                if (errorAlert.has(COLORS_MAIN_VARIANT_KEY)
                                    && !StringUtils.isBlank(errorAlert.getString(COLORS_MAIN_VARIANT_KEY))) {

                                    errorAlertColorMain = errorAlert.getString(COLORS_MAIN_VARIANT_KEY);
                                }
                            }
                        }
                    }
                }
                if (colorPalette.has(COLORS_ILLUSTRATIONS_KEY)) {
                    JSONObject illustrations = colorPalette.optJSONObject(COLORS_ILLUSTRATIONS_KEY);

                    if (illustrations != null) {
                        if (illustrations.has(COLORS_PRIMARY_VARIANT_KEY)) {
                            JSONObject primary = illustrations.optJSONObject(COLORS_PRIMARY_VARIANT_KEY);

                            if (primary != null) {
                                if (primary.has(COLORS_MAIN_VARIANT_KEY)
                                    && !StringUtils.isBlank(primary.getString(COLORS_MAIN_VARIANT_KEY))) {

                                    primaryIllustrationColorMain = primary.getString(COLORS_MAIN_VARIANT_KEY);
                                }
                            }
                        }
                        if (illustrations.has(COLORS_SECONDARY_VARIANT_KEY)) {
                            JSONObject secondary = illustrations.optJSONObject(COLORS_SECONDARY_VARIANT_KEY);

                            if (secondary != null) {
                                if (secondary.has(COLORS_MAIN_VARIANT_KEY)
                                    && !StringUtils.isBlank(secondary.getString(COLORS_MAIN_VARIANT_KEY))) {

                                    secondaryIllustrationColorMain = secondary.getString(COLORS_MAIN_VARIANT_KEY);
                                }
                            }
                        }
                        if (illustrations.has(COLORS_ACCENT1_VARIANT_KEY)) {
                            JSONObject accent1 = illustrations.optJSONObject(COLORS_ACCENT1_VARIANT_KEY);

                            if (accent1 != null) {
                                if (accent1.has(COLORS_MAIN_VARIANT_KEY)
                                    && !StringUtils.isBlank(accent1.getString(COLORS_MAIN_VARIANT_KEY))) {

                                    accent1IllustrationColorMain = accent1.getString(COLORS_MAIN_VARIANT_KEY);
                                }
                            }
                        }
                        if (illustrations.has(COLORS_ACCENT2_VARIANT_KEY)) {
                            JSONObject accent2 = illustrations.optJSONObject(COLORS_ACCENT2_VARIANT_KEY);

                            if (accent2 != null) {
                                if (accent2.has(COLORS_MAIN_VARIANT_KEY)
                                    && !StringUtils.isBlank(accent2.getString(COLORS_MAIN_VARIANT_KEY))) {

                                    accent2IllustrationColorMain = accent2.getString(COLORS_MAIN_VARIANT_KEY);
                                }
                            }
                        }
                        if (illustrations.has(COLORS_ACCENT3_VARIANT_KEY)) {
                            JSONObject accent3 = illustrations.optJSONObject(COLORS_ACCENT3_VARIANT_KEY);

                            if (accent3 != null) {
                                if (accent3.has(COLORS_MAIN_VARIANT_KEY)
                                    && !StringUtils.isBlank(accent3.getString(COLORS_MAIN_VARIANT_KEY))) {

                                    accent3IllustrationColorMain = accent3.getString(COLORS_MAIN_VARIANT_KEY);
                                }
                            }
                        }
                    }
                }
            }
        }

        if (theme.has(PAGE_KEY) || theme.has(LOGIN_PAGE_KEY)) {

            JSONObject pageBody = null;

            if (theme.has(PAGE_KEY)) {
                pageBody = theme.optJSONObject(PAGE_KEY);
            }

            if (theme.has(LOGIN_PAGE_KEY)) {
                pageBody = theme.optJSONObject(LOGIN_PAGE_KEY);
            }

            if (pageBody != null) {
                if (pageBody.has(BACKGROUND_KEY)
                    && pageBody.getJSONObject(BACKGROUND_KEY).has(BACKGROUND_COLOR_KEY)
                    && !StringUtils.isBlank(pageBody.getJSONObject(BACKGROUND_KEY).getString(BACKGROUND_COLOR_KEY))) {

                    loginPageBackgroundColor = pageBody.getJSONObject(BACKGROUND_KEY).getString(BACKGROUND_COLOR_KEY);
                }
                if (pageBody.has(FONT_KEY)
                    && pageBody.getJSONObject(FONT_KEY).has(FONT_COLOR_KEY)
                    && !StringUtils.isBlank(pageBody.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY))) {

                    loginPageFontColor = pageBody.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY);
                }
            }
        }

        if (theme.has(FOOTER_KEY)) {

            JSONObject footer = theme.optJSONObject(FOOTER_KEY);

            if (footer != null) {
                if (footer.has(BORDER_KEY)
                    && footer.getJSONObject(BORDER_KEY).has(BORDER_COLOR_KEY)
                    && !StringUtils.isBlank(footer.getJSONObject(BORDER_KEY).getString(BORDER_COLOR_KEY))) {

                    footerBorderColor = footer.getJSONObject(BORDER_KEY).getString(BORDER_COLOR_KEY);
                }
                if (footer.has(FONT_KEY)
                    && footer.getJSONObject(FONT_KEY).has(FONT_COLOR_KEY)
                    && !StringUtils.isBlank(footer.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY))) {

                    footerFontColor = footer.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY);
                }
            }
        }

        if (theme.has(TYPOGRAPHY_KEY)) {

            JSONObject typography = theme.optJSONObject(TYPOGRAPHY_KEY);

            if (typography != null) {
                if (typography.has(FONT_KEY)) {
                    if (typography.getJSONObject(FONT_KEY).has(FONT_FAMILY_KEY)
                        && !StringUtils.isBlank(typography.getJSONObject(FONT_KEY).getString(FONT_FAMILY_KEY))) {

                        typographyFontFamily = typography.getJSONObject(FONT_KEY).getString(FONT_FAMILY_KEY);
                    }
                    if (typography.getJSONObject(FONT_KEY).has(FONT_FAMILY_IMPORT_URL)
                        && !StringUtils.isBlank(typography.getJSONObject(FONT_KEY).getString(FONT_FAMILY_IMPORT_URL))) {

                        typographyFontFamilyImportURL = typography.getJSONObject(FONT_KEY).getString(FONT_FAMILY_IMPORT_URL);
                    }
                }
                if (typography.has(HEADING_KEY)
                    && typography.getJSONObject(HEADING_KEY).has(FONT_KEY)
                    && typography.getJSONObject(HEADING_KEY).getJSONObject(FONT_KEY).has(FONT_COLOR_KEY)
                    && !StringUtils.isBlank(typography.getJSONObject(HEADING_KEY).getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY))) {

                    headingFontColor = typography.getJSONObject(HEADING_KEY).getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY);
                }
            }
        }

        if (theme.has(BUTTONS_KEY)) {

            JSONObject buttons = theme.optJSONObject(BUTTONS_KEY);

            if (buttons != null) {
                if (buttons.has(BUTTONS_PRIMARY_KEY)) {

                    JSONObject primaryButton = buttons.getJSONObject(BUTTONS_PRIMARY_KEY);

                    if (primaryButton.has(ELEMENT_STATE_BASE_KEY)) {

                        JSONObject primaryButtonBase = primaryButton.getJSONObject(ELEMENT_STATE_BASE_KEY);

                        if (primaryButtonBase.has(BORDER_KEY)
                            && primaryButtonBase.getJSONObject(BORDER_KEY).has(BORDER_RADIUS_KEY)
                            && !StringUtils.isBlank(primaryButtonBase.getJSONObject(BORDER_KEY).getString(BORDER_RADIUS_KEY))) {

                            primaryButtonBaseBorderRadius = primaryButtonBase.getJSONObject(BORDER_KEY).getString(BORDER_RADIUS_KEY);
                        }
                        if (primaryButtonBase.has(FONT_KEY)
                            && primaryButtonBase.getJSONObject(FONT_KEY).has(FONT_COLOR_KEY)
                            && !StringUtils.isBlank(primaryButtonBase.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY))) {

                            primaryButtonBaseFontColor = primaryButtonBase.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY);
                        }
                    }
                }
                if (buttons.has(BUTTONS_SECONDARY_KEY)) {

                    JSONObject secondaryButton = buttons.getJSONObject(BUTTONS_SECONDARY_KEY);

                    if (secondaryButton.has(ELEMENT_STATE_BASE_KEY)) {

                        JSONObject secondaryButtonBase = secondaryButton.getJSONObject(ELEMENT_STATE_BASE_KEY);

                        if (secondaryButtonBase.has(BORDER_KEY)
                            && secondaryButtonBase.getJSONObject(BORDER_KEY).has(BORDER_RADIUS_KEY)
                            && !StringUtils.isBlank(secondaryButtonBase.getJSONObject(BORDER_KEY).getString(BORDER_RADIUS_KEY))) {

                            secondaryButtonBaseBorderRadius = secondaryButtonBase.getJSONObject(BORDER_KEY).getString(BORDER_RADIUS_KEY);
                        }
                        if (secondaryButtonBase.has(FONT_KEY)
                            && secondaryButtonBase.getJSONObject(FONT_KEY).has(FONT_COLOR_KEY)
                            && !StringUtils.isBlank(secondaryButtonBase.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY))) {

                            secondaryButtonBaseFontColor = secondaryButtonBase.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY);
                        }
                    }
                }
                if (buttons.has(BUTTONS_EXTERNAL_CONNECTION_KEY)) {

                    JSONObject externalConnectionButton = buttons.getJSONObject(BUTTONS_EXTERNAL_CONNECTION_KEY);

                    if (externalConnectionButton.has(ELEMENT_STATE_BASE_KEY)) {

                        JSONObject externalConnectionButtonBase = externalConnectionButton.getJSONObject(ELEMENT_STATE_BASE_KEY);

                        if (externalConnectionButtonBase.has(BACKGROUND_KEY)
                            && externalConnectionButtonBase.getJSONObject(BACKGROUND_KEY).has(BACKGROUND_COLOR_KEY)
                            && !StringUtils.isBlank(externalConnectionButtonBase.getJSONObject(BACKGROUND_KEY).getString(BACKGROUND_COLOR_KEY))) {

                            externalConnectionButtonBaseBackgroundColor = externalConnectionButtonBase.getJSONObject(BACKGROUND_KEY).getString(BACKGROUND_COLOR_KEY);
                        }
                        if (externalConnectionButtonBase.has(BORDER_KEY)
                            && externalConnectionButtonBase.getJSONObject(BORDER_KEY).has(BORDER_RADIUS_KEY)
                            && !StringUtils.isBlank(externalConnectionButtonBase.getJSONObject(BORDER_KEY).getString(BORDER_RADIUS_KEY))) {

                            externalConnectionButtonBaseBorderRadius = externalConnectionButtonBase.getJSONObject(BORDER_KEY).getString(BORDER_RADIUS_KEY);
                        }
                        if (externalConnectionButtonBase.has(FONT_KEY)
                            && externalConnectionButtonBase.getJSONObject(FONT_KEY).has(FONT_COLOR_KEY)
                            && !StringUtils.isBlank(externalConnectionButtonBase.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY))) {

                            externalConnectionButtonBaseFontColor = externalConnectionButtonBase.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY);
                        }
                    }
                }
            }
        }

        if (theme.has(LOGIN_BOX_KEY)) {

            JSONObject loginBox = theme.optJSONObject(LOGIN_BOX_KEY);

            if (loginBox != null) {
                if (loginBox.has(BACKGROUND_KEY)
                    && loginBox.getJSONObject(BACKGROUND_KEY).has(BACKGROUND_COLOR_KEY)
                    && !StringUtils.isBlank(loginBox.getJSONObject(BACKGROUND_KEY).getString(BACKGROUND_COLOR_KEY))) {

                    loginBoxBackgroundColor = loginBox.getJSONObject(BACKGROUND_KEY).getString(BACKGROUND_COLOR_KEY);
                }
                if (loginBox.has(BORDER_KEY)) {
                    if (loginBox.getJSONObject(BORDER_KEY).has(BORDER_COLOR_KEY)
                        && !StringUtils.isBlank(loginBox.getJSONObject(BORDER_KEY).getString(BORDER_COLOR_KEY))) {

                        loginBoxBorderColor = loginBox.getJSONObject(BORDER_KEY).getString(BORDER_COLOR_KEY);
                    }
                    if (loginBox.getJSONObject(BORDER_KEY).has(BORDER_RADIUS_KEY)
                        && !StringUtils.isBlank(loginBox.getJSONObject(BORDER_KEY).getString(BORDER_RADIUS_KEY))) {

                        loginBoxBorderRadius = loginBox.getJSONObject(BORDER_KEY).getString(BORDER_RADIUS_KEY);
                    }
                    if (loginBox.getJSONObject(BORDER_KEY).has(BORDER_WIDTH_KEY)
                        && !StringUtils.isBlank(loginBox.getJSONObject(BORDER_KEY).getString(BORDER_WIDTH_KEY))) {

                        loginBoxBorderWidth = loginBox.getJSONObject(BORDER_KEY).getString(BORDER_WIDTH_KEY);
                    }
                }
                if (loginBox.has(FONT_KEY)
                    && loginBox.getJSONObject(FONT_KEY).has(FONT_COLOR_KEY)
                    && !StringUtils.isBlank(loginBox.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY))) {

                    loginBoxFontColor = loginBox.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY);
                }
            }
        }

        if (theme.has(INPUTS_KEY)) {

            JSONObject inputs = theme.getJSONObject(INPUTS_KEY);

            if (inputs.has(ELEMENT_STATE_BASE_KEY)) {

                JSONObject inputsBase = inputs.getJSONObject(ELEMENT_STATE_BASE_KEY);

                if (inputsBase.has(BACKGROUND_KEY)
                    && inputsBase.getJSONObject(BACKGROUND_KEY).has(BACKGROUND_COLOR_KEY)
                    && !StringUtils.isBlank(inputsBase.getJSONObject(BACKGROUND_KEY).getString(BACKGROUND_COLOR_KEY))) {

                    inputBaseBackgroundColor = inputsBase.getJSONObject(BACKGROUND_KEY).getString(BACKGROUND_COLOR_KEY);
                }
                if (inputsBase.has(BORDER_KEY)) {
                    if (inputsBase.getJSONObject(BORDER_KEY).has(BORDER_COLOR_KEY)
                        && !StringUtils.isBlank(inputsBase.getJSONObject(BORDER_KEY).getString(BORDER_COLOR_KEY))) {

                        inputBaseBorderColor = inputsBase.getJSONObject(BORDER_KEY).getString(BORDER_COLOR_KEY);
                    }
                    if (inputsBase.getJSONObject(BORDER_KEY).has(BORDER_RADIUS_KEY)
                        && !StringUtils.isBlank(inputsBase.getJSONObject(BORDER_KEY).getString(BORDER_RADIUS_KEY))) {

                        inputBaseBorderRadius = inputsBase.getJSONObject(BORDER_KEY).getString(BORDER_RADIUS_KEY);
                    }
                }
                if (inputsBase.has(FONT_KEY)
                    && inputsBase.getJSONObject(FONT_KEY).has(FONT_COLOR_KEY)
                    && !StringUtils.isBlank(inputsBase.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY))) {

                    inputBaseFontColor = inputsBase.getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY);
                }
                if (inputsBase.has(INPUT_LABELS_KEY)
                    && inputsBase.getJSONObject(INPUT_LABELS_KEY).has(FONT_KEY)
                    && inputsBase.getJSONObject(INPUT_LABELS_KEY).getJSONObject(FONT_KEY).has(FONT_COLOR_KEY)
                    && !StringUtils.isBlank(inputsBase.getJSONObject(INPUT_LABELS_KEY).getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY))) {

                    inputBaseLabelFontColor = inputsBase.getJSONObject(INPUT_LABELS_KEY).getJSONObject(FONT_KEY).getString(FONT_COLOR_KEY);
                }
            }
        }
    } else if (colors != null) {
        if (colors.has("primary") && !StringUtils.isBlank(colors.getString("primary"))) {
            primaryColorMain = colors.getString("primary");
        }
    }

      out.write('\n');
      out.write('\n');
 if (theme != null || !StringUtils.isBlank(primaryColorMain)) { 
      out.write('\n');
      out.write('\n');

    // `inherit` doesn't work properly when the input is autofilled.
    // So we need to add an explicit fallback.
    if (StringUtils.equals(inputBaseFontColor, "inherit")) {
        if (StringUtils.equals(loginBoxFontColor, "inherit")) {
            inputBaseFontColor = loginPageFontColor;
        } else {
            inputBaseFontColor = loginBoxFontColor;
        }
    }

      out.write("\n");
      out.write("\n");
      out.write("<style type=\"text/css\">\n");
      out.write("\n");
      out.write("    ");

        if (!StringUtils.isBlank(typographyFontFamilyImportURL)) {
    
      out.write("\n");
      out.write("        @import url(\"");
      out.print( typographyFontFamilyImportURL );
      out.write("\");\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("    :root {\n");
      out.write("        --asg-colors-primary-main: ");
      out.print( StringEscapeUtils.escapeHtml4(primaryColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-secondary-main: ");
      out.print( StringEscapeUtils.escapeHtml4(secondaryColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-background-body-main: ");
      out.print( StringEscapeUtils.escapeHtml4(bodyBackgroundColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-background-surface-main: ");
      out.print( StringEscapeUtils.escapeHtml4(surfaceBackgroundColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-background-surface-light: ");
      out.print( StringEscapeUtils.escapeHtml4(surfaceBackgroundColorLight) );
      out.write(";\n");
      out.write("        --asg-colors-background-surface-dark: ");
      out.print( StringEscapeUtils.escapeHtml4(surfaceBackgroundColorDark) );
      out.write(";\n");
      out.write("        --asg-colors-background-surface-inverted: ");
      out.print( StringEscapeUtils.escapeHtml4(surfaceBackgroundColorInverted) );
      out.write(";\n");
      out.write("        --asg-colors-outlined-default: ");
      out.print( StringEscapeUtils.escapeHtml4(outlinedComponentDefaultBorderColor) );
      out.write(";\n");
      out.write("        --asg-colors-text-primary: ");
      out.print( StringEscapeUtils.escapeHtml4(primaryTextColor) );
      out.write(";\n");
      out.write("        --asg-colors-text-secondary: ");
      out.print( StringEscapeUtils.escapeHtml4(secondaryTextColor) );
      out.write(";\n");
      out.write("        --asg-colors-alerts-error-main: ");
      out.print( StringEscapeUtils.escapeHtml4(errorAlertColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-alerts-neutral-main: ");
      out.print( StringEscapeUtils.escapeHtml4(neutralAlertColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-alerts-info-main: ");
      out.print( StringEscapeUtils.escapeHtml4(infoAlertColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-alerts-warning-main: ");
      out.print( StringEscapeUtils.escapeHtml4(warningAlertColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-illustrations-primary-main: ");
      out.print( StringEscapeUtils.escapeHtml4(primaryIllustrationColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-illustrations-secondary-main: ");
      out.print( StringEscapeUtils.escapeHtml4(secondaryIllustrationColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-illustrations-accent1-main: ");
      out.print( StringEscapeUtils.escapeHtml4(accent1IllustrationColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-illustrations-accent2-main: ");
      out.print( StringEscapeUtils.escapeHtml4(accent2IllustrationColorMain) );
      out.write(";\n");
      out.write("        --asg-colors-illustrations-accent3-main: ");
      out.print( StringEscapeUtils.escapeHtml4(accent3IllustrationColorMain) );
      out.write(";\n");
      out.write("\n");
      out.write("        /* Components */\n");
      out.write("        --asg-footer-text-color: ");
      out.print( StringEscapeUtils.escapeHtml4(footerFontColor) );
      out.write(";\n");
      out.write("        --asg-footer-border-color: ");
      out.print( !StringUtils.isBlank(footerBorderColor) ? StringEscapeUtils.escapeHtml4(footerBorderColor) : "var(--asg-colors-outlined-default)" );
      out.write(";\n");
      out.write("        --asg-primary-font-family: ");
      out.print( StringEscapeUtils.escapeHtml4(typographyFontFamily) );
      out.write(";\n");
      out.write("        --asg-heading-text-color: ");
      out.print( StringEscapeUtils.escapeHtml4(headingFontColor) );
      out.write(";\n");
      out.write("        --asg-primary-button-base-text-color: ");
      out.print( StringEscapeUtils.escapeHtml4(primaryButtonBaseFontColor) );
      out.write(";\n");
      out.write("        --asg-primary-button-base-border-radius: ");
      out.print( StringEscapeUtils.escapeHtml4(primaryButtonBaseBorderRadius) );
      out.write(";\n");
      out.write("        --asg-secondary-button-base-text-color: ");
      out.print( StringEscapeUtils.escapeHtml4(secondaryButtonBaseFontColor) );
      out.write(";\n");
      out.write("        --asg-secondary-button-base-border-radius: ");
      out.print( StringEscapeUtils.escapeHtml4(secondaryButtonBaseBorderRadius) );
      out.write(";\n");
      out.write("        --asg-external-login-button-base-background-color: ");
      out.print( StringEscapeUtils.escapeHtml4(externalConnectionButtonBaseBackgroundColor) );
      out.write(";\n");
      out.write("        --asg-external-login-button-base-text-color: ");
      out.print( StringEscapeUtils.escapeHtml4(externalConnectionButtonBaseFontColor) );
      out.write(";\n");
      out.write("        --asg-external-login-button-base-border-radius: ");
      out.print( StringEscapeUtils.escapeHtml4(externalConnectionButtonBaseBorderRadius) );
      out.write(";\n");
      out.write("        --asg-login-box-background-color: ");
      out.print( !StringUtils.isBlank(loginBoxBackgroundColor) ? StringEscapeUtils.escapeHtml4(loginBoxBackgroundColor) : "var(--asg-colors-background-surface-main)" );
      out.write(";\n");
      out.write("        --asg-login-box-border-color: ");
      out.print( !StringUtils.isBlank(loginBoxBorderColor) ? StringEscapeUtils.escapeHtml4(loginBoxBorderColor) : "var(--asg-colors-outlined-default)" );
      out.write(";\n");
      out.write("        --asg-login-box-border-width: ");
      out.print( StringEscapeUtils.escapeHtml4(loginBoxBorderWidth) );
      out.write(";\n");
      out.write("        --asg-login-box-border-style: solid;\n");
      out.write("        --asg-login-box-border-radius: ");
      out.print( StringEscapeUtils.escapeHtml4(loginBoxBorderRadius) );
      out.write(";\n");
      out.write("        --asg-login-box-text-color: ");
      out.print( StringEscapeUtils.escapeHtml4(loginBoxFontColor) );
      out.write(";\n");
      out.write("        --asg-login-page-background-color: ");
      out.print( !StringUtils.isBlank(loginPageBackgroundColor) ? StringEscapeUtils.escapeHtml4(loginPageBackgroundColor) : "var(--asg-colors-background-body-main)" );
      out.write(";\n");
      out.write("        --asg-login-page-font-color: ");
      out.print( !StringUtils.isBlank(loginPageFontColor) ? StringEscapeUtils.escapeHtml4(loginPageFontColor) : "var(--asg-colors-text-primary)" );
      out.write(";\n");
      out.write("        --asg-input-field-base-text-color: ");
      out.print( !StringUtils.isBlank(inputBaseFontColor) ? StringEscapeUtils.escapeHtml4(inputBaseFontColor) : "var(--asg-colors-text-primary)" );
      out.write(";\n");
      out.write("        --asg-input-field-base-background-color: ");
      out.print( StringEscapeUtils.escapeHtml4(inputBaseBackgroundColor) );
      out.write(";\n");
      out.write("        --asg-input-field-base-label-text-color: ");
      out.print( StringEscapeUtils.escapeHtml4(inputBaseLabelFontColor) );
      out.write(";\n");
      out.write("        --asg-input-field-base-border-color: ");
      out.print( !StringUtils.isBlank(inputBaseBorderColor) ? StringEscapeUtils.escapeHtml4(inputBaseBorderColor) : "var(--asg-colors-outlined-default)" );
      out.write(";\n");
      out.write("        --asg-input-field-base-border-radius: ");
      out.print( StringEscapeUtils.escapeHtml4(inputBaseBorderRadius) );
      out.write(";\n");
      out.write("        --language-selector-background-color: ");
      out.print( StringEscapeUtils.escapeHtml4(loginPageBackgroundColor) );
      out.write(" !important;\n");
      out.write("        --language-selector-text-color: ");
      out.print( StringEscapeUtils.escapeHtml4(footerFontColor) );
      out.write(" !important;\n");
      out.write("        --language-selector-border-color: ");
      out.print( StringEscapeUtils.escapeHtml4(primaryColorMain) );
      out.write(" !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    body {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("        background: var(--asg-colors-background-body-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("            Anchor Tags\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    /* Anchor Tags */\n");
      out.write("    a {\n");
      out.write("        color: var(--asg-colors-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    a:hover, a:focus, a:active {\n");
      out.write("        color: var(--asg-colors-primary-main);\n");
      out.write("        filter: brightness(0.85);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("             Pre Loader\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .pre-loader-wrapper {\n");
      out.write("        background: var(--asg-colors-background-body-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.inverted.dimmer {\n");
      out.write("        background: var(--asg-colors-background-body-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Messages\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    /* TODO: Remove the background color from .totp-tooltip */\n");
      out.write("    .ui.message, .ui.message.totp-tooltip {\n");
      out.write("        background-color: var(--asg-colors-alerts-neutral-main);\n");
      out.write("        color: var(--asg-colors-text-primary) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .backup-code-label.info {\n");
      out.write("        background-color: var(--asg-colors-alerts-info-main) !important;\n");
      out.write("        color: var(--asg-colors-text-primary) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.message.info {\n");
      out.write("        background-color: var(--asg-colors-alerts-info-main) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.message.warning {\n");
      out.write("        background-color: var(--asg-colors-alerts-warning-main) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.message.error, .ui.negative.message {\n");
      out.write("        background-color: var(--asg-colors-alerts-error-main) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Alert\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .alert-wrapper .notifications-wrapper .notification {\n");
      out.write("        background: var(--asg-colors-background-surface-main) !important;\n");
      out.write("        color: var(--asg-colors-text-primary) !important;\n");
      out.write("        border: 1px solid var(--asg-colors-outlined-default) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .alert-wrapper .notifications-wrapper .notification .notification-message .alert-message .description {\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .alert-wrapper .notifications-wrapper .notification .notification-dismiss {\n");
      out.write("        color: var(--asg-colors-text-primary) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Card\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .ui.card, .ui.cards>.card {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("        border-color: var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.card, .ui.card.settings-card {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("        border-color: var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.card>.extra, .ui.cards>.card>.extra, .ui.card.settings-card .extra-content {\n");
      out.write("        background: var(--asg-colors-background-surface-light);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.card>.content, .ui.cards>.card>.content {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.card .meta, .ui.cards>.card .meta {\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Security Page Active Sessions Terminate panel */\n");
      out.write("    .ui.card.settings-card .top-action-panel {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("        border-color: var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Card Actions */\n");
      out.write("    .ui.card.settings-card .extra-content .action-button .action-button-text {\n");
      out.write("        color: var(--asg-colors-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.card.basic-card {\n");
      out.write("        border-color: var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Dropdown\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    /* Avatar Modal Inner */\n");
      out.write("    .ui.dropdown .menu {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("        border-color: var(--asg-colors-outlined-default);\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("    .ui.dropdown .menu .selected.item, .ui.dropdown.selected {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Menu\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .ui.menu, .ui.vertical.menu {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.menu .dropdown.item .menu {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Modal\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .ui.modal, .ui.modal>.content {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.modal>.actions {\n");
      out.write("        background: var(--asg-colors-background-surface-light);\n");
      out.write("        border-color: var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.modal>.header {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("        background: var(--asg-colors-background-surface-light);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Segment\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .ui.segment {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.segment.edit-segment {\n");
      out.write("        background: var(--asg-colors-background-surface-light);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.segment.emphasized.placeholder-container {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Icons\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    /* Primary Icons */\n");
      out.write("    i.icon.primary {\n");
      out.write("        color: var(--asg-colors-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon\n");
      out.write("        background: var(--asg-colors-background-surface-light);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.bordered {\n");
      out.write("        border-color: var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .lighten-1 {\n");
      out.write("        filter: brightness(1.08);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .lighten-2 {\n");
      out.write("        filter: brightness(1.16);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .darken-1 {\n");
      out.write("        filter: brightness(0.9);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .darken-2 {\n");
      out.write("        filter: brightness(0.7);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .opacity-80 {\n");
      out.write("        opacity: 0.8;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .opacity-60 {\n");
      out.write("        opacity: 0.6;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .fill.primary, .theme-icon.two-tone svg.icon .fill-primary {\n");
      out.write("        fill: var(--asg-colors-illustrations-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .stroke.primary, .theme-icon.two-tone svg.icon .stroke-primary {\n");
      out.write("        stroke: var(--asg-colors-illustrations-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .fill.secondary, .theme-icon.two-tone svg.icon .fill-secondary {\n");
      out.write("        fill: var(--asg-colors-illustrations-secondary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .stroke.secondary, .theme-icon.two-tone svg.icon .stroke-secondary {\n");
      out.write("        stroke: var(--asg-colors-illustrations-secondary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .fill.accent1, .theme-icon.two-tone svg.icon .fill-accent1 {\n");
      out.write("        fill: var(--asg-colors-illustrations-accent1-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .stroke.accent1, .theme-icon.two-tone svg.icon .stroke-accent1 {\n");
      out.write("        stroke: var(--asg-colors-illustrations-accent1-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .fill.accent2, .theme-icon.two-tone svg.icon .fill-accent2 {\n");
      out.write("        fill: var(--asg-colors-illustrations-accent2-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .stroke.accent2, .theme-icon.two-tone svg.icon .stroke-accent2 {\n");
      out.write("        stroke: var(--asg-colors-illustrations-accent2-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .fill.accent3, .theme-icon.two-tone svg.icon .fill-accent3 {\n");
      out.write("        fill: var(--asg-colors-illustrations-accent3-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .theme-icon.two-tone svg.icon .stroke.accent3, .theme-icon.two-tone svg.icon .stroke-accent3 {\n");
      out.write("        stroke: var(--asg-colors-illustrations-accent3-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("             Placeholder\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .ui.placeholder, .ui.placeholder .image.header:after, .ui.placeholder .line, .ui.placeholder .line:after, .ui.placeholder>:before {\n");
      out.write("        background-color: var(--asg-colors-background-surface-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Typography\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    /* ------  Font Family ------ */\n");
      out.write("\n");
      out.write("    /* Body */\n");
      out.write("    body {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Headings */\n");
      out.write("    h1,\n");
      out.write("    h2,\n");
      out.write("    h3,\n");
      out.write("    h4,\n");
      out.write("    h5 {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.header {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Inputs */\n");
      out.write("    .ui.form input:not([type]),\n");
      out.write("    .ui.form input[type=\"date\"],\n");
      out.write("    .ui.form input[type=\"datetime-local\"],\n");
      out.write("    .ui.form input[type=\"email\"],\n");
      out.write("    .ui.form input[type=\"number\"],\n");
      out.write("    .ui.form input[type=\"password\"],\n");
      out.write("    .ui.form input[type=\"search\"],\n");
      out.write("    .ui.form input[type=\"tel\"],\n");
      out.write("    .ui.form input[type=\"time\"],\n");
      out.write("    .ui.form input[type=\"text\"],\n");
      out.write("    .ui.form input[type=\"file\"],\n");
      out.write("    .ui.form input[type=\"url\"] {\n");
      out.write("\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.input > input {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Search */\n");
      out.write("    .ui.search > .results .result .title {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.search > .results > .message .header {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.category.search > .results .category > .name {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Menus */\n");
      out.write("    .ui.menu {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Message */\n");
      out.write("    .ui.message .header {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Table */\n");
      out.write("    .ui.sortable.table thead th:after {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Button */\n");
      out.write("    .ui.button {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Text Container */\n");
      out.write("    .ui.text.container {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* List */\n");
      out.write("    .ui.list .list > .item .header,\n");
      out.write("    .ui.list > .item .header {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Steps */\n");
      out.write("    .ui.steps .step .title {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Accordion */\n");
      out.write("    .ui.accordion .title:not(.ui) {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Modal */\n");
      out.write("    .ui.modal > .header {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Popup */\n");
      out.write("    .ui.popup > .header {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Cards */\n");
      out.write("    .ui.cards > .card > .content > .header,\n");
      out.write("    .ui.card > .content > .header {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Items */\n");
      out.write("    .ui.items > .item > .content > .header {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Statistics */\n");
      out.write("    .ui.statistics .statistic > .value,\n");
      out.write("    .ui.statistic > .value {\n");
      out.write("        font-family: var(--asg-primary-font-family);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* ------  Font Colors ------ */\n");
      out.write("\n");
      out.write("    .ui.table {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* My Account session table */\n");
      out.write("    .ui.table.session-table {\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.header .sub.header {\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.list .list>.item .description, .ui.list>.item .description {\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .text-typography {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.menu .item {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.items>.item>.content>.description {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* '!important' is used from Semantic UI's side */\n");
      out.write("    .ui.menu .ui.dropdown .menu>.item {\n");
      out.write("        color: var(--asg-colors-text-primary) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.menu .ui.dropdown .menu>.item:hover {\n");
      out.write("        color: var(--asg-colors-text-primary) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.vertical.menu.side-panel .side-panel-item .route-name {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .empty-placeholder .subtitle {\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.list .list>.item .header, .ui.list>.item .header {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.header {\n");
      out.write("        color: var(--asg-heading-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Primary Text */\n");
      out.write("    .text-typography.primary {\n");
      out.write("        color: var(--asg-colors-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .hint-description {\n");
      out.write("        color: var(--asg-colors-text-secondary) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.items>.item.application-list-item .text-content-container .item-description {\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.card.application-card.recent .application-content .text-content-container .application-name {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.card.application-card.recent .application-content .text-content-container .application-description {\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Tabs\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .tabs.resource-tabs>.ui.menu .item.active {\n");
      out.write("        border-bottom-color: var(--asg-colors-primary-main);\n");
      out.write("        color: var(--asg-colors-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .tabs.resource-tabs>.ui.menu:not(.secondary) .item.active {\n");
      out.write("        border-bottom-color: var(--asg-colors-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Breadcrumb\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .ui.breadcrumb a:hover {\n");
      out.write("        color: var(--asg-colors-primary-main);\n");
      out.write("    }\n");
      out.write("    /*-----------------------------\n");
      out.write("                Step Indicator\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .steps .step.active {\n");
      out.write("        color: var(--asg-colors-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Buttons\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    /* Primary */\n");
      out.write("    .ui.primary.button:not(.basic) {\n");
      out.write("        background: var(--asg-colors-primary-main) !important;\n");
      out.write("        color: var(--asg-primary-button-base-text-color);\n");
      out.write("        border-radius: var(--asg-primary-button-base-border-radius);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.primary.button:not(.basic):hover,\n");
      out.write("    .ui.primary.button:not(.basic):focus,\n");
      out.write("    .ui.primary.button:not(.basic):active {\n");
      out.write("        background: var(--asg-colors-primary-main) !important;\n");
      out.write("        filter: brightness(0.85);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Secondary */\n");
      out.write("    .ui.secondary.button {\n");
      out.write("        background: var(--asg-colors-secondary-main);\n");
      out.write("        color: var(--asg-secondary-button-base-text-color);\n");
      out.write("        border-radius: var(--asg-secondary-button-base-border-radius);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.secondary.button:hover, .ui.secondary.button:focus, .ui.secondary.button:active {\n");
      out.write("        background: var(--asg-colors-secondary-main);\n");
      out.write("        filter: brightness(0.85);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Basic Button */\n");
      out.write("    .ui.basic.button, .ui.basic.buttons .button {\n");
      out.write("        color: var(--asg-colors-text-primary) !important;\n");
      out.write("        background: transparent !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.basic.button:hover, .ui.basic.button:focus, .ui.basic.button:active, .ui.basic.buttons .button:hover, .ui.basic.buttons .button:active, .ui.basic.buttons .button:focus {\n");
      out.write("        color: var(--asg-colors-text-primary) !important;\n");
      out.write("        background: transparent !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.basic.button.show-more-button {\n");
      out.write("        box-shadow: 0 0 0 1px var(--asg-colors-outlined-default) inset;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.basic.button.show-more-button .arrow.down.icon {\n");
      out.write("        border-left: 1px solid var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.basic.primary.button, .ui.basic.primary.buttons .button {\n");
      out.write("        color: var(--asg-colors-primary-main) !important;\n");
      out.write("        box-shadow: inset 0 0 0 1px var(--asg-colors-primary-main) !important;\n");
      out.write("        border-radius: var(--asg-primary-button-base-border-radius);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.basic.primary.button:hover,.ui.basic.primary.buttons .button:hover {\n");
      out.write("        color: var(--asg-colors-primary-main) !important;\n");
      out.write("        box-shadow: inset 0 0 0 1px var(--asg-colors-primary-main) !important;\n");
      out.write("        filter: brightness(0.85);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.basic.primary.button:focus,.ui.basic.primary.buttons .button:focus {\n");
      out.write("        background: 0 0!important;\n");
      out.write("        box-shadow: inset 0 0 0 1px var(--asg-colors-primary-main) !important;\n");
      out.write("        color: var(--asg-colors-primary-main) !important\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.basic.primary.active.button,.ui.basic.primary.buttons .active.button {\n");
      out.write("        background: 0 0!important;\n");
      out.write("        box-shadow: inset 0 0 0 1px var(--asg-colors-primary-main) !important;\n");
      out.write("        color: var(--asg-colors-primary-main) !important\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.basic.primary.button:active,.ui.basic.primary.buttons .button:active {\n");
      out.write("        box-shadow: inset 0 0 0 1px var(--asg-colors-primary-main) !important;\n");
      out.write("        color: var(--asg-colors-primary-main) !important\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Link Button:Hover */\n");
      out.write("    .ui.button.basic.link-button,.ui.button.basic.link-button.primary {\n");
      out.write("        box-shadow: none!important\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* External Connections */\n");
      out.write("    .login-portal.layout .center-segment>.ui.container>.ui.segment .social-login .ui.button {\n");
      out.write("        background: var(--asg-external-login-button-base-background-color);\n");
      out.write("        color: var(--asg-external-login-button-base-text-color);\n");
      out.write("        border-radius: var(--asg-external-login-button-base-border-radius);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout .center-segment>.ui.container>.ui.segment .social-login .ui.button:hover,\n");
      out.write("    .login-portal.layout .center-segment>.ui.container>.ui.segment .social-login .ui.button:focus,\n");
      out.write("    .login-portal.layout .center-segment>.ui.container>.ui.segment .social-login .ui.button:active {\n");
      out.write("        background: var(--asg-external-login-button-base-background-color);\n");
      out.write("        filter: brightness(0.85);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Inputs\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    /* Input */\n");
      out.write("    .ui.form input:not([type]), .ui.form input[type=date], .ui.form input[type=datetime-local], .ui.form input[type=email], .ui.form input[type=file], .ui.form input[type=number], .ui.form input[type=password], .ui.form input[type=search], .ui.form input[type=tel], .ui.form input[type=text], .ui.form input[type=time], .ui.form input[type=url],\n");
      out.write("    .ui.form .field.error input:not([type]), .ui.form .field.error input[type=date], .ui.form .field.error input[type=datetime-local], .ui.form .field.error input[type=email], .ui.form .field.error input[type=file], .ui.form .field.error input[type=number], .ui.form .field.error input[type=password], .ui.form .field.error input[type=search], .ui.form .field.error input[type=tel], .ui.form .field.error input[type=text], .ui.form .field.error input[type=time], .ui.form .field.error input[type=url], .ui.form .field.error select, .ui.form .field.error textarea, .ui.form .fields.error .field input:not([type]), .ui.form .fields.error .field input[type=date], .ui.form .fields.error .field input[type=datetime-local], .ui.form .fields.error .field input[type=email], .ui.form .fields.error .field input[type=file], .ui.form .fields.error .field input[type=number], .ui.form .fields.error .field input[type=password], .ui.form .fields.error .field input[type=search], .ui.form .fields.error .field input[type=tel], .ui.form .fields.error .field input[type=text], .ui.form .fields.error .field input[type=time], .ui.form .fields.error .field input[type=url], .ui.form .fields.error .field select, .ui.form .fields.error .field textarea,\n");
      out.write("    .ui.form .field.error input:not([type]):focus, .ui.form .field.error input[type=date]:focus, .ui.form .field.error input[type=datetime-local]:focus, .ui.form .field.error input[type=email]:focus, .ui.form .field.error input[type=file]:focus, .ui.form .field.error input[type=number]:focus, .ui.form .field.error input[type=password]:focus, .ui.form .field.error input[type=search]:focus, .ui.form .field.error input[type=tel]:focus, .ui.form .field.error input[type=text]:focus, .ui.form .field.error input[type=time]:focus, .ui.form .field.error input[type=url]:focus, .ui.form .field.error select:focus, .ui.form .field.error textarea:focus,\n");
      out.write("    .ui.form input:not([type]):focus, .ui.form input[type=date]:focus, .ui.form input[type=datetime-local]:focus, .ui.form input[type=email]:focus, .ui.form input[type=file]:focus, .ui.form input[type=number]:focus, .ui.form input[type=password]:focus, .ui.form input[type=search]:focus, .ui.form input[type=tel]:focus, .ui.form input[type=text]:focus, .ui.form input[type=time]:focus, .ui.form input[type=url]:focus,\n");
      out.write("    .ui.input.addon-wrapper,\n");
      out.write("    .ui.input.addon-wrapper:focus-within,\n");
      out.write("    .ui.selection.dropdown,\n");
      out.write("    .ui.selection.dropdown:hover {\n");
      out.write("        color: var(--asg-input-field-base-text-color);\n");
      out.write("        background: var(--asg-input-field-base-background-color);\n");
      out.write("        border-color: var(--asg-input-field-base-border-color);\n");
      out.write("        border-radius: var(--asg-input-field-base-border-radius);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Autofilled */\n");
      out.write("    .ui.form .field.field input:-webkit-autofill {\n");
      out.write("        color: var(--asg-input-field-base-text-color) !important;\n");
      out.write("        -webkit-text-fill-color: var(--asg-input-field-base-text-color) !important;\n");
      out.write("        box-shadow: 0 0 0 100px var(--asg-input-field-base-background-color) inset!important;\n");
      out.write("        -webkit-box-shadow: 0 0 0 100px var(--asg-input-field-base-background-color) inset!important;\n");
      out.write("        border-color: var(--asg-input-field-base-border-color) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Autofilled:Focus */\n");
      out.write("    .ui.form .field.field input:-webkit-autofill:focus {\n");
      out.write("        color: var(--asg-input-field-base-text-color) !important;\n");
      out.write("        -webkit-text-fill-color: var(--asg-input-field-base-text-color) !important;\n");
      out.write("        box-shadow: 0 0 0 100px var(--asg-input-field-base-background-color) inset!important;\n");
      out.write("        -webkit-box-shadow: 0 0 0 100px var(--asg-input-field-base-background-color) inset!important;\n");
      out.write("        border-color: var(--asg-input-field-base-border-color) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Autofilled:Error */\n");
      out.write("    .ui.form .error.error input:-webkit-autofill {\n");
      out.write("        color: var(--asg-input-field-base-text-color) !important;\n");
      out.write("        -webkit-text-fill-color: var(--asg-input-field-base-text-color) !important;\n");
      out.write("        box-shadow: 0 0 0 100px var(--asg-input-field-base-background-color) inset!important;\n");
      out.write("        -webkit-box-shadow: 0 0 0 100px var(--asg-input-field-base-background-color) inset!important;\n");
      out.write("        border-color: var(--asg-input-field-base-border-color) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Input Labels */\n");
      out.write("    .ui.form .field>label {\n");
      out.write("        color: var(--asg-input-field-base-label-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Input Addon Icons */\n");
      out.write("    .ui.form .field .ui.input {\n");
      out.write("        color: var(--asg-input-field-base-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Input calendar icon */\n");
      out.write("    .ui.calendar .ui.input.left.icon .calendar.icon {\n");
      out.write("        color: var(--asg-input-field-base-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Input Readonly */\n");
      out.write("    .ui.form input[readonly] {\n");
      out.write("        background: var(--asg-input-field-base-background-color) !important;\n");
      out.write("        filter: brightness(0.85);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Dropdowns */\n");
      out.write("    .ui.selection.active.dropdown .menu {\n");
      out.write("        background: var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.selection.dropdown .menu>.item {\n");
      out.write("        color: var(--asg-input-field-base-text-color);\n");
      out.write("        background: var(--asg-input-field-base-background-color);\n");
      out.write("        border-color: var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Checkbox */\n");
      out.write("    .ui.checkbox .box:before, .ui.checkbox label:before {\n");
      out.write("        background: var(--asg-input-field-base-background-color);\n");
      out.write("        border-color: var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.checkbox input:focus~.box:before, .ui.checkbox input:focus~label:before {\n");
      out.write("        background: var(--asg-input-field-base-background-color);\n");
      out.write("        border-color: var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.checkbox input:checked:focus~.box:before, .ui.checkbox input:checked:focus~label:before, .ui.checkbox input:not([type=radio]):indeterminate:focus~.box:before, .ui.checkbox input:not([type=radio]):indeterminate:focus~label:before {\n");
      out.write("        background: var(--asg-input-field-base-background-color);\n");
      out.write("        border-color: var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.checkbox input:checked~label:before {\n");
      out.write("        background: var(--asg-input-field-base-background-color);\n");
      out.write("        border-color: var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.checkbox .box:hover::before, .ui.checkbox label:hover::before {\n");
      out.write("        background: var(--asg-input-field-base-background-color);\n");
      out.write("        border-color: var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.checkbox input:checked~.box:after, .ui.checkbox input:checked~label:after {\n");
      out.write("        color: var(--asg-input-field-base-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.checkbox input:checked:focus~.box:after, .ui.checkbox input:checked:focus~label:after, .ui.checkbox input:not([type=radio]):indeterminate:focus~.box:after, .ui.checkbox input:not([type=radio]):indeterminate:focus~label:after {\n");
      out.write("        color: var(--asg-input-field-base-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.checkbox label, .ui.checkbox+label {\n");
      out.write("        color: var(--asg-input-field-base-label-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.checkbox label:hover, .ui.checkbox+label:hover {\n");
      out.write("        color: var(--asg-input-field-base-label-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.checkbox input:focus~label {\n");
      out.write("        color: var(--asg-input-field-base-label-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.checkbox:not(.toggle, .radio) input[type=\"checkbox\"]:checked~label:after {\n");
      out.write("        background: var(--asg-colors-primary-main);\n");
      out.write("        color: var(--asg-primary-button-base-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.toggle.checkbox input:checked~.box:before,.ui.toggle.checkbox input:checked~label:before {\n");
      out.write("        background-color: var(--asg-colors-primary-main) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.toggle.checkbox input:focus:checked~.box:before,.ui.toggle.checkbox input:focus:checked~label:before {\n");
      out.write("        background-color: var(--asg-colors-primary-main) !important\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Input Addons */\n");
      out.write("    .addon-field-wrapper .ui.input {\n");
      out.write("        border-color: var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .addon-field-wrapper .ui.input:focus-within {\n");
      out.write("        border-color: var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.input>input {\n");
      out.write("        color: var(--asg-input-field-base-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .advanced-search-wrapper .ui.input.advanced-search {\n");
      out.write("        color: var(--asg-input-field-base-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .advanced-search-wrapper.fill-white .ui.input.advanced-search.with-add-on {\n");
      out.write("        border-color: var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .advanced-search-wrapper.fill-white .ui.input.advanced-search.with-add-on input {\n");
      out.write("        color: var(--asg-input-field-base-text-color);\n");
      out.write("        background: var(--asg-input-field-base-background-color);\n");
      out.write("        border-radius: var(--asg-input-field-base-border-radius);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .advanced-search-wrapper.fill-white .ui.input.advanced-search.with-add-on .input-add-on {\n");
      out.write("        background: var(--asg-input-field-base-background-color) !important;\n");
      out.write("        border: 1px solid transparent;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.input.advanced-search.with-add-on .ui.icon.input>i.icon {\n");
      out.write("        color: var(--asg-input-field-base-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .advanced-search-wrapper.fill-white .ui.input.advanced-search.with-add-on .input-add-on:active {\n");
      out.write("        background: var(--asg-input-field-base-background-color) !important;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Labeled Inputs */\n");
      out.write("    .ui.labeled.input>.label {\n");
      out.write("        background: var(--asg-input-field-base-background-color);\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("        border: 1px solid var(--asg-input-field-base-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui[class*=\"right labeled\"].input>input:focus {\n");
      out.write("        border-color: var(--asg-input-field-base-border-color) !important;;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Error Labels */\n");
      out.write("    .ui.form .field .prompt.label {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("        border-color: var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("                Popup\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .ui.popup {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("        border-color: var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.bottom.popup:before, .ui.top.popup:before, .ui.left.popup:before, .ui.right.popup:before, .ui.left.center.popup:before, .ui.right.center.popup:before {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.popup:before {\n");
      out.write("        box-shadow: 1px 1px 0 0 var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.bottom.left.popup:before, .ui.bottom.center.popup:before, .ui.bottom.right.popup:before {\n");
      out.write("        box-shadow: -1px -1px 0 0 var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.left.center.popup:before {\n");
      out.write("        box-shadow: 1px -1px 0 0 var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.right.center.popup:before {\n");
      out.write("        box-shadow: -1px 1px 0 0 var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("            Login Screens\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    /* ------  Login Page ------ */\n");
      out.write("\n");
      out.write("    /* Default Page */\n");
      out.write("    .login-portal.layout {\n");
      out.write("        color: var(--asg-login-page-font-color);\n");
      out.write("        background: var(--asg-login-page-background-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Default Page with Blurred Patch */\n");
      out.write("    .login-portal.layout .page-wrapper {\n");
      out.write("        background: var(--asg-login-page-background-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Error, Success Pages */\n");
      out.write("    .login-portal.layout .page-wrapper.success-page, .login-portal.layout .page-wrapper.error-page {\n");
      out.write("        background: var(--asg-login-page-background-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* ------  Login Box ------ */\n");
      out.write("\n");
      out.write("    .login-portal.layout .center-segment>.ui.container>.ui.segment {\n");
      out.write("        background: var(--asg-login-box-background-color);\n");
      out.write("        border-width: var(--asg-login-box-border-width) !important;\n");
      out.write("        border-color: var(--asg-login-box-border-color);\n");
      out.write("        border-style: var(--asg-login-box-border-style);\n");
      out.write("        border-radius: var(--asg-login-box-border-radius);\n");
      out.write("        color: var(--asg-login-box-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout .external-link-container.text-small {\n");
      out.write("       color: var(--asg-login-box-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout .center-segment>.ui.container>.ui.segment .ui.checkbox label,\n");
      out.write("    .login-portal.layout .center-segment>.ui.container>.ui.segment .ui.checkbox+label {\n");
      out.write("        color: var(--asg-input-field-base-label-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout .center-segment>.ui.container> .ui.bottom.attached.message {\n");
      out.write("        border-bottom-right-radius: var(--asg-login-box-border-radius);\n");
      out.write("        border-bottom-left-radius: var(--asg-login-box-border-radius);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Login Box Links */\n");
      out.write("    .login-portal.layout .clickable-link {\n");
      out.write("        color: var(--asg-colors-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Misc Text */\n");
      out.write("    .ui.divider {\n");
      out.write("        color: var(--asg-login-box-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout .portal-tagline-description {\n");
      out.write("        color: var(--asg-login-box-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout .center-segment>.ui.container>.ui.segment .ui.list .list > .item .header, .ui.list > .item .header {\n");
      out.write("        color: var(--asg-login-box-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout .center-segment>.ui.container>.ui.segment .login-portal-app-consent-request {\n");
      out.write("        color: var(--asg-login-box-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* ------  Login Footer ------ */\n");
      out.write("\n");
      out.write("    .login-portal.layout .footer {\n");
      out.write("        border-color: var(--asg-footer-border-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout .footer .ui.text.menu .item {\n");
      out.write("        color: var(--asg-footer-text-color);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout .footer .ui.text.menu .item:not(.no-hover):hover {\n");
      out.write("        color: var(--asg-colors-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("              My Account\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .recovery-options-muted-header {\n");
      out.write("        background: var(--asg-colors-background-surface-dark);\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* ------  My Account Side Panel ------ */\n");
      out.write("\n");
      out.write("    .ui.vertical.menu.side-panel {\n");
      out.write("        background: var(--asg-colors-background-body-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* ------  My Account Header ------ */\n");
      out.write("\n");
      out.write("    .ui.menu.app-header {\n");
      out.write("        background: var(--asg-colors-background-surface-inverted);\n");
      out.write("        border-color: var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.pointing.dropdown>.menu:after {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("        box-shadow: -1px -1px 0 0 var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.menu .user-dropdown .user-dropdown-menu .organization-label {\n");
      out.write("        background: var(--asg-colors-alerts-info-main);\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* ------  My Account Footer ------ */\n");
      out.write("\n");
      out.write("    .ui.menu.app-footer {\n");
      out.write("        background: var(--asg-colors-background-body-main);\n");
      out.write("        border-color: var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.menu.app-footer {\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.menu.app-footer .ui.menu .item.copyright {\n");
      out.write("        color: var(--asg-colors-text-secondary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.segment.cookie-consent-banner.inverted {\n");
      out.write("        border: 1px solid var(--asg-colors-outlined-default);\n");
      out.write("        background: var(--asg-colors-background-surface-inverted);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.menu.app-footer .footer-dropdown .dropdown-trigger.link, .ui.menu.app-footer .footer-link {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.menu.app-footer .footer-dropdown .dropdown.icon {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* ------  My Account Applications ------ */\n");
      out.write("\n");
      out.write("    .ui.items>.item.application-list-item {\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.items>.item.application-list-item .text-content-container .item-header {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.image.app-image.app-avatar.default-app-icon .initials {\n");
      out.write("        color: var(--asg-colors-primary-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.card.application-card.recent .application-image.default {\n");
      out.write("        background: var(--asg-colors-background-surface-light);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .ui.items>.item.application-list-item {\n");
      out.write("        border-color: var(--asg-colors-outlined-default);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /*-----------------------------\n");
      out.write("              Policy Pages\n");
      out.write("    ------------------------------*/\n");
      out.write("\n");
      out.write("    .login-portal.layout .ui.segment.toc ul.ui.list.nav>li>a {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout .ui.segment.toc ul.ui.list.nav>li:before {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout.policy-page-layout .ui.table thead th {\n");
      out.write("        background: var(--asg-colors-background-surface-light);\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout.policy-page-layout .ui.table {\n");
      out.write("        color: var(--asg-colors-text-primary);\n");
      out.write("        background: var(--asg-colors-background-surface-main);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .login-portal.layout.policy-page-layout .app-header {\n");
      out.write("        background: var(--asg-colors-background-body-main);\n");
      out.write("        border-bottom: 1px solid var(--asg-footer-border-color);\n");
      out.write("    }\n");
      out.write("</style>\n");
 } 
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
