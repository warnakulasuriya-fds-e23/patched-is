/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-07-07 06:09:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.httpclient.HttpURL;
import org.apache.commons.httpclient.HttpsURL;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EndpointConfigManager;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthContextAPIClient;
import org.wso2.carbon.identity.application.authentication.endpoint.util.Constants;
import org.wso2.carbon.identity.core.util.IdentityCoreConstants;
import org.wso2.carbon.identity.core.util.IdentityUtil;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS_MSG;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.CONFIGURATION_ERROR;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.AUTHENTICATION_MECHANISM_NOT_CONFIGURED;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ENABLE_AUTHENTICATION_WITH_REST_API;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ERROR_WHILE_BUILDING_THE_ACCOUNT_RECOVERY_ENDPOINT_URL;
import org.wso2.carbon.identity.captcha.util.CaptchaUtil;
import org.wso2.carbon.CarbonConstants;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.wso2.carbon.identity.mgt.endpoint.util.client.AuthenticatorDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.AuthenticatorDataRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.CommonDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import org.apache.commons.collections.MapUtils;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.client.model.AuthenticationRequestWrapper;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl;
import java.nio.charset.StandardCharsets;
import java.util.*;
import org.json.JSONObject;
import java.util.Calendar;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.owasp.encoder.Encode;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.wso2.carbon.identity.core.ServiceURLBuilder;
import java.io.File;
import java.util.Map;
import java.util.HashMap;
import org.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import javax.servlet.http.HttpServletRequest;
import java.util.*;
import java.util.List;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import java.util.ResourceBundle;
import org.owasp.encoder.Encode;
import org.apache.commons.text.StringEscapeUtils;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.provider.json.JSONProvider;
import org.apache.http.HttpStatus;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.client.SelfUserRegistrationResource;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO;
import java.net.URLEncoder;
import javax.ws.rs.core.Response;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ConfiguredAuthenticatorsRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ConfiguredAuthenticatorsRetrievalClientException;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isSelfSignUpEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isRecoveryEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isEmailUsernameEnabled;
import static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL;
import org.wso2.carbon.identity.core.URLBuilderException;
import org.wso2.carbon.identity.core.ServiceURLBuilder;
import org.json.JSONArray;
import org.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.application.authentication.endpoint.util.TenantDataManager;
import java.util.List;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.core.URLBuilderException;
import org.wso2.carbon.identity.core.ServiceURLBuilder;
import org.apache.commons.httpclient.HttpURL;
import org.apache.commons.httpclient.HttpsURL;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.provider.json.JSONProvider;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.http.HttpStatus;
import org.json.JSONException;
import org.json.JSONObject;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.client.SelfUserRegistrationResource;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.PropertyDTO;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO;
import java.net.URLEncoder;
import java.net.URLDecoder;
import java.util.regex.Pattern;
import javax.ws.rs.core.Response;
import javax.servlet.http.HttpServletRequest;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isSelfSignUpEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isRecoveryEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isEmailUsernameEnabled;
import static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.text.StringEscapeUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.nio.charset.Charset;
import org.wso2.carbon.base.ServerConfiguration;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EndpointConfigManager;
import org.wso2.carbon.identity.core.URLBuilderException;
import org.wso2.carbon.identity.core.ServiceURLBuilder;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil;
import org.wso2.carbon.identity.mgt.endpoint.util.client.AdminAdvisoryDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.AdminAdvisoryDataRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.wso2.carbon.user.core.util.UserCoreUtil;
import java.io.UnsupportedEncodingException;
import java.io.File;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key) {
        return i18n(resourceBundle, customText, key, null, true);
    }

    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     * Overloaded method with default value.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @param defaultValue Default value.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key, String defaultValue) {
        return i18n(resourceBundle, customText, key, defaultValue, true);
    }

    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     * Overloaded method with default value with the ability to not fallback to resource bundle and return "" as default.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @param defaultValue Default value.
     * @param shouldFallbackToResourceBundle Should fallback to resource bundle.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key, String defaultValue, boolean shouldFallbackToResourceBundle) {
        String localizedString = null;
        Calendar calendar = Calendar.getInstance();
        int currentYear = calendar.get(Calendar.YEAR);

        try {
            if (customText != null && customText.has(key)) {
                localizedString = Encode.forHtmlContent(customText.getString(key));
            } else {
                if (StringUtils.isNotBlank(defaultValue)) {
                    localizedString = Encode.forHtmlContent(defaultValue);
                } else if (shouldFallbackToResourceBundle) {
                    localizedString = AuthenticationEndpointUtil.i18n(resourceBundle, key);
                } else {
                    localizedString = "";
                }
            }
        } catch (Exception e) {
            // Return the key itself as a fallback
            localizedString = Encode.forHtmlContent(key);
        }

        // Replace newline characters with actual line breaks
        localizedString = localizedString.replace("\\n", "\n");

        return localizedString.replace("{{currentYear}}", String.valueOf(currentYear));
    }

    /**
     * Replaces i18n path placeholders in a given link with locale and country codes.
     *
     * @param locale The locale from which to derive values for placeholders.
     * @param link The link containing i18n placeholders (e.g., {{lang}}, {{country}}, {{locale}}).
     * @return The link with placeholders replaced by actual values based on the given locale.
     */
    public String i18nLink(Locale locale, String link) {
        String transformedLink = link;

        try {
            String langCode = locale.getLanguage();
            String countryCode = locale.getCountry();
            String localeCode = locale.toLanguageTag();

            String LANGUAGE_PLACEHOLDER = "{{lang}}";
            String COUNTRY_PLACEHOLDER = "{{country}}";
            String LOCALE_PLACEHOLDER = "{{locale}}";

            if (transformedLink.contains(LANGUAGE_PLACEHOLDER) || transformedLink.contains(COUNTRY_PLACEHOLDER) || transformedLink.contains(LOCALE_PLACEHOLDER)) {
                transformedLink = transformedLink
                    .replace("{{lang}}", langCode)
                    .replace("{{country}}", countryCode)
                    .replace("{{locale}}", localeCode);
            } else {
                if (transformedLink.contains("?")) {
                    return transformedLink.concat("&ui_locales=" + localeCode);
                } else {
                    return transformedLink.concat("?ui_locales=" + localeCode);
                }
            }

            return StringEscapeUtils.escapeHtml4(transformedLink);
        } catch (Exception e) {
            // Return the link itself as a fallback.
            return StringEscapeUtils.escapeHtml4(transformedLink);
        }
    }


    /**
    * Get the user's preferred locale based on the request, cookies, and URL parameters.
    *
    * This method determines the user's locale based on the following priority order:
    * 1. Locale set in a cookie (if available).
    * 2. Locales specified in the "ui_locales" URL parameter.
    * 3. Browser's default locale.
    *
    * If a valid locale cannot be determined from the cookie or URL parameters, the browser's
    * default locale is used as the fallback.
    *
    * @param request The HTTP servlet request.
    * @return The user's preferred locale.
    */
    public Locale getUserLocale(HttpServletRequest request) {
        String lang = "en_US"; // Default lang is en_US
        String COOKIE_NAME = "ui_lang";
        String BUNDLE = "org.wso2.carbon.identity.application.authentication.endpoint.i18n.Resources";
        Locale browserLocale = request.getLocale();
        Locale userLocale = browserLocale;
        String uiLocaleFromURL = request.getParameter("ui_locales");
        String localeFromCookie = null;
        // Check cookie for the user selected language first
        Cookie[] cookies = request.getCookies();

        // Map to store default supported language codes.
        Map<String, String> supportedLanguages = new HashMap<>();
        supportedLanguages.put("en", "US");
        supportedLanguages.put("fr", "FR");
        supportedLanguages.put("es", "ES");
        supportedLanguages.put("pt", "PT");
        supportedLanguages.put("de", "DE");
        supportedLanguages.put("zh", "CN");
        supportedLanguages.put("ja", "JP");

        List<String> languageSupportedCountries = new ArrayList<>();
        languageSupportedCountries.add("US");
        languageSupportedCountries.add("FR");
        languageSupportedCountries.add("ES");
        languageSupportedCountries.add("PT");
        languageSupportedCountries.add("DE");
        languageSupportedCountries.add("CN");
        languageSupportedCountries.add("JP");
        languageSupportedCountries.add("BR");

        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals(COOKIE_NAME)) {
                    localeFromCookie = cookie.getValue();
                }
            }
        }
        // Set lang from the priority order
        if (localeFromCookie != null) {
            lang = localeFromCookie;
            try {
                String langStr = "en";
                String langLocale = "US";

                if (lang.contains("_")) {
                    langStr = lang.split("_")[0];
                    langLocale = lang.split("_")[1];
                } else if (lang.contains("-")) {
                    langStr = lang.split("-")[0];
                    langLocale = lang.split("-")[1];
                }

                userLocale = new Locale(langStr, langLocale);
            } catch (Exception e) {
                // In case the language is defined but not in the correct format
                userLocale = browserLocale;
            }
        } else if (uiLocaleFromURL != null) {
            for (String localeStr : uiLocaleFromURL.split(" ")) {
                String langStr = "en";
                String langLocale = "US";

                if (lang.contains("_")) {
                    langStr = lang.split("_")[0];
                    langLocale = lang.split("_")[1];
                } else if (lang.contains("-")) {
                    langStr = lang.split("-")[0];
                    langLocale = lang.split("-")[1];
                }

                Locale tempLocale = new Locale(langStr, langLocale);
                // Trying to find out whether we have a resource bundle for the given locale
                try {
                    ResourceBundle foundBundle = ResourceBundle.getBundle(BUNDLE, tempLocale);
                    // If so, setting the userLocale to that locale. If not, set the browser locale as user locale
                    // Currently, we only care about the language - we do not compare about country locales since our
                    // supported locale set is limited.
                    if (tempLocale.getLanguage().equals(foundBundle.getLocale().getLanguage())) {
                        userLocale = tempLocale;
                        break;
                    } else if (tempLocale.getLanguage().equals("en") && foundBundle.getLocale().getLanguage().equals("")) {
                        // When the given locale is "en," which is our fallback one, we have to handle it separately
                        // because it returns an empty string as locale language
                        userLocale = tempLocale;
                        break;
                    } else {
                        userLocale = browserLocale;
                    }
                } catch (Exception e) {
                    userLocale = browserLocale;
                }
            }
        } else {
            // `browserLocale` is coming as `en` instead of `en_US` for the first render before switching the language from the dropdown.
            String countryCode = browserLocale.getCountry();
            String fallbackCountryCode = supportedLanguages.get(browserLocale.getLanguage());

            if (StringUtils.isNotBlank(countryCode) && languageSupportedCountries.contains(countryCode)) {
                userLocale = new Locale(browserLocale.getLanguage(), countryCode);
            } else if (StringUtils.isNotBlank(fallbackCountryCode)){
                userLocale = new Locale(browserLocale.getLanguage(), fallbackCountryCode);
            } else {
                userLocale = new Locale("en","US");
            }
        }
        return userLocale;
    }
    /**
    * Get the user's locale code in the "language-country" format based on the request, cookies, and URL parameters.
    *
    * This method determines the user's locale based on the getUserLocale method and returns the locale code
    * in the "language-country" format (e.g., "en-US").
    *
    * @param request The HTTP servlet request.
    * @return The user's locale code in the "language-country" format.
    */
    public String getUserLocaleCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getLanguage() + "-" + locale.getCountry();
    }
    /**
    * Get the user's language code based on the request, cookies, and URL parameters.
    *
    * This method determines the user's language code based on the getUserLocale method and returns
    * the language code (e.g., "en").
    *
    * @param request The HTTP servlet request.
    * @return The user's language code.
    */
    public String getUserLanguageCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getLanguage();
    }
    /**
    * Get the user's country code based on the request, cookies, and URL parameters.
    *
    * This method determines the user's country code based on the getUserLocale method and returns
    * the country code (e.g., "US").
    *
    * @param request The HTTP servlet request.
    * @return The user's country code.
    */
    public String getUserCountryCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getCountry();
    }


    /**
    * Convert the application name by replacing spaces with underscores.
    *
    * This serves as a temporary solution for implementing a custom layout for applications with
    * names containing spaces. It is recommended to remove this workaround and implement a more
    * robust solution in the future.
    * Tracked by - https://github.com/wso2-enterprise/asgardeo-product/issues/19824
    *
    * @param applicationName Name of the application (Service Provider Name).
    * @return Converted application name.
    */
    public String convertApplicationName(String applicationName) {
        return StringUtils.replace(applicationName, " ", "_");
    }


    private static final String USERNAME_CLAIM_URI = "http://wso2.org/claims/username";
    private static final String EMAIL_CLAIM_URI = "http://wso2.org/claims/emailaddress";
    private static final String MOBILE_CLAIM_URI = "http://wso2.org/claims/mobile";


    /**
     * Retrieve the username place holder when alternative
     * login identifiers are enabled.
     *
     * @return {String}
     */
    public String getUsernameLabel(ResourceBundle resourceBundle, String allowedAttributes) {
        
        String[] attributes = allowedAttributes.split(",");
        List<String> attributeList = new ArrayList<>();
        String usernameLabel="";

        
            for (int index = 0; index < attributes.length; index++) {
                String attribute = attributes[index];
                String i18nKey = null;
        
                if (StringUtils.equals(attribute, USERNAME_CLAIM_URI)) {
                    i18nKey = "username";
                } else if (StringUtils.equals(attribute, EMAIL_CLAIM_URI )) {
                    i18nKey = "email";
                } else if (StringUtils.equals(attribute, MOBILE_CLAIM_URI)) {
                    i18nKey = "mobile";
                }
        
                if (i18nKey != null) {
                    String i18nValue = AuthenticationEndpointUtil.i18n(resourceBundle, i18nKey);
                    if (index > 0) {
                        i18nValue = i18nValue.toLowerCase();
                    }
                    attributeList.add(i18nValue);
                }
            }

            if (attributeList.size() > 0) {
                String orString = AuthenticationEndpointUtil.i18n(resourceBundle, "or").toLowerCase(); 
                usernameLabel = String.join(", ", attributeList.subList(0, attributeList.size() - 1))
                    + (attributeList.size() > 1 ? " " + orString + " " : "")
                    + attributeList.get(attributeList.size() - 1);
            }

        return usernameLabel;
    }


    private static final String FIDO_AUTHENTICATOR = "FIDOAuthenticator";
    private static final String MAGIC_LINK_AUTHENTICATOR = "MagicLinkAuthenticator";
    private static final String IWA_AUTHENTICATOR = "IwaNTLMAuthenticator";
    private static final String IS_SAAS_APP = "isSaaSApp";
    private static final String BASIC_AUTHENTICATOR = "BasicAuthenticator";
    private static final String IDENTIFIER_EXECUTOR = "IdentifierExecutor";
    private static final String OPEN_ID_AUTHENTICATOR = "OpenIDAuthenticator";
    private static final String JWT_BASIC_AUTHENTICATOR = "JWTBasicAuthenticator";
    private static final String X509_CERTIFICATE_AUTHENTICATOR = "x509CertificateAuthenticator";
    private static final String GOOGLE_AUTHENTICATOR = "GoogleOIDCAuthenticator";
    private static final String GITHUB_AUTHENTICATOR = "GithubAuthenticator";
    private static final String FACEBOOK_AUTHENTICATOR = "FacebookAuthenticator";
    private static final String OIDC_AUTHENTICATOR = "OpenIDConnectAuthenticator";
    private static final String SSO_AUTHENTICATOR_NAME = "SSO";
    private static final String MICROSOFT_IDP = "Microsoft";
    private static final String ENTERPRISE_USER_LOGIN_AUTHENTICATOR = "EnterpriseIDPAuthenticator";
    private static final String ENTERPRISE_USER_LOGIN_ORG = "EnterpriseIDP_Org";
    private static final String ENTERPRISE_USER_LOGIN_IDP = "EnterpriseIDP";
    private static final String USER_TYPE_ORGANIZATION = "org";
    private static final String USER_TYPE_ASGARDEO = "asg";
    private static final String BACKUP_CODE_AUTHENTICATOR = "backup-code-authenticator";
    private static final String SMS_OTP_AUTHENTICATOR = "sms-otp-authenticator";
    private static final String EMAIL_OTP_AUTHENTICATOR = "email-otp-authenticator";
    private static final String TOTP_AUTHENTICATOR = "totp";
    private static final String PUSH_NOTIFICATION_AUTHENTICATOR = "push-notification-authenticator";
    private static final String ENTERPRISE_LOGIN_KEY = "isEnterpriseLoginEnabled";
    private static final String ENTERPRISE_API_RELATIVE_PATH = "/api/asgardeo-enterprise-login/v1/business-user-login/";
    private static final String CUSTOM_LOCAL_AUTHENTICATOR_PREFIX = "custom-";


    private boolean isMultiAuthAvailable(String multiOptionURI) {

        boolean isMultiAuthAvailable = true;
        if (multiOptionURI == null || multiOptionURI.equals("null")) {
            isMultiAuthAvailable = false;
        } else {
            int authenticatorIndex = multiOptionURI.indexOf("authenticators=");
            if (authenticatorIndex == -1) {
                isMultiAuthAvailable = false;
            } else {
                String authenticators = multiOptionURI.substring(authenticatorIndex + 15);
                int authLastIndex = authenticators.indexOf("&") != -1 ? authenticators.indexOf("&") : authenticators.length();
                authenticators = authenticators.substring(0, authLastIndex);
                List<String> authList = Arrays.asList(authenticators.split("%3B"));
                if (authList.size() < 2) {
                    isMultiAuthAvailable = false;
                }
                else if (authList.size() == 2 && authList.contains("backup-code-authenticator%3ALOCAL")) {
                    isMultiAuthAvailable = false;
                }
            }
        }
        return isMultiAuthAvailable;
    }


    private static final String JAVAX_SERVLET_FORWARD_REQUEST_URI = "javax.servlet.forward.request_uri";
    private static final String JAVAX_SERVLET_FORWARD_QUERY_STRING = "javax.servlet.forward.query_string";
    private static final String UTF_8 = "UTF-8";
    private static final String TENANT_DOMAIN = "tenant-domain";
    private static final String ACCOUNT_RECOVERY_ENDPOINT = "/accountrecoveryendpoint";
    private static final String ACCOUNT_RECOVERY_ENDPOINT_RECOVER = "/recoveraccountrouter.do";
    private static final String ACCOUNT_RECOVERY_ENDPOINT_REGISTER = "/register.do";
    private static final String AUTHENTICATION_ENDPOINT_LOGIN = "/authenticationendpoint/login.do";
    private static final String CONSOLE = "Console";
    private Log log = LogFactory.getLog(this.getClass());


        private String getRecoverAccountUrl(String identityMgtEndpointContext, String urlEncodedURL,
                boolean isUsernameRecovery, String urlParameters) {

            return identityMgtEndpointContext + ACCOUNT_RECOVERY_ENDPOINT_RECOVER + "?" + urlParameters
                    + "&isUsernameRecovery=" + isUsernameRecovery + "&callback=" + Encode
                    .forHtmlAttribute(urlEncodedURL);
        }

        private String getRecoverAccountUrlWithUsername(String identityMgtEndpointContext, String urlEncodedURL,
                boolean isUsernameRecovery, String urlParameters, String username) {

            if (StringUtils.isNotBlank(username)) {
            	try {
	        	username = URLEncoder.encode(username, UTF_8);
	        } catch (UnsupportedEncodingException e) {
	     		// Skip and fall back to un-encoded username
	        }

               urlParameters = urlParameters + "&username=" + Encode.forHtmlAttribute(username);
            }

            return identityMgtEndpointContext + ACCOUNT_RECOVERY_ENDPOINT_RECOVER + "?" + urlParameters
                    + "&isUsernameRecovery=" + isUsernameRecovery + "&callback=" + Encode
                    .forHtmlAttribute(urlEncodedURL);
        }

        private String getRegistrationUrl(String accountRegistrationEndpointURL, String urlEncodedURL,
                String urlParameters) {

            String registrationUrl = accountRegistrationEndpointURL + "?"  + urlParameters;
            if (!StringUtils.isEmpty(urlEncodedURL)) {
                registrationUrl += "&callback=" + Encode.forHtmlAttribute(urlEncodedURL);
            }

            return registrationUrl;
        }
    

        private boolean isIdentifierFirstLogin(String inputType) {
            return "idf".equalsIgnoreCase(inputType);
        }

        private boolean isLoginHintAvailable(String inputType) {
            return "login_hint".equalsIgnoreCase(inputType);
        }
    
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(13);
    _jspx_dependants.put("/includes/init-url.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/openid.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/includes/localize.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/includes/username-label-resolver.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/identifierauth.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.4.34.jar", Long.valueOf(1739947872000L));
    _jspx_dependants.put("/tenantauth.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/includes/layout-resolver.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/basicauth.jsp", Long.valueOf(1747321634000L));
    _jspx_dependants.put("/includes/init-loginform-action-url.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/includes/branding-preferences.jsp", Long.valueOf(1747321634000L));
    _jspx_dependants.put("jar:file:/home/dheera/Research/ISWithCustAuthPatch/wso2is-7.1.0/repository/deployment/server/webapps/authenticationendpoint/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.4.34.jar!/META-INF/taglib.tld", Long.valueOf(1660634188000L));
    _jspx_dependants.put("/plugins/basicauth-extensions.jsp", Long.valueOf(1740062656000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(107);
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ERROR_WHILE_BUILDING_THE_ACCOUNT_RECOVERY_ENDPOINT_URL");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClientException");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isRecoveryEPAvailable");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ConfiguredAuthenticatorsRetrievalClientException");
    _jspx_imports_classes.add("org.apache.http.HttpStatus");
    _jspx_imports_classes.add("org.apache.commons.codec.binary.Base64");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO");
    _jspx_imports_classes.add("org.json.JSONException");
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.bean.PropertyDTO");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.URLBuilderException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.Constants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.ServiceURLBuilder");
    _jspx_imports_classes.add("org.apache.commons.httpclient.HttpsURL");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.AdminAdvisoryDataRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EndpointConfigManager");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("javax.ws.rs.core.Response");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.TenantDataManager");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL");
    _jspx_imports_classes.add("org.wso2.carbon.identity.captcha.util.CaptchaUtil");
    _jspx_imports_classes.add("java.util.regex.Pattern");
    _jspx_imports_classes.add("org.apache.commons.logging.LogFactory");
    _jspx_imports_classes.add("org.wso2.carbon.CarbonConstants");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS");
    _jspx_imports_classes.add("java.io.UnsupportedEncodingException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.client.model.AuthenticationRequestWrapper");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.AuthenticatorDataRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.CommonDataRetrievalClient");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isEmailUsernameEnabled");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClient");
    _jspx_imports_classes.add("org.apache.commons.httpclient.HttpURL");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.ResourceBundle");
    _jspx_imports_classes.add("java.nio.charset.Charset");
    _jspx_imports_classes.add("org.apache.commons.collections.CollectionUtils");
    _jspx_imports_classes.add("org.wso2.carbon.user.core.util.UserCoreUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ConfiguredAuthenticatorsRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.client.SelfUserRegistrationResource");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.provider.json.JSONProvider");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthContextAPIClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityTenantUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.AuthenticatorDataRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isSelfSignUpEPAvailable");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClient");
    _jspx_imports_classes.add("org.apache.commons.collections.MapUtils");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.client.WebClient");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS_MSG");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl");
    _jspx_imports_classes.add("org.apache.commons.text.StringEscapeUtils");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.AUTHENTICATION_MECHANISM_NOT_CONFIGURED");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.client.JAXRSClientFactory");
    _jspx_imports_classes.add("org.wso2.carbon.base.ServerConfiguration");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ENABLE_AUTHENTICATION_WITH_REST_API");
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityCoreConstants");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.CONFIGURATION_ERROR");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.AdminAdvisoryDataRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityUtil");
    _jspx_imports_classes.add("org.apache.commons.logging.Log");
    _jspx_imports_classes.add("org.json.JSONArray");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.release();
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.release();
    _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String lang = "en_US"; // Default lang is en_US
    String COOKIE_NAME = "ui_lang";
    Locale browserLocale = request.getLocale();
    Locale userLocale = browserLocale;
    String uiLocaleFromURL = request.getParameter("ui_locales");
    String localeFromCookie = null;
    String BUNDLE = "org.wso2.carbon.identity.application.authentication.endpoint.i18n.Resources";

    // List of screen names for retrieving text branding customizations.
    List<String> screenNames = new ArrayList<>();
    screenNames.add("common");

    // Map to store default supported language codes.
    // TODO: Use this map to generate the `language-switcher.jsp`.
    Map<String, String> supportedLanguages = new HashMap<>();
    supportedLanguages.put("en", "US");
    supportedLanguages.put("fr", "FR");
    supportedLanguages.put("es", "ES");
    supportedLanguages.put("pt", "PT");
    supportedLanguages.put("de", "DE");
    supportedLanguages.put("zh", "CN");
    supportedLanguages.put("ja", "JP");

    List<String> languageSupportedCountries = new ArrayList<>();
    languageSupportedCountries.add("US");
    languageSupportedCountries.add("FR");
    languageSupportedCountries.add("ES");
    languageSupportedCountries.add("PT");
    languageSupportedCountries.add("DE");
    languageSupportedCountries.add("CN");
    languageSupportedCountries.add("JP");
    languageSupportedCountries.add("BR");

    // Check cookie for the user selected language first
    Cookie[] cookies = request.getCookies();
    if (cookies != null) {
        for (Cookie cookie : cookies) {
            if (cookie.getName().equals(COOKIE_NAME)) {
                localeFromCookie = cookie.getValue();
            }
        }
    }

    // Set lang from the priority order
    if (localeFromCookie != null) {
        lang = localeFromCookie;

        try {
            String langStr = "en";
            String langLocale = "US";

            if (lang.contains("_")) {
                langStr = lang.split("_")[0];
                langLocale = lang.split("_")[1];
            } else if (lang.contains("-")) {
                langStr = lang.split("-")[0];
                langLocale = lang.split("-")[1];
            }

            userLocale = new Locale(langStr, langLocale);
        } catch (Exception e) {
            // In case the language is defined but not in the correct format
            userLocale = browserLocale;
        }
    } else if (uiLocaleFromURL != null) {
        for (String localeStr : uiLocaleFromURL.split(" ")) {
            String langStr = "en";
            String langLocale = "US";

            if (localeStr.contains("_")) {
                langStr = localeStr.split("_")[0];
                langLocale = localeStr.split("_")[1];
            } else if (localeStr.contains("-")) {
                langStr = localeStr.split("-")[0];
                langLocale = localeStr.split("-")[1];
            }

            Locale tempLocale = new Locale(langStr, langLocale);

            // Trying to find out whether we have resource bundle for the given locale
            try {
                ResourceBundle foundBundle = ResourceBundle.getBundle(BUNDLE, tempLocale);

                // If so, setting the userLocale to that locale. If not, set the browser locale as user locale
                // Currently, we only care about the language - we do not compare about country locales since our
                // supported locale set is limited.
                if (tempLocale.getLanguage().equals(foundBundle.getLocale().getLanguage())) {
                    userLocale = tempLocale;
                    break;
                } else if (tempLocale.getLanguage().equals("en") && foundBundle.getLocale().getLanguage().equals("")) {
                    // When the given locale is en - which is our fallback one, we have to handle it separately because
                    // returns and empty string as locale language
                    userLocale = tempLocale;
                    break;
                } else {
                    userLocale = browserLocale;
                }
            } catch (Exception e) {
                userLocale = browserLocale;
            }
        }
    } else {
        // `browserLocale` is coming as `en` instead of `en_US` for the first render before switching the language from the dropdown.
        String countryCode = browserLocale.getCountry();
        String fallbackCountryCode = supportedLanguages.get(browserLocale.getLanguage());

        if (StringUtils.isNotBlank(countryCode) && languageSupportedCountries.contains(countryCode)) {
            userLocale = new Locale(browserLocale.getLanguage(), countryCode);
        } else if (StringUtils.isNotBlank(fallbackCountryCode)){
            userLocale = new Locale(browserLocale.getLanguage(), fallbackCountryCode);
        } else {
            userLocale = new Locale("en","US");
        }
    }

    ResourceBundle resourceBundle = ResourceBundle.getBundle(BUNDLE, userLocale, new
        EncodedControl(StandardCharsets.UTF_8.toString()));

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String TENANT_DOMAIN_KEY = "tenantDomain";
    String TENANT_DOMAIN_SHORT = "t";
    String USER_TENANT_DOMAIN_SHORT = "ut";
    String SERVICE_PROVIDER_NAME_SHORT = "sp";
    String SERVICE_PROVIDER_ID_SHORT = "spId";

    String identityServerEndpointContextParam = application.getInitParameter("IdentityServerEndpointContextURL");
    String samlssoURL = "../samlsso";
    String commonauthURL = "../commonauth";
    String oauth2AuthorizeURL = "../oauth2/authorize";
    String oidcLogoutURL = "../oidc/logout";
    String openidServerURL = "../openidserver";
    String logincontextURL = "../logincontext";
    String longwaitstatusURL = "/longwaitstatus";

    String tenantDomain;
    String userTenantDomain;
    String tenantForTheming;
    String userTenant;
    String spAppName;
    String spAppId;

    if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
        tenantDomain = IdentityTenantUtil.resolveTenantDomain();
        tenantForTheming = tenantDomain;
        userTenant = tenantDomain;

        spAppName = request.getParameter(SERVICE_PROVIDER_NAME_SHORT);
        if (StringUtils.isBlank(spAppName) && StringUtils.isNotBlank((String) request.getAttribute(SERVICE_PROVIDER_NAME_SHORT))) {
            spAppName = (String) request.getAttribute(SERVICE_PROVIDER_NAME_SHORT);
        }

        spAppId = request.getParameter(SERVICE_PROVIDER_ID_SHORT);
        if (StringUtils.isBlank(spAppId) && StringUtils.isNotBlank((String) request.getAttribute(SERVICE_PROVIDER_ID_SHORT))) {
            spAppId = (String) request.getAttribute(SERVICE_PROVIDER_ID_SHORT);
        }

        String tenantDomainFromURL = request.getParameter(TENANT_DOMAIN_SHORT);
        if (StringUtils.isBlank(tenantDomainFromURL) && StringUtils.isNotBlank((String) request.getAttribute(TENANT_DOMAIN_SHORT))) {
            tenantDomainFromURL = (String) request.getAttribute(TENANT_DOMAIN_SHORT);
        }

        String tenantDomainOfUser = request.getParameter(USER_TENANT_DOMAIN_SHORT);
        if (StringUtils.isBlank(tenantDomainOfUser) && StringUtils.isNotBlank((String) request.getAttribute(USER_TENANT_DOMAIN_SHORT))) {
            tenantDomainOfUser = (String) request.getAttribute(USER_TENANT_DOMAIN_SHORT);
        }

        userTenantDomain = tenantDomainOfUser;

        if (StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)
            && StringUtils.equals(spAppName, "Console")) {
            tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
        } else {
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomainFromURL;
            }
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomain;
            }
            if (StringUtils.isNotBlank(tenantDomainOfUser)) {
                tenantForTheming = tenantDomainOfUser;
            }
            if (StringUtils.equals(spAppName, "My Account")
                && StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {
                tenantForTheming = userTenantDomain;
                userTenant = userTenantDomain;
            }
        }
    } else {
        tenantDomain = request.getParameter(TENANT_DOMAIN_KEY);
        if (StringUtils.isBlank(tenantDomain) && StringUtils.isNotBlank((String) request.getAttribute(TENANT_DOMAIN_KEY))) {
            tenantDomain = (String) request.getAttribute(TENANT_DOMAIN_KEY);
        }

        String tenantDomainFromURL = request.getParameter(TENANT_DOMAIN_SHORT);
        if (StringUtils.isBlank(tenantDomainFromURL) && StringUtils.isNotBlank((String) request.getAttribute(TENANT_DOMAIN_SHORT))) {
            tenantDomainFromURL = (String) request.getAttribute(TENANT_DOMAIN_SHORT);
        }

        String tenantDomainOfUser = request.getParameter(USER_TENANT_DOMAIN_SHORT);
        if (StringUtils.isBlank(tenantDomainOfUser) && StringUtils.isNotBlank((String) request.getAttribute(USER_TENANT_DOMAIN_SHORT))) {
            tenantDomainOfUser = (String) request.getAttribute(USER_TENANT_DOMAIN_SHORT);
        }

        spAppName = request.getParameter(SERVICE_PROVIDER_NAME_SHORT);
        if (StringUtils.isBlank(spAppName) && StringUtils.isNotBlank((String) request.getAttribute(SERVICE_PROVIDER_NAME_SHORT))) {
            spAppName = (String) request.getAttribute(SERVICE_PROVIDER_NAME_SHORT);
        }

        spAppId = request.getParameter(SERVICE_PROVIDER_ID_SHORT);
        if (StringUtils.isBlank(spAppId) && StringUtils.isNotBlank((String) request.getAttribute(SERVICE_PROVIDER_ID_SHORT))) {
            spAppId = (String) request.getAttribute(SERVICE_PROVIDER_ID_SHORT);
        }

        if (StringUtils.isBlank(tenantDomain)) {
            tenantDomain = request.getParameter(IdentityManagementEndpointConstants.TENANT_DOMAIN);
            if (StringUtils.isBlank(tenantDomain) && StringUtils.isNotBlank((String) request.getAttribute(IdentityManagementEndpointConstants.TENANT_DOMAIN))) {
                tenantDomain = (String) request.getAttribute(IdentityManagementEndpointConstants.TENANT_DOMAIN);
            }
        }

        if (!StringUtils.isBlank(tenantDomainFromURL)) {
            tenantDomain = tenantDomainFromURL;
        }

        tenantForTheming = tenantDomain;
        userTenant = tenantDomain;
        userTenantDomain = tenantDomainOfUser;

        if (StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)
            && StringUtils.equals(spAppName, "Console")) {
            tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
        } else {
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomainFromURL;
            }
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomain;
            }
            if (StringUtils.isNotBlank(tenantDomainOfUser)) {
                tenantForTheming = tenantDomainOfUser;
            }
            if (StringUtils.equals(spAppName, "My Account")
                && StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {
                tenantForTheming = userTenantDomain;
                userTenant = userTenantDomain;
            }
        }
    }

    if (Boolean.parseBoolean(application.getInitParameter("IsHostedExternally"))) {
        identityServerEndpointContextParam = application.getInitParameter("IdentityServerEndpointContextURL");
    } else {
        spAppName = request.getParameter(SERVICE_PROVIDER_NAME_SHORT);
        ServiceURLBuilder serviceUrlBuilder = ServiceURLBuilder.create().setTenant(tenantDomain);
        if ("My Account".equals(spAppName) || "Console".equals(spAppName)) {
            serviceUrlBuilder.setSkipDomainBranding(true);
        } 
    
        identityServerEndpointContextParam = serviceUrlBuilder.build().getAbsolutePublicURL();
    }

    if (StringUtils.isNotBlank(identityServerEndpointContextParam)) {

        samlssoURL = identityServerEndpointContextParam + "/samlsso";
        commonauthURL = identityServerEndpointContextParam + "/commonauth";
        oauth2AuthorizeURL = identityServerEndpointContextParam + "/oauth2/authorize";
        oidcLogoutURL = identityServerEndpointContextParam + "/oidc/logout";
        openidServerURL = identityServerEndpointContextParam + "/oidc/logout";
        logincontextURL = identityServerEndpointContextParam + "/logincontext";
        longwaitstatusURL = identityServerEndpointContextParam + "/longwaitstatus";
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    // Add the login screen to the list to retrieve text branding customizations.
    screenNames.add("login");

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');

    JSONObject brandingPreference = null;
    JSONObject customText = new JSONObject();

    boolean isBrandingEnabledInTenantPreferences = true;
    boolean isSelfSignUpEnabledInTenantPreferences = true;
    boolean isPasswordRecoveryEnabledInTenantPreferences = true;
    boolean shouldRemoveDefaultBranding = true;
    @Deprecated
    JSONObject colors = null;
    JSONObject theme = null;
    String activeThemeName = "";
    String overrideStylesheet = "";
    @Deprecated
    String __DEPRECATED__copyrightText = "";
    @Deprecated
    String __DEPRECATED__siteTitle = "";
    String supportEmail = "contact@wso2.com";
    String logoURL = "";
    String logoAlt = "";
    String faviconURL = "libs/themes/wso2is/assets/images/branding/favicon.ico";
    String privacyPolicyURL = "/authenticationendpoint/privacy_policy.do";
    String termsOfUseURL = "https://wso2.com/terms-of-use/";
    String cookiePolicyURL = "/authenticationendpoint/cookie_policy.do";
    String selfSignUpOverrideURL = "";
    String passwordRecoveryOverrideURL = "";
    String layout = "centered";
    String layoutFileRelativePath = "includes/layouts/" + layout + "/body.ser";
    String layoutStoreURL = "extensions/layouts/custom/${tenantDomain}";
    Map<String, Object> layoutData = new HashMap<String, Object>();
    String productName = "WSO2 Identity Server";
    String productURL = "https://wso2.com/identity-server";
    String productLogoURL = "libs/themes/wso2is/assets/images/branding/logo-full.svg";
    String productLogoAlt = "WSO2 Identity Server Logo";
    String productWhiteLogoURL = "libs/themes/wso2is/assets/images/branding/logo-full-inverted.svg";
    String poweredByLogoURL = "";
    String productWhiteLogoAlt = "WSO2 Identity Server Logo White Variation";
    boolean enableDefaultPreLoader = true;

    final String BRANDING_PREFERENCE_CACHE_KEY = "BrandingPreferenceCache";
    final String BRANDING_TEXT_PREFERENCE_CACHE_KEY = "BrandingTextPreferenceCache";

    // Constants used to create full custom layout name
    String PREFIX_FOR_CUSTOM_LAYOUT_NAME = "custom";
    String CUSTOM_LAYOUT_NAME_SEPERATOR = "-";

    // Preferences response object pointer keys.
    String PREFERENCE_KEY = "preference";
    String ACTIVE_THEME_KEY = "activeTheme";
    String COLORS_KEY = "colors";
    String THEME_KEY = "theme";
    String STYLESHEETS_KEY = "stylesheets";
    String ACCOUNT_APP_STYLESHEET_KEY = "accountApp";
    String ORG_DETAILS_KEY = "organizationDetails";
    String COPYRIGHT_TEXT_KEY = "copyrightText";
    String SITE_TITLE_KEY = "siteTitle";
    String SUPPORT_EMAIL_KEY = "supportEmail";
    String IMAGES_KEY = "images";
    String IMAGE_URL_KEY = "imgURL";
    String ALT_TEXT_KEY = "altText";
    String LOGO_KEY = "logo";
    String FAVICON_KEY = "favicon";
    String URLS_KEY = "urls";
    String PRIVACY_POLICY_URL_KEY = "privacyPolicyURL";
    String TERMS_OF_USE_URL_KEY = "termsOfUseURL";
    String COOKIE_POLICY_URL_KEY = "cookiePolicyURL";
    String SELF_SIGN_UP_URL_KEY = "selfSignUpURL";
    String PASSWORD_RECOVERY_URL_KEY = "passwordRecoveryURL";
    String CONFIGS_KEY = "configs";
    String IS_BRANDING_ENABLED_KEY= "isBrandingEnabled";
    String IS_SELF_SIGN_UP_ENABLED_KEY = "isSelfSignUpEnabled";
    String IS_PASSWORD_RECOVERY_ENABLED_KEY = "isPasswordRecoveryEnabled";
    String SHOULD_REMOVE_ASGARDEO_BRANDING_KEY = "removeAsgardeoBranding";
    String SHOULD_REMOVE_DEFAULT_BRANDING_KEY = "removeDefaultBranding";
    String TEXT_KEY = "text";

    // Additional keys to override the fallback values.
    String PRODUCT_NAME_KEY = "productName";
    String PRODUCT_URL_KEY = "productURL";
    String PRODUCT_LOGO_URL_KEY = "productLogoURL";
    String PRODUCT_LOGO_ALT_KEY = "productLogoAlt";
    String PRODUCT_WHITE_LOGO_URL_KEY = "productWhiteLogoURL";
    String PRODUCT_WHITE_LOGO_ALT_KEY = "productWhiteLogoAlt";
    String IS_DEFAULT_PRE_LOADER_ENABLED_KEY = "enableDefaultPreLoader";

    // Load the branding fallback override values file if it exists.
    if (config.getServletContext().getResource("extensions/branding-fallbacks.jsp") != null) {

      out.write("\n");
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/extensions/branding-fallbacks.jsp", out, false);
      out.write('\n');
      out.write('\n');

    }

    /*
        The override values are set within the request object using a Map object.
        This approach is necessary because 'branding-fallbacks.jsp' may not always exist.
        Consequently, a directive include cannot be employed; rather, an action include must be utilized.
        It ensures that the override values are accessible to this JSP page through the request object.
    */
    Map<String, Object> overrideFallbackValues = (Map<String, Object>) request.getAttribute("overrideFallbackValues");

    // Override the branding fallback values
    if (overrideFallbackValues != null) {
        // Configs
        if (overrideFallbackValues.containsKey(IS_BRANDING_ENABLED_KEY)) {
            isBrandingEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_BRANDING_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(IS_SELF_SIGN_UP_ENABLED_KEY)) {
            isSelfSignUpEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_SELF_SIGN_UP_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(IS_PASSWORD_RECOVERY_ENABLED_KEY)) {
            isPasswordRecoveryEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_PASSWORD_RECOVERY_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(SHOULD_REMOVE_DEFAULT_BRANDING_KEY)) {
            shouldRemoveDefaultBranding = (boolean) overrideFallbackValues.get(SHOULD_REMOVE_DEFAULT_BRANDING_KEY);
        }

        // Pre loader
        if (overrideFallbackValues.containsKey(IS_DEFAULT_PRE_LOADER_ENABLED_KEY)) {
            enableDefaultPreLoader = (boolean) overrideFallbackValues.get(IS_DEFAULT_PRE_LOADER_ENABLED_KEY);
        }

        // Colors.
        // @deprecated Moved in to `theme` object. Kept here for backward compatibility.
        if (overrideFallbackValues.containsKey(COLORS_KEY)) {
            colors = (JSONObject) overrideFallbackValues.get(COLORS_KEY);
        }

        // Theme
        if (overrideFallbackValues.containsKey(THEME_KEY)) {
            theme = (JSONObject) overrideFallbackValues.get(THEME_KEY);
        }

        if (overrideFallbackValues.containsKey(ACTIVE_THEME_KEY)) {
            activeThemeName = (String) overrideFallbackValues.get(ACTIVE_THEME_KEY);
        }

        // Product details
        if (overrideFallbackValues.containsKey(PRODUCT_NAME_KEY)) {
            productName = (String) overrideFallbackValues.get(PRODUCT_NAME_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_URL_KEY)) {
            productURL = (String) overrideFallbackValues.get(PRODUCT_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_LOGO_URL_KEY)) {
            productLogoURL = (String) overrideFallbackValues.get(PRODUCT_LOGO_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_LOGO_ALT_KEY)) {
            productLogoAlt = (String) overrideFallbackValues.get(PRODUCT_LOGO_ALT_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_WHITE_LOGO_URL_KEY)) {
            productWhiteLogoURL = (String) overrideFallbackValues.get(PRODUCT_WHITE_LOGO_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_WHITE_LOGO_ALT_KEY)) {
            productWhiteLogoAlt = (String) overrideFallbackValues.get(PRODUCT_WHITE_LOGO_ALT_KEY);
        }

        // Stylesheets
        if (overrideFallbackValues.containsKey(ACCOUNT_APP_STYLESHEET_KEY)) {
            overrideStylesheet = (String) overrideFallbackValues.get(ACCOUNT_APP_STYLESHEET_KEY);
        }

        // Organization Details
        if (overrideFallbackValues.containsKey(COPYRIGHT_TEXT_KEY)) {
            __DEPRECATED__copyrightText = (String) overrideFallbackValues.get(COPYRIGHT_TEXT_KEY);
        }

        if (overrideFallbackValues.containsKey(SITE_TITLE_KEY)) {
            __DEPRECATED__siteTitle = (String) overrideFallbackValues.get(SITE_TITLE_KEY);
        }

        if (overrideFallbackValues.containsKey(SUPPORT_EMAIL_KEY)) {
            supportEmail = (String) overrideFallbackValues.get(SUPPORT_EMAIL_KEY);
        }

        // Images
        if (overrideFallbackValues.containsKey(FAVICON_KEY)) {
            faviconURL = (String) overrideFallbackValues.get(FAVICON_KEY);
        }

        // Links
        if (overrideFallbackValues.containsKey(PRIVACY_POLICY_URL_KEY)) {
            privacyPolicyURL = (String) overrideFallbackValues.get(PRIVACY_POLICY_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(TERMS_OF_USE_URL_KEY)) {
            termsOfUseURL = (String) overrideFallbackValues.get(TERMS_OF_USE_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(COOKIE_POLICY_URL_KEY)) {
            cookiePolicyURL = (String) overrideFallbackValues.get(COOKIE_POLICY_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(SELF_SIGN_UP_URL_KEY)) {
            selfSignUpOverrideURL = (String) overrideFallbackValues.get(SELF_SIGN_UP_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PASSWORD_RECOVERY_URL_KEY)) {
            passwordRecoveryOverrideURL = (String) overrideFallbackValues.get(PASSWORD_RECOVERY_URL_KEY);
        }
    }

    String DEFAULT_RESOURCE_LOCALE = "en-US";
    String ORG_PREFERENCE_RESOURCE_TYPE = "ORG";
    String APP_PREFERENCE_RESOURCE_TYPE = "APP";
    String RESOURCE_TYPE = "type";
    String preferenceResourceType = ORG_PREFERENCE_RESOURCE_TYPE;
    String tenantRequestingPreferences = tenantForTheming;
    String applicationRequestingPreferences = spAppId;
    String locale = StringUtils.isNotBlank(getUserLocaleCode(request)) ? getUserLocaleCode(request) : DEFAULT_RESOURCE_LOCALE;

    try {

        // If the `sp` param is defined, set the resource type as app.
        if (StringUtils.isNotBlank(applicationRequestingPreferences)) {
            preferenceResourceType = APP_PREFERENCE_RESOURCE_TYPE;
        }

        BrandingPreferenceRetrievalClient brandingPreferenceRetrievalClient = new BrandingPreferenceRetrievalClient();
        JSONObject brandingPreferenceResponse = null;
        Object cachedBrandingPreferenceResponse = request.getAttribute(BRANDING_PREFERENCE_CACHE_KEY);
        if (cachedBrandingPreferenceResponse != null && cachedBrandingPreferenceResponse instanceof BrandingPreferenceRetrievalClientException) {
            throw (BrandingPreferenceRetrievalClientException) cachedBrandingPreferenceResponse;
        } else {
            brandingPreferenceResponse = (JSONObject) cachedBrandingPreferenceResponse;
        }
        if (brandingPreferenceResponse == null) {
            brandingPreferenceResponse = brandingPreferenceRetrievalClient.getPreference(tenantRequestingPreferences,
                preferenceResourceType, applicationRequestingPreferences, DEFAULT_RESOURCE_LOCALE);
            request.setAttribute(BRANDING_PREFERENCE_CACHE_KEY, brandingPreferenceResponse);
        }

        if (brandingPreferenceResponse.has(PREFERENCE_KEY)) {
            brandingPreference = brandingPreferenceResponse.getJSONObject(PREFERENCE_KEY);
            preferenceResourceType = brandingPreferenceResponse.getString(RESOURCE_TYPE);
        }


      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');


    // Get the layout store url from the configuration file
    String tempLayoutStoreURL = application.getInitParameter("LayoutStoreURL");
    if (!StringUtils.equals(tenantRequestingPreferences, IdentityManagementEndpointConstants.SUPER_TENANT) && !StringUtils.isBlank(tempLayoutStoreURL)) {
        layoutStoreURL = tempLayoutStoreURL;
    }

    // Common data for the layout file.
    layoutData.put("BASE_URL", "includes/layouts/" + layout);

    if (brandingPreference != null) {
        // First, check if Branding is enabled.
        if (brandingPreference.has(CONFIGS_KEY)) {
            if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_BRANDING_ENABLED_KEY)) {
                isBrandingEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_BRANDING_ENABLED_KEY);
            }
        }

        // Proceed only if the branding is enabled.
        if (isBrandingEnabledInTenantPreferences) {
            // Keys.
            String LAYOUT_KEY = "layout";
            String ACTIVE_LAYOUT_KEY = "activeLayout";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY = "sideImg";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY = "imgURL";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY = "altText";
            String LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY = "productTagLine";

            // Layout names.
            String LEFT_IMAGE_LAYOUT_NAME = "left-image";
            String RIGHT_IMAGE_LAYOUT_NAME = "right-image";
            String LEFT_ALIGNED_LAYOUT_NAME = "left-aligned";
            String RIGHT_ALIGNED_LAYOUT_NAME = "right-aligned";

            // Keys for the layout data hash map.
            String SIDE_IMAGE_URL_KEY = "sideImgUrl";
            String SIDE_IMAGE_ALT_KEY = "sideImgAltText";
            String PRODUCT_TAG_LINE_KEY = "productTagLine";

            // Layout resolving logic.
            if (brandingPreference.has(LAYOUT_KEY)) {
                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(ACTIVE_LAYOUT_KEY)) {
                    if (!StringUtils.isBlank(brandingPreference.getJSONObject(LAYOUT_KEY).getString(ACTIVE_LAYOUT_KEY))){
                        String temp = brandingPreference.getJSONObject(LAYOUT_KEY).getString(ACTIVE_LAYOUT_KEY);
                        if (StringUtils.equals(temp, PREFIX_FOR_CUSTOM_LAYOUT_NAME)) {
                            // App-wise and tenant-wise custom layout resolving logic.
                            if (StringUtils.equals(preferenceResourceType, APP_PREFERENCE_RESOURCE_TYPE)) {
                                layout = temp + CUSTOM_LAYOUT_NAME_SEPERATOR + tenantRequestingPreferences + CUSTOM_LAYOUT_NAME_SEPERATOR + convertApplicationName(applicationRequestingPreferences);
                                layoutFileRelativePath = layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/apps/" + convertApplicationName(applicationRequestingPreferences) + "/body.ser";
                                layoutData.put("BASE_URL", layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/apps/" + convertApplicationName(applicationRequestingPreferences));
                            } else if (StringUtils.equals(preferenceResourceType, ORG_PREFERENCE_RESOURCE_TYPE)) {
                                layout = temp + CUSTOM_LAYOUT_NAME_SEPERATOR + tenantRequestingPreferences;
                                layoutFileRelativePath = layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/body.ser";
                                layoutData.put("BASE_URL", layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences));
                            }
                        } else {
                            // Pre-added layouts
                            String layoutFilePath = "includes/layouts/" + temp + "/body.ser";
                            if (config.getServletContext().getResource(layoutFilePath) != null) {
                                layout = temp;
                                layoutFileRelativePath = layoutFilePath;
                                layoutData.put("BASE_URL", "includes/layouts/" + temp);

                                // Get the related data to specific layouts.
                                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY)) {
                                    if (brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY)) {
                                        layoutData.put(SIDE_IMAGE_URL_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).getString(LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY));
                                    }
                                    if (brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY)) {
                                        layoutData.put(SIDE_IMAGE_ALT_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).getString(LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY));
                                    }
                                }
                                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY)) {
                                    if (!StringUtils.isBlank(brandingPreference.getJSONObject(LAYOUT_KEY).getString(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY))) {
                                        layoutData.put(PRODUCT_TAG_LINE_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getString(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');


        // Proceed only if `preferences` object is defined.
        if (brandingPreference != null) {
            // First, check if Branding is enabled.
            if (brandingPreference.has(CONFIGS_KEY)) {
                if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_BRANDING_ENABLED_KEY)) {
                    isBrandingEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_BRANDING_ENABLED_KEY);
                }
            }

            // Proceed only if the branding is enabled.
            if (isBrandingEnabledInTenantPreferences) {
                // Custom Text
                for (String screenName : screenNames) {
                    StringBuilder textBrandingCacheKey = new StringBuilder(BRANDING_TEXT_PREFERENCE_CACHE_KEY);
                    textBrandingCacheKey.append("-");
                    textBrandingCacheKey.append(screenName);
                    JSONObject customTextPreferenceResponse = (JSONObject) request.getAttribute(textBrandingCacheKey.toString());
                    if (customTextPreferenceResponse == null) {
                        customTextPreferenceResponse = brandingPreferenceRetrievalClient.getCustomTextPreference(
                            tenantRequestingPreferences,
                            preferenceResourceType,
                            applicationRequestingPreferences,
                            screenName,
                            locale
                        );
                        request.setAttribute(textBrandingCacheKey.toString(), customTextPreferenceResponse);
                    }

                    // Merge the preferences for the current screen into the customText object
                    if (customTextPreferenceResponse.has(PREFERENCE_KEY)) {
                        if (customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY) != null && customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).has(TEXT_KEY)) {
                            if (customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY) != null) {
                                for (String key : customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY).keySet()) {
                                    customText.put(key, customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY).getString(key));
                                }
                            }
                        }
                    }
                }

                // Configs
                if (brandingPreference.has(CONFIGS_KEY)) {
                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_SELF_SIGN_UP_ENABLED_KEY)) {
                        isSelfSignUpEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_SELF_SIGN_UP_ENABLED_KEY);
                    }

                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_PASSWORD_RECOVERY_ENABLED_KEY)) {
                        isPasswordRecoveryEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_PASSWORD_RECOVERY_ENABLED_KEY);
                    }

                    // @deprecated Renamed to `removeDefaultBranding` key. Kept here for backward compatibility.
                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(SHOULD_REMOVE_ASGARDEO_BRANDING_KEY)) {
                        shouldRemoveDefaultBranding = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(SHOULD_REMOVE_ASGARDEO_BRANDING_KEY);
                    }

                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(SHOULD_REMOVE_DEFAULT_BRANDING_KEY)) {
                        shouldRemoveDefaultBranding = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(SHOULD_REMOVE_DEFAULT_BRANDING_KEY);
                    }
                }

                // Colors.
                // @deprecated Moved in to `theme` object. Kept here for backward compatibility.
                if (brandingPreference.has(COLORS_KEY)) {
                    colors = brandingPreference.getJSONObject(COLORS_KEY);
                }

                // Theme
                if (brandingPreference.has(THEME_KEY)) {
                    if (brandingPreference.getJSONObject(THEME_KEY).has(ACTIVE_THEME_KEY)) {
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(THEME_KEY).getString(ACTIVE_THEME_KEY))) {
                            activeThemeName = brandingPreference.getJSONObject(THEME_KEY).getString(ACTIVE_THEME_KEY);

                            if (brandingPreference.getJSONObject(THEME_KEY).has(activeThemeName)
                                && brandingPreference.getJSONObject(THEME_KEY).getJSONObject(activeThemeName) != null) {

                                theme = brandingPreference.getJSONObject(THEME_KEY).getJSONObject(activeThemeName);

                                if (theme.has(IMAGES_KEY) && theme.getJSONObject(IMAGES_KEY) != null) {
                                    if (theme.getJSONObject(IMAGES_KEY).has(LOGO_KEY) && theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY) != null) {
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(IMAGE_URL_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY))) {

                                            logoURL = theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY);
                                        }
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(ALT_TEXT_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY))) {

                                            logoAlt = theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY);
                                        }
                                    }
                                    if (theme.getJSONObject(IMAGES_KEY).has(FAVICON_KEY) && theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY) != null) {
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).has(IMAGE_URL_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY))) {

                                            faviconURL = theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // Stylesheets
                if (brandingPreference.has(STYLESHEETS_KEY)) {
                    if (brandingPreference.getJSONObject(STYLESHEETS_KEY).has(ACCOUNT_APP_STYLESHEET_KEY)) {
                        // Only assign the `stylesheet` from response if not empty.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(STYLESHEETS_KEY).getString(ACCOUNT_APP_STYLESHEET_KEY))) {
                            overrideStylesheet = brandingPreference.getJSONObject(STYLESHEETS_KEY).getString(ACCOUNT_APP_STYLESHEET_KEY);
                        }
                    }
                }

                // Organization Details
                if (brandingPreference.has(ORG_DETAILS_KEY)) {
                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(COPYRIGHT_TEXT_KEY)) {
                        // Only assign the `copyright` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(COPYRIGHT_TEXT_KEY))) {
                            __DEPRECATED__copyrightText = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(COPYRIGHT_TEXT_KEY);
                        }
                    }

                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(SITE_TITLE_KEY)) {
                        // Only assign the `siteTitle` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SITE_TITLE_KEY))) {
                            __DEPRECATED__siteTitle = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SITE_TITLE_KEY);
                        }
                    }

                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(SUPPORT_EMAIL_KEY)) {
                        // Only assign the `supportEmail` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SUPPORT_EMAIL_KEY))) {
                            supportEmail = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SUPPORT_EMAIL_KEY);
                        }
                    }
                }

                // Images
                if (brandingPreference.has(IMAGES_KEY)) {
                    if (brandingPreference.getJSONObject(IMAGES_KEY).has(LOGO_KEY)) {
                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(IMAGE_URL_KEY)) {
                            // Only assign the `logoURL` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY))) {
                                logoURL = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY);
                            }
                        }

                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(ALT_TEXT_KEY)) {
                            // Only assign the `logoAlt` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY))) {
                                logoAlt = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY);
                            }
                        }
                    }

                    if (brandingPreference.getJSONObject(IMAGES_KEY).has(FAVICON_KEY)) {
                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).has(IMAGE_URL_KEY)) {
                            // Only assign the `faviconURL` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY))) {
                                faviconURL = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY);
                            }
                        }
                    }
                }

                // Links
                if (brandingPreference.has(URLS_KEY)) {
                    if (brandingPreference.getJSONObject(URLS_KEY).has(PRIVACY_POLICY_URL_KEY)) {
                        // Only assign the `privacyPolicyURL` from response if not empty. Else use the default value.
                        String privacyPolicyURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(PRIVACY_POLICY_URL_KEY);
                        if (!StringUtils.isBlank(privacyPolicyURLInput) && !privacyPolicyURLInput.toLowerCase().contains("javascript:") &&
                            !privacyPolicyURLInput.toLowerCase().contains("data:")) {
                                privacyPolicyURL = privacyPolicyURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(TERMS_OF_USE_URL_KEY)) {
                        // Only assign the `termsOfUseURL` from response if not empty. Else use the default value.
                        String termsOfUseURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(TERMS_OF_USE_URL_KEY);
                        if (!StringUtils.isBlank(termsOfUseURLInput) && !termsOfUseURLInput.toLowerCase().contains("javascript:") &&
                            !termsOfUseURLInput.toLowerCase().contains("data:")) {
                                termsOfUseURL = termsOfUseURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(COOKIE_POLICY_URL_KEY)) {
                        // Only assign the `cookiePolicyURL` from response if not empty. Else use the default value.
                        String cookiePolicyURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(COOKIE_POLICY_URL_KEY);
                        if (!StringUtils.isBlank(cookiePolicyURLInput) && !cookiePolicyURLInput.toLowerCase().contains("javascript:") &&
                            !cookiePolicyURLInput.toLowerCase().contains("data:")) {
                                cookiePolicyURL = cookiePolicyURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(SELF_SIGN_UP_URL_KEY)) {
                        String selfSignUpURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(SELF_SIGN_UP_URL_KEY);
                        if (!StringUtils.isBlank(selfSignUpURLInput) && !selfSignUpURLInput.toLowerCase().contains("javascript:") &&
                            !selfSignUpURLInput.toLowerCase().contains("data:")) {
                            selfSignUpOverrideURL = selfSignUpURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(PASSWORD_RECOVERY_URL_KEY)) {
                        String passwordRecoveryURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(PASSWORD_RECOVERY_URL_KEY);
                        if (!StringUtils.isBlank(passwordRecoveryURLInput) && !passwordRecoveryURLInput.toLowerCase().contains("javascript:") &&
                            !passwordRecoveryURLInput.toLowerCase().contains("data:")) {
                            passwordRecoveryOverrideURL = passwordRecoveryURLInput;
                        }
                    }
                }
            }
        }

    } catch (BrandingPreferenceRetrievalClientException e) {
        // Exception is ignored and the variable will use the fallbacks.
        // TODO: Move the duplicated logic to a common place.
        request.setAttribute(BRANDING_PREFERENCE_CACHE_KEY, e);
    } finally {

        // Set fallbacks.
        if (StringUtils.isEmpty(logoURL)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                logoURL = productLogoURL;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                logoURL = productWhiteLogoURL;
            } else {
                logoURL = productLogoURL;
            }
        }

        // Set powered by logo URL.
        if (StringUtils.isEmpty(poweredByLogoURL)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                poweredByLogoURL = productLogoURL;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                poweredByLogoURL = productWhiteLogoURL;
            } else {
                poweredByLogoURL = productLogoURL;
            }
        }

        if (StringUtils.isEmpty(logoAlt)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                logoAlt = productLogoAlt;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                logoAlt = productWhiteLogoAlt;
            } else {
                logoAlt = productLogoAlt;
            }
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

    String promptAccountLinking = "";
    request.getSession().invalidate();
    String queryString = request.getQueryString();
    Map<String, String> idpAuthenticatorMapping = null;
    if (request.getAttribute(Constants.IDP_AUTHENTICATOR_MAP) != null) {
        idpAuthenticatorMapping = (Map<String, String>) request.getAttribute(Constants.IDP_AUTHENTICATOR_MAP);
    }

    String appName = Encode.forUriComponent(request.getParameter("sp"));
    String userType = request.getParameter("utype");
    String consoleURL = application.getInitParameter("ConsoleURL");

    String isHostedExternally = application.getInitParameter("IsHostedExternally");

    if ((StringUtils.equals("WSO2_LOGIN_FOR_CONSOLE",appName)
            && !StringUtils.equals(tenantForTheming, IdentityManagementEndpointConstants.SUPER_TENANT))) {
        idpAuthenticatorMapping.put(ENTERPRISE_USER_LOGIN_ORG,ENTERPRISE_USER_LOGIN_AUTHENTICATOR);
    }


    // Redirect to business user login page for tenanted access.
    boolean enterpriseUserloginEnabled = false;
    if (StringUtils.equals("Console",  appName)
            && !StringUtils.equals(IdentityManagementEndpointConstants.SUPER_TENANT, userTenantDomain)
            && !StringUtils.equals(null, userTenantDomain)
            && !StringUtils.equals(userType, USER_TYPE_ASGARDEO)) {

        try {

            // TODO: need to use the "com.wso2.identity.asgardeo.enterprise.login.EnterpriseLoginRetrievalClient" client to retrieve value.
            // EnterpriseLoginRetrievalClient enterpriseLoginRetrievalClient = new EnterpriseLoginRetrievalClient();
            // enterpriseUserloginEnabled = enterpriseLoginRetrievalClient.isEnterpriseLoginEnabled(userTenantDomain);

            if (CarbonConstants.ENABLE_LEGACY_AUTHZ_RUNTIME != null && CarbonConstants.ENABLE_LEGACY_AUTHZ_RUNTIME) {
                CommonDataRetrievalClient commonDataRetrievalClient = new CommonDataRetrievalClient();
                enterpriseUserloginEnabled = commonDataRetrievalClient.checkBooleanProperty(ENTERPRISE_API_RELATIVE_PATH + userTenantDomain,
                                                                  null, ENTERPRISE_LOGIN_KEY, false, false);
            }
        } catch (Exception e) {
            // Ignored and send the default value.
        }

    }

    if (enterpriseUserloginEnabled) {
        
      out.write("\n");
      out.write("          <script type=\"text/javascript\">\n");
      out.write("            document.location = \"");
      out.print(oauth2AuthorizeURL);
      out.write("?idp=");
      out.print(ENTERPRISE_USER_LOGIN_IDP);
      out.write("\" +\n");
      out.write("                    \"&authenticator=");
      out.print(ENTERPRISE_USER_LOGIN_AUTHENTICATOR);
      out.write("\" +\n");
      out.write("                    \"&fidp=EnterpriseIDP\" + \"&org=");
      out.print(userTenantDomain);
      out.write("\" +\n");
      out.write("                    \"&code_challenge_method=");
      out.print(Encode.forUriComponent(request.getParameter("code_challenge_method")));
      out.write("\" +\n");
      out.write("                    \"&code_challenge=");
      out.print(Encode.forUriComponent(request.getParameter("code_challenge")));
      out.write("\" +\n");
      out.write("                    \"&response_type=");
      out.print(Encode.forUriComponent(request.getParameter("response_type")));
      out.write("\" +\n");
      out.write("                    \"&client_id=");
      out.print(Encode.forUriComponent(request.getParameter("client_id")));
      out.write("\" +\n");
      out.write("                    \"&scope=");
      out.print(Encode.forUriComponent(request.getParameter("scope")));
      out.write("\" +\n");
      out.write("                    \"&redirect_uri=");
      out.print(Encode.forUriComponent(request.getParameter("redirect_uri")));
      out.write("\" +\n");
      out.write("                    \"&response_mode=");
      out.print(Encode.forUriComponent(request.getParameter("response_mode")));
      out.write("\";\n");
      out.write("          </script>\n");
      out.write("        ");

    }

    String errorMessage = "authentication.failed.please.retry";
    String errorCode = "";
    if(request.getParameter(Constants.ERROR_CODE)!=null){
        errorCode = request.getParameter(Constants.ERROR_CODE) ;
    }
    String loginFailed = "false";

    if (Boolean.parseBoolean(request.getParameter(Constants.AUTH_FAILURE))) {
        loginFailed = "true";
        String error = request.getParameter(Constants.AUTH_FAILURE_MSG);
        // Check the error is not null and whether there is a corresponding value in the resource bundle.
        if (!(StringUtils.isBlank(error)) &&
                !error.equalsIgnoreCase(AuthenticationEndpointUtil.i18n(resourceBundle, error))) {
            errorMessage = error;
        }
    }

      out.write('\n');

    boolean hasFederatedOptions = false;
    boolean hasLocalLoginOptions = false;
    boolean isBackChannelBasicAuth = false;
    List<String> localAuthenticatorNames = new ArrayList<String>();
    List<String> registeredLocalAuthenticators = Arrays.asList(
        BACKUP_CODE_AUTHENTICATOR, TOTP_AUTHENTICATOR, EMAIL_OTP_AUTHENTICATOR,
        MAGIC_LINK_AUTHENTICATOR,SMS_OTP_AUTHENTICATOR,OPEN_ID_AUTHENTICATOR,
        IDENTIFIER_EXECUTOR,JWT_BASIC_AUTHENTICATOR,BASIC_AUTHENTICATOR,
        IWA_AUTHENTICATOR,X509_CERTIFICATE_AUTHENTICATOR,FIDO_AUTHENTICATOR,
        PUSH_NOTIFICATION_AUTHENTICATOR
   );


    if (idpAuthenticatorMapping != null && idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME) != null) {
        String authList = idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME);
        if (authList != null) {
            localAuthenticatorNames = Arrays.asList(authList.split(","));
        }
    }

    String multiOptionURIParam = "";
    if (localAuthenticatorNames.size() > 1 || idpAuthenticatorMapping != null && idpAuthenticatorMapping.size() > 1) {
        String baseURL;
        // Check whether authentication endpoint is hosted externally.
        if (Boolean.parseBoolean(isHostedExternally)) {
            String requestURI = request.getRequestURI();
            if (StringUtils.isNotBlank(requestURI)) {
                requestURI = requestURI.startsWith("/") ? requestURI : "/" + requestURI;
                requestURI = requestURI.endsWith("/") ? requestURI.substring(0, requestURI.length() - 1) : requestURI;
            }
            baseURL = requestURI;
        } else {
            try {
                baseURL = ServiceURLBuilder.create().addPath(request.getRequestURI()).build().getRelativePublicURL();
            } catch (URLBuilderException e) {
                request.setAttribute(STATUS, AuthenticationEndpointUtil.i18n(resourceBundle, "internal.error.occurred"));
                request.setAttribute(STATUS_MSG, AuthenticationEndpointUtil.i18n(resourceBundle, "error.when.processing.authentication.request"));
                request.getRequestDispatcher("error.do").forward(request, response);
                return;
            }
        }

        // Build the query string using the parameter map since the query string can contain fewer parameters
        // due to parameter filtering.
        Map<String, String[]> queryParamMap = request.getParameterMap();
        Map<String, Object> authParamMap = ((AuthenticationRequestWrapper) request).getAuthParams();

        // Remove `waitingConfigs` auth param from the query map since `internalWait` prompt related auth params
        // doesn't need to be added to the multi-option uri.
        if (authParamMap != null && !authParamMap.isEmpty() && queryParamMap != null && !queryParamMap.isEmpty()) {
            if (authParamMap.containsKey("waitingConfigs") && authParamMap.containsKey("waitingType")) {
                queryParamMap.remove("waitingConfigs");
            }
        }
        String queryParamString = AuthenticationEndpointUtil.resolveQueryString(queryParamMap);
        multiOptionURIParam = "&multiOptionURI=" + Encode.forUriComponent(baseURL + queryParamString);
    }

    // Since the BACKUP_CODE_AUTHENTICATOR acts as a recovery option, redirects to relevent authenticator
    if (localAuthenticatorNames.size() == 2
        && localAuthenticatorNames.contains(BACKUP_CODE_AUTHENTICATOR)) {
            if (localAuthenticatorNames.contains(TOTP_AUTHENTICATOR)) {
                String directTo = commonauthURL + "?idp=LOCAL&authenticator=" + TOTP_AUTHENTICATOR + "&sessionDataKey="
                    + Encode.forUriComponent(request.getParameter("sessionDataKey")) + multiOptionURIParam;
                response.sendRedirect(directTo);

                return;
            } else if (localAuthenticatorNames.contains(EMAIL_OTP_AUTHENTICATOR)) {
                String directTo = commonauthURL + "?idp=LOCAL&authenticator=" + EMAIL_OTP_AUTHENTICATOR + "&sessionDataKey="
                    + Encode.forUriComponent(request.getParameter("sessionDataKey")) + multiOptionURIParam;
                response.sendRedirect(directTo);

                return;
            } else if (localAuthenticatorNames.contains(SMS_OTP_AUTHENTICATOR)) {
                String directTo = commonauthURL + "?idp=LOCAL&authenticator=" + SMS_OTP_AUTHENTICATOR + "&sessionDataKey="
                    + Encode.forUriComponent(request.getParameter("sessionDataKey")) + multiOptionURIParam;
                response.sendRedirect(directTo);

                return;
            }
    }

      out.write('\n');

    boolean reCaptchaEnabled = false;
    if (request.getParameter("reCaptcha") != null && Boolean.parseBoolean(request.getParameter("reCaptcha"))) {
        reCaptchaEnabled = true;
    }

    boolean reCaptchaResendEnabled = false;
    if (request.getParameter("reCaptchaResend") != null && Boolean.parseBoolean(request.getParameter("reCaptchaResend"))) {
        reCaptchaResendEnabled = true;
    }

      out.write('\n');

    String inputType = request.getParameter("inputType");
    String username = null;
    String usernameIdentifier = null;

    if (isIdentifierFirstLogin(inputType)) {
        if (request.getParameter(Constants.USERNAME) != null) {
            username = request.getParameter(Constants.USERNAME);
            usernameIdentifier = request.getParameter(Constants.USERNAME);
            promptAccountLinking = request.getParameter(Constants.PROMPT_FOR_ACCOUNT_LINKING);
        } else {
            String redirectURL = "error.do";
            response.sendRedirect(redirectURL);
            return;
        }
    }

    if (isLoginHintAvailable(inputType)) {
        if (request.getParameter(Constants.LOGIN_HINT) != null) {
            username = request.getParameter(Constants.LOGIN_HINT);
            usernameIdentifier = request.getParameter(Constants.LOGIN_HINT);
        } else {
            String redirectURL = "error.do";
            response.sendRedirect(redirectURL);
            return;
        }
    }

    // Login context request url.
    String sessionDataKey = Encode.forUriComponent(request.getParameter("sessionDataKey"));
    String authenticators = Encode.forUriComponent(request.getParameter("authenticators"));
    String loginContextRequestUrl = logincontextURL + "?sessionDataKey=" + sessionDataKey + "&application="
            + appName + "&authenticators=" + authenticators;
    if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
        // We need to send the tenant domain as a query param only in non tenant qualified URL mode.
        loginContextRequestUrl += "&tenantDomain=" + tenantDomain;
    }

    String t = request.getParameter("t");
    String ut = request.getParameter("ut");

    if (StringUtils.isNotBlank(t)) {
        loginContextRequestUrl += "&t=" + Encode.forUriComponent(t);
    }
    if (StringUtils.isNotBlank(ut)) {
        loginContextRequestUrl += "&ut=" + Encode.forUriComponent(ut);
    }

    if (StringUtils.isNotBlank(usernameIdentifier)) {
        if (usernameIdentifier.split("@").length == 2
            && (StringUtils.equals(usernameIdentifier.split("@")[1], IdentityManagementEndpointConstants.SUPER_TENANT)
            || StringUtils.equals(usernameIdentifier.split("@")[1], userTenantDomain))) {

            usernameIdentifier = usernameIdentifier.split("@")[0];
        }

        if (usernameIdentifier.split("@").length > 2
            && !StringUtils.equals(usernameIdentifier.split("@")[1], IdentityManagementEndpointConstants.SUPER_TENANT)) {

            usernameIdentifier = usernameIdentifier.split("@")[0] + "@" + usernameIdentifier.split("@")[1];
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    String localeString = userLocale.toLanguageTag();

    if (!StringUtils.isBlank(selfSignUpOverrideURL)) {
        if (selfSignUpOverrideURL.contains("?")) {
            selfSignUpOverrideURL = selfSignUpOverrideURL.concat("&ui_locales=" + localeString);
        } else {
            selfSignUpOverrideURL = selfSignUpOverrideURL.concat("?ui_locales=" + localeString);
        }
    }

    if (!StringUtils.isBlank(passwordRecoveryOverrideURL)) {
        if (passwordRecoveryOverrideURL.contains("?")) {
            passwordRecoveryOverrideURL = passwordRecoveryOverrideURL.concat("&ui_locales=" + localeString);
        } else {
            passwordRecoveryOverrideURL = passwordRecoveryOverrideURL.concat("?ui_locales=" + localeString);
        }
    }

      out.write('\n');
      out.write('\n');

    String identityMgtEndpointContextURL = application.getInitParameter("IdentityManagementEndpointContextURL");
    String accountRegistrationEndpointContextURL = application.getInitParameter("AccountRegisterEndpointURL");
    String srURLEncodedURL = "";
    Boolean isSelfSignUpEnabledInTenant;
    Boolean isUsernameRecoveryEnabledInTenant;
    Boolean isPasswordRecoveryEnabledInTenant;

    // Check whether authentication endpoint is hosted externally.
    if (Boolean.parseBoolean(isHostedExternally)) {
        isSelfSignUpEnabledInTenant = false;
        isUsernameRecoveryEnabledInTenant = false;
        isPasswordRecoveryEnabledInTenant = false;
    } else {
        try {
            PreferenceRetrievalClient preferenceRetrievalClient = new PreferenceRetrievalClient();
            isSelfSignUpEnabledInTenant = preferenceRetrievalClient.checkSelfRegistration(userTenant);
            if (isSelfSignUpEnabledInTenant && StringUtils.equals("Console", appName)) {
                isSelfSignUpEnabledInTenant = false;
            }
            isUsernameRecoveryEnabledInTenant = preferenceRetrievalClient.checkUsernameRecovery(userTenant);
            isPasswordRecoveryEnabledInTenant = preferenceRetrievalClient.checkPasswordRecovery(userTenant);
        } catch (PreferenceRetrievalClientException e) {
            request.setAttribute("error", true);
            request.setAttribute("errorMsg", AuthenticationEndpointUtil
                            .i18n(resourceBundle, "something.went.wrong.contact.admin"));
            IdentityManagementEndpointUtil.addErrorInformation(request, e);
            request.getRequestDispatcher("error.jsp").forward(request, response);
            return;
        }
    }

    if (isSelfSignUpEnabledInTenant && isSelfSignUpEnabledInTenantPreferences) {
        if (StringUtils.isBlank(identityMgtEndpointContextURL)) {
            try {
                identityMgtEndpointContextURL = ServiceURLBuilder.create().addPath(ACCOUNT_RECOVERY_ENDPOINT).build()
                        .getAbsolutePublicURL();
            } catch (URLBuilderException e) {
                request.setAttribute(STATUS, AuthenticationEndpointUtil.i18n(resourceBundle, CONFIGURATION_ERROR));
                request.setAttribute(STATUS_MSG, AuthenticationEndpointUtil
                        .i18n(resourceBundle, ERROR_WHILE_BUILDING_THE_ACCOUNT_RECOVERY_ENDPOINT_URL));
                request.getRequestDispatcher("error.do").forward(request, response);
                return;
            }
        }
        if (StringUtils.isBlank(accountRegistrationEndpointContextURL)
                || !(StringUtils.equals(tenantForTheming, IdentityManagementEndpointConstants.SUPER_TENANT))) {
            accountRegistrationEndpointContextURL = identityMgtEndpointContextURL + ACCOUNT_RECOVERY_ENDPOINT_REGISTER;
        }
        // For self sign-up build the normal callback URL.
        String srURI;

        if (Boolean.parseBoolean(isHostedExternally)) {
            srURI = application.getInitParameter("IdentityManagementEndpointLoginURL");
        } else {
            srURI = ServiceURLBuilder.create().addPath(AUTHENTICATION_ENDPOINT_LOGIN).build().getAbsolutePublicURL();
        }
        String srprmstr = URLDecoder.decode(((String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING)), UTF_8);
        String srURLWithoutEncoding = srURI + "?" + srprmstr;
        srURLEncodedURL= URLEncoder.encode(srURLWithoutEncoding, UTF_8);
    }

      out.write('\n');
      out.write('\n');

    String insightsAppIdentifier = Encode.forJavaScriptBlock(request.getParameter("client_id"));
    String insightsTenantIdentifier = userTenant;

    if (!Boolean.parseBoolean(request.getParameter(IS_SAAS_APP))) {
        insightsAppIdentifier = "business-app";
    }
    else if (!StringUtils.isEmpty(insightsAppIdentifier)) {
        insightsAppIdentifier = StringUtils.lowerCase(insightsAppIdentifier).replace("_", "-");
    }

    String restrictedBrowsersForGOT = "";
    if (StringUtils.isNotBlank(EndpointConfigManager.getGoogleOneTapRestrictedBrowsers())) {
        restrictedBrowsersForGOT = EndpointConfigManager.getGoogleOneTapRestrictedBrowsers();
    }

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!doctype html>\n");
      out.write("<html lang=\"en-US\">\n");
      out.write("<head>\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        File headerFile = new File(getServletContext().getRealPath("extensions/header.jsp"));
        if (headerFile.exists()) {
    
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        File analyticsFile = new File(getServletContext().getRealPath("extensions/analytics.jsp"));
        if (analyticsFile.exists()) {
    
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/analytics.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/analytics.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    ");

        boolean genericReCaptchaEnabled = CaptchaUtil.isGenericRecaptchaEnabledAuthenticator("IdentifierExecutor");
        if (reCaptchaEnabled || reCaptchaResendEnabled || genericReCaptchaEnabled) {
            String reCaptchaAPI = CaptchaUtil.reCaptchaAPIURL();
    
      out.write("\n");
      out.write("        <script src='");
      out.print((reCaptchaAPI));
      out.write("'></script>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("</head>\n");
      out.write("<body class=\"login-portal layout authentication-portal-layout\" onload=\"checkSessionKey()\">\n");
      out.write("    ");
 request.setAttribute("pageName", "sign-in"); 
      out.write("\n");
      out.write("    ");
 if (new File(getServletContext().getRealPath("extensions/timeout.jsp")).exists()) { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/timeout.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "util/timeout.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    ");
      //  layout:main
      org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler _jspx_th_layout_005fmain_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler) _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.get(org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler.class);
      _jspx_th_layout_005fmain_005f0.setPageContext(_jspx_page_context);
      _jspx_th_layout_005fmain_005f0.setParent(null);
      // /login.jsp(480,4) name = layoutName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_layout_005fmain_005f0.setLayoutName( layout );
      // /login.jsp(480,4) name = layoutFileRelativePath type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_layout_005fmain_005f0.setLayoutFileRelativePath( layoutFileRelativePath );
      // /login.jsp(480,4) name = data type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_layout_005fmain_005f0.setData( layoutData );
      int _jspx_eval_layout_005fmain_005f0 = _jspx_th_layout_005fmain_005f0.doStartTag();
      if (_jspx_eval_layout_005fmain_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("        ");
          //  layout:component
          org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
          _jspx_th_layout_005fcomponent_005f0.setPageContext(_jspx_page_context);
          _jspx_th_layout_005fcomponent_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
          // /login.jsp(481,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_layout_005fcomponent_005f0.setComponentName("ProductHeader");
          int _jspx_eval_layout_005fcomponent_005f0 = _jspx_th_layout_005fcomponent_005f0.doStartTag();
          if (_jspx_eval_layout_005fcomponent_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("            ");

                if (StringUtils.equals(tenantForTheming, IdentityManagementEndpointConstants.SUPER_TENANT) &&
                StringUtils.equals("true", promptAccountLinking)) {
            
              out.write("\n");
              out.write("                    <div class=\"theme-icon inline auto transparent product-logo portal-logo\">\n");
              out.write("                        <img src=\"libs/themes/default/assets/images/illustrations/login-illustration.svg\" alt=\"Logo\" />\n");
              out.write("                    </div>\n");
              out.write("            ");
 } 
              out.write("\n");
              out.write("            ");
              out.write("\n");
              out.write("            ");

                File productTitleFile = new File(getServletContext().getRealPath("extensions/product-title.jsp"));
                if (productTitleFile.exists()) {
            
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-title.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } else { 
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-title.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } 
              out.write("\n");
              out.write("        ");
              int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f0.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_layout_005fcomponent_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f0);
          out.write("\n");
          out.write("        ");
          //  layout:component
          org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f1 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
          _jspx_th_layout_005fcomponent_005f1.setPageContext(_jspx_page_context);
          _jspx_th_layout_005fcomponent_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
          // /login.jsp(500,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_layout_005fcomponent_005f1.setComponentName("MainSection");
          int _jspx_eval_layout_005fcomponent_005f1 = _jspx_th_layout_005fcomponent_005f1.doStartTag();
          if (_jspx_eval_layout_005fcomponent_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("            <div class=\"ui segment segment-layout\">\n");
              out.write("                <h3 class=\"ui header\">\n");
              out.write("                    ");
  if (Boolean.parseBoolean(promptAccountLinking)) { 
              out.write("\n");
              out.write("                        ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "account.linking") );
              out.write("\n");
              out.write("                    ");
 } else if (isIdentifierFirstLogin(inputType) || isLoginHintAvailable(inputType)) { 
              out.write("\n");
              out.write("                        ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "welcome") );
              out.write("\n");
              out.write("                    ");
 } else { 
              out.write("\n");
              out.write("                        ");
              out.print( i18n(resourceBundle, customText, "login.heading") );
              out.write("\n");
              out.write("                    ");
 } 
              out.write("\n");
              out.write("                </h3>\n");
              out.write("\n");
              out.write("                ");
  if (Boolean.parseBoolean(promptAccountLinking)) { 
              out.write("\n");
              out.write("                    <p class=\"account-linking ui-label\">\n");
              out.write("                        ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "account.linking.proceed") );
              out.write("\n");
              out.write("                    </p>\n");
              out.write("                ");
 } 
              out.write("\n");
              out.write("\n");
              out.write("                ");
 if (isIdentifierFirstLogin(inputType) || isLoginHintAvailable(inputType)) {

                    // Remove userstore domain from the username.
                    String[] usernameSplitItems = usernameIdentifier.split("/");
                    String sanitizeUserName = usernameSplitItems[usernameSplitItems.length - 1];
                
              out.write("\n");
              out.write("                <div class=\"identifier-container\">\n");
              out.write("                    <img\n");
              out.write("                        class=\"ui image mr-1\"\n");
              out.write("                        alt=\"Username Icon\"\n");
              out.write("                        role=\"presentation\"\n");
              out.write("                        src=\"libs/themes/default/assets/images/user.svg\">\n");
              out.write("                    <span id=\"user-name-label\"\n");
              out.write("                            class=\"ellipsis\"\n");
              out.write("                            data-position=\"top left\"\n");
              out.write("                            data-variation=\"inverted\"\n");
              out.write("                            data-content=\"");
              out.print(sanitizeUserName);
              out.write("\">\n");
              out.write("                        ");
              out.print(sanitizeUserName);
              out.write("\n");
              out.write("                    </span>\n");
              out.write("                </div>\n");
              out.write("                ");
 } 
              out.write("\n");
              out.write("\n");
              out.write("                <div class=\"segment-form\">\n");
              out.write("                    ");

                        if (localAuthenticatorNames.size() > 0) {
                            if (localAuthenticatorNames.contains(OPEN_ID_AUTHENTICATOR)) {
                                hasLocalLoginOptions = true;
                    
              out.write("\n");
              out.write("                        ");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("<form action=\"");
              out.print(commonauthURL);
              out.write("\" method=\"post\" id=\"loginForm\" class=\"segment-form\">\n");
              out.write("    ");

        loginFailed = request.getParameter("loginFailed");
        if (loginFailed != null) {

    
              out.write("\n");
              out.write("    <div class=\"ui visible negative message\">\n");
              out.write("         ");
              out.print(AuthenticationEndpointUtil.i18nBase64(resourceBundle,request.getParameter("errorMessage")));
              out.write("\n");
              out.write("    </div>\n");
              out.write("    ");
 } 
              out.write("\n");
              out.write("\n");
              out.write("    <div class=\"field\">\n");
              out.write("        <input type=\"text\" id=\"claimed_id\" name=\"claimed_id\" size='30'\n");
              out.write("               placeholder=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "openid"));
              out.write("\"/>\n");
              out.write("        <input type=\"hidden\" name=\"sessionDataKey\"\n");
              out.write("               value='");
              out.print(Encode.forHtmlAttribute(request.getParameter("sessionDataKey")));
              out.write("'/>\n");
              out.write("    </div>\n");
              out.write("\n");
              out.write("    <div class=\"field\">\n");
              out.write("        <div class=\"ui checkbox\">\n");
              out.write("            <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\">\n");
              out.write("            <label>");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.me"));
              out.write("</label>\n");
              out.write("        </div>\n");
              out.write("    </div>\n");
              out.write("\n");
              out.write("    <div class=\"buttons right aligned\">\n");
              out.write("        <button\n");
              out.write("            class=\"ui primary large button\"\n");
              out.write("            type=\"submit\">\n");
              out.write("            ");
              out.print( i18n(resourceBundle, customText, "login.button") );
              out.write("\n");
              out.write("        </button>\n");
              out.write("    </div>\n");
              out.write("</form>\n");
              out.write("\n");
              out.write("<script>\n");
              out.write("\n");
              out.write("    // Handle form submission preventing double submission.\n");
              out.write("    $(document).ready(function(){\n");
              out.write("        $.fn.preventDoubleSubmission = function() {\n");
              out.write("            $(this).on('submit',function(e){\n");
              out.write("                var $form = $(this);\n");
              out.write("                if ($form.data('submitted') === true) {\n");
              out.write("                    // Previously submitted - don't submit again.\n");
              out.write("                    e.preventDefault();\n");
              out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
              out.write("                } else {\n");
              out.write("                    // Mark it so that the next submit can be ignored.\n");
              out.write("                    $form.data('submitted', true);\n");
              out.write("                }\n");
              out.write("            });\n");
              out.write("\n");
              out.write("            return this;\n");
              out.write("        };\n");
              out.write("        $('#loginForm').preventDoubleSubmission();\n");
              out.write("    });\n");
              out.write("\n");
              out.write("</script>\n");
              out.write("\n");
              out.write("                    ");

                        } else if (localAuthenticatorNames.contains(IDENTIFIER_EXECUTOR)) {
                            hasLocalLoginOptions = true;
                    
              out.write("\n");
              out.write("                        ");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write('\n');
              out.write('\n');

    String loginFormActionURL;

    if (isBackChannelBasicAuth) {
        loginFormActionURL = "authenticate.do";
        if (StringUtils.isNotBlank(queryString)) {
            loginFormActionURL = loginFormActionURL + "?" + queryString;
        }
    } else {
        String type = request.getParameter("type");
        if ("samlsso".equals(type)) {
            loginFormActionURL = samlssoURL;
        } else {
            loginFormActionURL = commonauthURL;
        }
    }

              out.write('\n');
              out.write('\n');
              out.write('\n');
              out.write('\n');
              out.write('\n');

    String emailUsernameEnable = application.getInitParameter("EnableEmailUserName");
    Boolean isEmailUsernameEnabled = false;
    String usernameLabel = "username";
    String usernamePlaceHolder = "enter.your.username";

    Boolean isMultiAttributeLoginEnabledInTenant;
    String allowedAttributes;

    if (StringUtils.isNotBlank(emailUsernameEnable)) {
        isEmailUsernameEnabled = Boolean.valueOf(emailUsernameEnable);
    } else {
        isEmailUsernameEnabled = isEmailUsernameEnabled();
    }

    try {
        PreferenceRetrievalClient preferenceRetrievalClient = new PreferenceRetrievalClient();
        isMultiAttributeLoginEnabledInTenant = preferenceRetrievalClient.checkMultiAttributeLogin(tenantDomain);
        allowedAttributes = preferenceRetrievalClient.checkMultiAttributeLoginProperty(tenantDomain);
    } catch (PreferenceRetrievalClientException e) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", AuthenticationEndpointUtil
                .i18n(resourceBundle, "something.went.wrong.contact.admin"));
        IdentityManagementEndpointUtil.addErrorInformation(request, e);
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }

    if (isEmailUsernameEnabled == true) {
        usernameLabel = "email.username";
    } else if (isMultiAttributeLoginEnabledInTenant) {
        usernameLabel = getUsernameLabel(resourceBundle, allowedAttributes);
        usernamePlaceHolder = "enter.your.identifier";
    }

              out.write('\n');
              out.write('\n');

    final String IS_SAAS_APP = "isSaaSApp";

    String clientId = Encode.forJavaScriptBlock(request.getParameter("client_id"));
    String sp = Encode.forJava(request.getParameter("sp"));
    String spId = "";
    boolean isFederatedOptionsAvailable = false;
    boolean isMagicLink = false;
    JSONArray configuredAuthenticators = null;
    JSONArray federatedAuthenticators = new JSONArray();
    JSONArray localAuthenticators = new JSONArray();

    ApplicationDataRetrievalClient applicationDataRetrievalClient = new ApplicationDataRetrievalClient();
    try {
        // Retrieve application Id.
        spId = applicationDataRetrievalClient.getApplicationID(tenantDomain,sp);
    } catch (Exception e) {
        // Nothing happens.
    }

    // Get authenticators configured for an application.
    if (!StringUtils.equalsIgnoreCase(spId,"")) {
        try {
            ConfiguredAuthenticatorsRetrievalClient configuredAuthenticatorsRetrievalClient = new ConfiguredAuthenticatorsRetrievalClient();
            configuredAuthenticators = configuredAuthenticatorsRetrievalClient.getConfiguredAuthenticators(spId, tenantDomain);
        } catch (Exception e) {
            configuredAuthenticators = null;
        }
    }
    if (configuredAuthenticators != null) {
        for ( int index = 0; index < configuredAuthenticators.length(); index++) {
            JSONObject step = (JSONObject)configuredAuthenticators.get(index);
            int stepId = (int)step.get("stepId");
            if (stepId == 1) {
                federatedAuthenticators = (JSONArray)step.get("federatedAuthenticators");
                if (federatedAuthenticators.length() > 0) {
                    isFederatedOptionsAvailable = true;
                }
            }
            if (stepId == 2) {
                localAuthenticators = (JSONArray)step.get("localAuthenticators");
                for (int i = 0; i < localAuthenticators.length(); i++) {
                    JSONObject localAuth = (JSONObject)localAuthenticators.get(i);
                    if (StringUtils.equalsIgnoreCase(MAGIC_LINK_AUTHENTICATOR, (String)localAuth.get("type"))) {
                        isMagicLink = true;
                    }
                }
            }
        }
    }

              out.write("\n");
              out.write("\n");
              out.write("<script>\n");
              out.write("\n");
              out.write("    function onCompleted() {\n");
              out.write("        $(\"#identifierForm\").submit();\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    var insightsAppIdentifier = \"");
              out.print(clientId);
              out.write("\";\n");
              out.write("    var insightsTenantIdentifier = \"");
              out.print(userTenant);
              out.write("\";\n");
              out.write("\n");
              out.write("    if (insightsAppIdentifier == \"MY_ACCOUNT\") {\n");
              out.write("        insightsAppIdentifier = \"my-account\";\n");
              out.write("    } else if (insightsAppIdentifier == \"CONSOLE\") {\n");
              out.write("        insightsAppIdentifier = \"console\";\n");
              out.write("    } else if (insightsTenantIdentifier !== \"");
              out.print(org.wso2.carbon.utils.multitenancy.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
              out.write("\") {\n");
              out.write("        insightsAppIdentifier = \"business-app\";\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    $(document).ready(function(){\n");
              out.write("        var usernameInput = $(\"#usernameUserInput\");\n");
              out.write("\n");
              out.write("        // Hides invalid form error message on user input.\n");
              out.write("        if (usernameInput) {\n");
              out.write("            usernameInput.on(\"input\", function (e) {\n");
              out.write("                hideUsernameInvalidMessage();\n");
              out.write("            });\n");
              out.write("        }\n");
              out.write("\n");
              out.write("        $.fn.preventDoubleSubmission = function () {\n");
              out.write("            $(this).on(\"submit\", function (e) {\n");
              out.write("                var $form = $(this);\n");
              out.write("                e.preventDefault();\n");
              out.write("                var userName = document.getElementById(\"username\");\n");
              out.write("                var usernameUserInput = document.getElementById(\"usernameUserInput\");\n");
              out.write("\n");
              out.write("                if (usernameUserInput) {\n");
              out.write("                    var sanitizedUsername = usernameUserInput.value.trim();\n");
              out.write("\n");
              out.write("                    if (sanitizedUsername.length <= 0) {\n");
              out.write("                        showUsernameInvalidMessage();\n");
              out.write("                    }\n");
              out.write("\n");
              out.write("                    userName.value = sanitizedUsername.toLowerCase();\n");
              out.write("                }\n");
              out.write("\n");
              out.write("                var genericReCaptchaEnabled = \"");
              out.print(genericReCaptchaEnabled);
              out.write("\";\n");
              out.write("                if (genericReCaptchaEnabled === \"true\") {\n");
              out.write("                    if (!grecaptcha.getResponse()) {\n");
              out.write("                        grecaptcha.execute();\n");
              out.write("                        return;\n");
              out.write("                    }\n");
              out.write("                }\n");
              out.write("\n");
              out.write("                if (username.value) {\n");
              out.write("                    trackEvent(\"authentication-portal-identifierauth-click-continue\", {\n");
              out.write("                        \"app\": insightsAppIdentifier,\n");
              out.write("                        \"tenant\": insightsTenantIdentifier !== \"null\" ? insightsTenantIdentifier : \"\"\n");
              out.write("                    });\n");
              out.write("                    var $form = $(this);\n");
              out.write("\n");
              out.write("                    // store the username in session storage\n");
              out.write("                    sessionStorage.setItem(\"username\", username.value);\n");
              out.write("\n");
              out.write("                    $.ajax({\n");
              out.write("                        type: \"GET\",\n");
              out.write("                        url: \"");
              out.print( Encode.forJavaScriptBlock(loginContextRequestUrl) );
              out.write("\",\n");
              out.write("                        xhrFields: { withCredentials: true },\n");
              out.write("                        success: function (data) {\n");
              out.write("                            if (data && data.status === \"redirect\" && data.redirectUrl && data.redirectUrl.length > 0) {\n");
              out.write("                                window.location.href = data.redirectUrl;\n");
              out.write("                            } else if ($form.data('submitted') !== true) {\n");
              out.write("                                $form.data('submitted', true);\n");
              out.write("                                document.getElementById(\"identifierForm\").submit();\n");
              out.write("                            } else {\n");
              out.write("                                console.warn(\"Prevented a possible double submit event.\");\n");
              out.write("                            }\n");
              out.write("                        },\n");
              out.write("                        cache: false\n");
              out.write("                    });\n");
              out.write("                }\n");
              out.write("            });\n");
              out.write("            return this;\n");
              out.write("        };\n");
              out.write("        $('#identifierForm').preventDoubleSubmission();\n");
              out.write("    });\n");
              out.write("\n");
              out.write("    trackEvent(\"page-visit-authentication-portal-identifierauth\", {\n");
              out.write("        \"app\": insightsAppIdentifier,\n");
              out.write("        \"tenant\": insightsTenantIdentifier !== \"null\" ? insightsTenantIdentifier : \"\"\n");
              out.write("    });\n");
              out.write("\n");
              out.write("    // Function to show error message when username is empty.\n");
              out.write("    function showUsernameInvalidMessage() {\n");
              out.write("        var usernameError = $(\"#usernameError\");\n");
              out.write("        usernameError.show();\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    // Function to hide error message when username is empty.\n");
              out.write("    function hideUsernameInvalidMessage() {\n");
              out.write("        var usernameError = $(\"#usernameError\");\n");
              out.write("        usernameError.hide();\n");
              out.write("    }\n");
              out.write("\n");
              out.write("</script>\n");
              out.write("\n");
              out.write("<form class=\"ui large form\" action=\"");
              out.print( Encode.forHtmlAttribute(loginFormActionURL) );
              out.write("\" method=\"post\" id=\"identifierForm\">\n");
              out.write("    ");

        if (loginFormActionURL.equals(samlssoURL) || loginFormActionURL.equals(oauth2AuthorizeURL)) {
    
              out.write("\n");
              out.write("    <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");
              out.write("    ");

        }
    
              out.write("\n");
              out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
              out.write("\n");
              out.write("    <div class=\"ui visible negative message\" id=\"error-msg\">\n");
              out.write("        ");
              out.print( AuthenticationEndpointUtil.i18n(resourceBundle, Encode.forJava(errorMessage)) );
              out.write("\n");
              out.write("    </div>\n");
              out.write("    ");
 } else if ((Boolean.TRUE.toString()).equals(Encode.forJava(request.getParameter("authz_failure")))) { 
              out.write("\n");
              out.write("    <div class=\"ui visible negative message\" id=\"error-msg\">\n");
              out.write("        ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "unauthorized.to.login"));
              out.write("\n");
              out.write("    </div>\n");
              out.write("    ");
 } else { 
              out.write("\n");
              out.write("        <div class=\"ui visible negative message\" style=\"display: none;\" id=\"error-msg\"></div>\n");
              out.write("    ");
 } 
              out.write("\n");
              out.write("\n");
              out.write("    <div class=\"field\">\n");
              out.write("     ");
 if (StringUtils.equals(tenantForTheming, IdentityManagementEndpointConstants.SUPER_TENANT) &&
        Boolean.parseBoolean(request.getParameter(IS_SAAS_APP))) { 
              out.write("\n");
              out.write("        \n");
              out.write("            <label>");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "email"));
              out.write("</label>\n");
              out.write("            <div class=\"ui fluid left icon input\">\n");
              out.write("                <input\n");
              out.write("                    type=\"text\"\n");
              out.write("                    id=\"usernameUserInput\"\n");
              out.write("                    value=\"\"\n");
              out.write("                    name=\"usernameUserInput\"\n");
              out.write("                    placeholder=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "enter.your.email"));
              out.write("\"\n");
              out.write("                    required />\n");
              out.write("                <i aria-hidden=\"true\" class=\"envelope outline icon\"></i>\n");
              out.write("            </div>\n");
              out.write("            <div class=\"mt-1\" id=\"usernameError\" style=\"display: none;\">\n");
              out.write("                <i class=\"red exclamation circle fitted icon\"></i>\n");
              out.write("                <span class=\"validation-error-message\" id=\"usernameErrorText\">\n");
              out.write("                    ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username.cannot.be.empty"));
              out.write("\n");
              out.write("                </span>\n");
              out.write("            </div>\n");
              out.write("            <input id=\"username\" name=\"username\" type=\"hidden\" value=\"\">\n");
              out.write("            <input id=\"authType\" name=\"authType\" type=\"hidden\" value=\"idf\">\n");
              out.write("        ");
 } else {
            if (isMultiAttributeLoginEnabledInTenant) { 
              out.write("\n");
              out.write("            <label>");
              out.print(usernameLabel );
              out.write("</label>\n");
              out.write("            ");
 } else {
              out.write("\n");
              out.write("            <label>");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, usernameLabel));
              out.write("</label>\n");
              out.write("        ");
 } 
              out.write("\n");
              out.write("        <div class=\"ui fluid left icon input\">\n");
              out.write("            <input\n");
              out.write("                type=\"text\"\n");
              out.write("                id=\"usernameUserInput\"\n");
              out.write("                value=\"\"\n");
              out.write("                name=\"usernameUserInput\"\n");
              out.write("                placeholder=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, usernamePlaceHolder));
              out.write("\"\n");
              out.write("                required\n");
              out.write("            />\n");
              out.write("            <i aria-hidden=\"true\" class=\"user outline icon\"></i>\n");
              out.write("        </div>\n");
              out.write("        <div class=\"mt-1\" id=\"usernameError\" style=\"display: none;\">\n");
              out.write("            <i class=\"red exclamation circle fitted icon\"></i>\n");
              out.write("            <span class=\"validation-error-message\" id=\"usernameErrorText\">\n");
              out.write("                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username.cannot.be.empty"));
              out.write("\n");
              out.write("            </span>\n");
              out.write("        </div>\n");
              out.write("        <input id=\"username\" name=\"username\" type=\"hidden\" value=\"\">\n");
              out.write("        <input id=\"authType\" name=\"authType\" type=\"hidden\" value=\"idf\">\n");
              out.write("        <input id=\"multiOptionURI\" type=\"hidden\" name=\"multiOptionURI\"\n");
              out.write("            value='");
              out.print(Encode.forHtmlAttribute(request.getParameter("multiOptionURI")));
              out.write("' />\n");
              out.write("    ");
 } 
              out.write("\n");
              out.write("    </div>\n");
              out.write("    ");

    if (genericReCaptchaEnabled) { 
        String reCaptchaKey = CaptchaUtil.reCaptchaSiteKey();
    
              out.write("\n");
              out.write("        <div class=\"field\">\n");
              out.write("            <div class=\"g-recaptcha\"\n");
              out.write("                data-size=\"invisible\"\n");
              out.write("                data-callback=\"onCompleted\"\n");
              out.write("                data-action=\"login\"\n");
              out.write("                data-sitekey=\"");
              out.print(Encode.forHtmlContent(reCaptchaKey));
              out.write("\">\n");
              out.write("            </div>\n");
              out.write("        </div>\n");
              out.write("    ");
 } 
              out.write("\n");
              out.write("\n");
              out.write("    <input type=\"hidden\" name=\"sessionDataKey\" value='");
              out.print(Encode.forHtmlAttribute
        (request.getParameter("sessionDataKey")));
              out.write("'/>\n");
              out.write("\n");
              out.write("    <div class=\"mt-4\">\n");
              out.write("        <div class=\"buttons\">\n");
              out.write("            <button type=\"submit\" class=\"ui primary fluid large button\" role=\"button\" data-testid=\"identifier-auth-continue-button\">\n");
              out.write("                ");
              out.print(StringEscapeUtils.escapeHtml4(AuthenticationEndpointUtil.i18n(resourceBundle, "continue")));
              out.write("\n");
              out.write("            </button>\n");
              out.write("        </div>\n");
              out.write("    </div>\n");
              out.write("    <div class=\"ui divider hidden\"></div>\n");
              out.write("    <div class=\"align-center\">\n");
              out.write("        ");

            String multiOptionURI = Encode.forJava(request.getParameter("multiOptionURI"));
            if (multiOptionURI != null && AuthenticationEndpointUtil.isValidMultiOptionURI(multiOptionURI) &&
            isMultiAuthAvailable(multiOptionURI)) {
        
              out.write("\n");
              out.write("            <a class=\"ui primary basic button link-button\" id=\"goBackLink\"\n");
              out.write("            href='");
              out.print(Encode.forHtmlAttribute(multiOptionURI));
              out.write("'>\n");
              out.write("                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "choose.other.option"));
              out.write("\n");
              out.write("            </a>\n");
              out.write("        ");

            }
        
              out.write("\n");
              out.write("    </div>\n");
              out.write("</form>\n");

if (!StringUtils.equals("CONSOLE",clientId)
        && !StringUtils.equals("MY_ACCOUNT",clientId) && !isMagicLink &&
        isSelfSignUpEnabledInTenant && isSelfSignUpEnabledInTenantPreferences) {
        String urlParameters = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING);

              out.write("\n");
              out.write("    <div class=\"mt-4 mb-4\">\n");
              out.write("        <div class=\"mt-3 external-link-container text-small\">\n");
              out.write("            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "dont.have.an.account"));
              out.write("\n");
              out.write("            <a\n");
              out.write("                ");
 if(StringUtils.isNotBlank(selfSignUpOverrideURL)) { 
              out.write("\n");
              out.write("                href=\"");
              out.print(i18nLink(userLocale, selfSignUpOverrideURL));
              out.write("\"\n");
              out.write("                ");
 } else { 
              out.write("\n");
              out.write("                href=\"");
              out.print(StringEscapeUtils.escapeHtml4(getRegistrationUrl(accountRegistrationEndpointContextURL, srURLEncodedURL, urlParameters)));
              out.write("\"\n");
              out.write("                ");
 } 
              out.write("\n");
              out.write("                target=\"_self\"\n");
              out.write("                class=\"clickable-link\"\n");
              out.write("                rel=\"noopener noreferrer\"\n");
              out.write("                id=\"registerLink\"\n");
              out.write("                tabindex=\"4\"\n");
              out.write("                data-testid=\"login-page-create-account-button\"\n");
              out.write("                style=\"cursor: pointer;\"\n");
              out.write("            >\n");
              out.write("                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "register"));
              out.write("\n");
              out.write("            </a>\n");
              out.write("        </div>\n");
              out.write("    </div>\n");

}

              out.write('\n');
              out.write("\n");
              out.write("                    ");

                        } else if (localAuthenticatorNames.contains(JWT_BASIC_AUTHENTICATOR) ||
                            localAuthenticatorNames.contains(BASIC_AUTHENTICATOR)) {
                            hasLocalLoginOptions = true;
                            boolean includeBasicAuth = true;
                            if (localAuthenticatorNames.contains(JWT_BASIC_AUTHENTICATOR)) {
                                if (Boolean.parseBoolean(application.getInitParameter(ENABLE_AUTHENTICATION_WITH_REST_API))) {
                                    isBackChannelBasicAuth = true;
                                } else {
                                    String redirectURL = "error.do?" + STATUS + "=" + CONFIGURATION_ERROR + "&" +
                                            STATUS_MSG + "=" + AUTHENTICATION_MECHANISM_NOT_CONFIGURED;
                                    response.sendRedirect(redirectURL);
                                    return;
                                }
                            } else if (localAuthenticatorNames.contains(BASIC_AUTHENTICATOR)) {
                                isBackChannelBasicAuth = false;
                            if (TenantDataManager.isTenantListEnabled() && Boolean.parseBoolean(request.getParameter(IS_SAAS_APP))) {
                                includeBasicAuth = false;
                    
              out.write("\n");
              out.write("                                ");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("<form class=\"ui large form\" action=\"");
              out.print(commonauthURL);
              out.write("\" method=\"post\" id=\"loginForm\">\n");
              out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
              out.write("\n");
              out.write("    <div class=\"ui visible negative message\" id=\"error-msg\">\n");
              out.write("        ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username.or.password.invalid"));
              out.write("\n");
              out.write("    </div>\n");
              out.write("    ");
 } 
              out.write("\n");
              out.write("\n");
              out.write("    <div class=\"field\">\n");
              out.write("        <select class=\"ui fluid dropdown\" id='tenantList' name=\"tenantList\" size='1'>\n");
              out.write("            <option value=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "select.tenant.dropdown.display.name"));
              out.write("\">\n");
              out.write("                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "select.tenant.dropdown.display.name"));
              out.write("\n");
              out.write("            </option>\n");
              out.write("            <option value=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "super.tenant"));
              out.write("\">\n");
              out.write("                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "super.tenant.display.name"));
              out.write("\n");
              out.write("            </option>\n");
              out.write("            ");

                List<String> tenantDomainsList = TenantDataManager.getAllActiveTenantDomains();
                if (!tenantDomainsList.isEmpty()) {
                    for (String tenant : tenantDomainsList) {
            
              out.write("\n");
              out.write("            <option value=\"");
              out.print(Encode.forHtmlAttribute(tenant));
              out.write('"');
              out.write('>');
              out.print(Encode.forHtmlContent(tenant));
              out.write("</option>\n");
              out.write("            ");

                    }
                }
            
              out.write("\n");
              out.write("        </select>\n");
              out.write("    </div>\n");
              out.write("\n");
              out.write("    <input type=\"hidden\" id='username' name='username'/>\n");
              out.write("\n");
              out.write("    <div class=\"field\">\n");
              out.write("        <div class=\"ui fluid left icon input\">\n");
              out.write("            <input\n");
              out.write("                type=\"text\"\n");
              out.write("                id=\"username_tmp\"\n");
              out.write("                value=\"\"\n");
              out.write("                name=\"username_tmp\"\n");
              out.write("                tabindex=\"0\"\n");
              out.write("                placeholder=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username"));
              out.write("\"\n");
              out.write("                required>\n");
              out.write("            <i aria-hidden=\"true\" class=\"user icon\"></i>\n");
              out.write("        </div>\n");
              out.write("    </div>\n");
              out.write("\n");
              out.write("    <div class=\"field\">\n");
              out.write("        <div class=\"ui fluid left icon input\">\n");
              out.write("            <input\n");
              out.write("                type=\"password\"\n");
              out.write("                id=\"password\"\n");
              out.write("                name=\"password\"\n");
              out.write("                value=\"\"\n");
              out.write("                autocomplete=\"off\"\n");
              out.write("                placeholder=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "password"));
              out.write("\">\n");
              out.write("            <i aria-hidden=\"true\" class=\"lock icon\"></i>\n");
              out.write("        </div>\n");
              out.write("    </div>\n");
              out.write("\n");
              out.write("    <input type=\"hidden\" name=\"sessionDataKey\" value='");
              out.print(Encode.forHtmlAttribute(request.getParameter("sessionDataKey")));
              out.write("'/>\n");
              out.write("\n");
              out.write("    ");

        String recoveryEPAvailable = application.getInitParameter("EnableRecoveryEndpoint");
        String enableSelfSignUpEndpoint = application.getInitParameter("EnableSelfSignUpEndpoint");
        Boolean isRecoveryEPAvailable = false;
        Boolean isSelfSignUpEPAvailable = false;
        String identityMgtEndpointContext = "";
        String accountRegistrationEndpointURL = "";
        String urlEncodedURL = "";
        String urlParameters = "";

        if (StringUtils.isNotBlank(recoveryEPAvailable)) {
            isRecoveryEPAvailable = Boolean.valueOf(recoveryEPAvailable);
        } else {
            isRecoveryEPAvailable = isRecoveryEPAvailable();
        }

        if (StringUtils.isNotBlank(enableSelfSignUpEndpoint)) {
            isSelfSignUpEPAvailable = Boolean.valueOf(enableSelfSignUpEndpoint);
        } else {
            isSelfSignUpEPAvailable = isSelfSignUpEPAvailable();
        }

        if (isRecoveryEPAvailable || isSelfSignUpEPAvailable) {
            String scheme = request.getScheme();
            String serverName = request.getServerName();
            int serverPort = request.getServerPort();
            String uri = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_REQUEST_URI);
            String prmstr = URLDecoder.decode(((String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING)), UTF_8);
            String urlWithoutEncoding = scheme + "://" +serverName + ":" + serverPort + uri + "?" + prmstr;

            urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, UTF_8);
            urlParameters = prmstr;

            identityMgtEndpointContext = application.getInitParameter("IdentityManagementEndpointContextURL");
            if (StringUtils.isBlank(identityMgtEndpointContext)) {
                try {
                    identityMgtEndpointContext = ServiceURLBuilder.create().addPath(ACCOUNT_RECOVERY_ENDPOINT).build()
                            .getAbsolutePublicURL();
                } catch (URLBuilderException e) {
                    request.setAttribute(STATUS, AuthenticationEndpointUtil.i18n(resourceBundle, CONFIGURATION_ERROR));
                    request.setAttribute(STATUS_MSG, AuthenticationEndpointUtil
                            .i18n(resourceBundle, ERROR_WHILE_BUILDING_THE_ACCOUNT_RECOVERY_ENDPOINT_URL));
                    request.getRequestDispatcher("error.do").forward(request, response);
                    return;
                }
            }

            accountRegistrationEndpointURL = application.getInitParameter("AccountRegisterEndpointURL");
            if (StringUtils.isBlank(accountRegistrationEndpointURL)) {
                accountRegistrationEndpointURL = identityMgtEndpointContext + ACCOUNT_RECOVERY_ENDPOINT_REGISTER;
            }
        }
    
              out.write("\n");
              out.write("\n");
              out.write("    <div class=\"field\">\n");
              out.write("        <div class=\"ui checkbox\">\n");
              out.write("            <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\">\n");
              out.write("            <label>");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.me"));
              out.write("</label>\n");
              out.write("        </div>\n");
              out.write("    </div>\n");
              out.write("\n");
              out.write("    <div class=\"ui two column stackable grid\">\n");
              out.write("        ");
 if(request.getParameter("relyingParty").equals("wso2.my.dashboard")) { 
              out.write("\n");
              out.write("        <div class=\"column align-left buttons\">\n");
              out.write("            ");
 if (isSelfSignUpEPAvailable && !isIdentifierFirstLogin(inputType)) { 
              out.write("\n");
              out.write("            <button\n");
              out.write("                type=\"submit\"\n");
              out.write("                onclick=\"window.location.href='");
              out.print(StringEscapeUtils.escapeHtml4(getRegistrationUrl(accountRegistrationEndpointURL, urlEncodedURL, urlParameters)));
              out.write("';\"\n");
              out.write("                class=\"ui large button secondary\"\n");
              out.write("                id=\"registerLink\"\n");
              out.write("                role=\"button\">\n");
              out.write("                    ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "create.account"));
              out.write("\n");
              out.write("            </button>\n");
              out.write("            ");
 } 
              out.write("\n");
              out.write("        </div>\n");
              out.write("        ");
 } 
              out.write("\n");
              out.write("        <div class=\"column align-right buttons\">\n");
              out.write("            <button\n");
              out.write("                type=\"submit\"\n");
              out.write("                onclick=\"appendTenantDomain();\"\n");
              out.write("                class=\"ui primary large button\"\n");
              out.write("                role=\"button\">\n");
              out.write("                    ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "continue"));
              out.write("\n");
              out.write("            </button>\n");
              out.write("        </div>\n");
              out.write("    </div>\n");
              out.write("\n");
              out.write("</form>\n");
              out.write("\n");
              out.write("<script>\n");
              out.write("\n");
              out.write("    /**\n");
              out.write("     * Append the tenant domain to the username\n");
              out.write("     */\n");
              out.write("        function appendTenantDomain() {\n");
              out.write("        var element = document.getElementById(\"tenantList\");\n");
              out.write("        var tenantDomain = element.options[element.selectedIndex].value;\n");
              out.write("\n");
              out.write("        setSelectedTenantCookie(tenantDomain, 30);\n");
              out.write("\n");
              out.write("        if (tenantDomain != \"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"select.tenant.dropdown.display.name"));
              out.write("\") {\n");
              out.write("\n");
              out.write("            var username = document.getElementsByName(\"username_tmp\")[0].value;\n");
              out.write("            var userWithDomain = username + \"@\" + tenantDomain;\n");
              out.write("\n");
              out.write("            document.getElementsByName(\"username\")[0].value = userWithDomain;\n");
              out.write("        }\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    /**\n");
              out.write("     * Write the selected tenant domain to the cookie\n");
              out.write("     */\n");
              out.write("    function setSelectedTenantCookie(cvalue, exdays) {\n");
              out.write("        var date = new Date();\n");
              out.write("        date.setTime(date.getTime() + (exdays * 24 * 60 * 60 * 1000));\n");
              out.write("        var expires = \"expires=\" + date.toUTCString();\n");
              out.write("        document.cookie = \"selectedTenantDomain=\" + cvalue + \"; \" + expires + \"; secure\";\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    /**\n");
              out.write("     * Get the previously selected tenant domain from the cookie\n");
              out.write("     */\n");
              out.write("    function getSelectedTenantCookie() {\n");
              out.write("        var selectedTenantDomain = \"\";\n");
              out.write("        var name = \"selectedTenantDomain=\";\n");
              out.write("        var cookieItems = document.cookie.split(';');\n");
              out.write("\n");
              out.write("        for (var i = 0; i < cookieItems.length; i++) {\n");
              out.write("            var item = cookieItems[i];\n");
              out.write("            item = item.trim();\n");
              out.write("\n");
              out.write("            if (item.indexOf(name) != -1) {\n");
              out.write("                selectedTenantDomain = item.substring(name.length, item.length);\n");
              out.write("                break;\n");
              out.write("            }\n");
              out.write("        }\n");
              out.write("        return selectedTenantDomain;\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    /**\n");
              out.write("     * Select the tenant domain based on the previously selected tenant domain in cookie\n");
              out.write("     */\n");
              out.write("    function selectTenantFromCookie() {\n");
              out.write("        var tenant = getSelectedTenantCookie();\n");
              out.write("        var element = document.getElementById(\"tenantList\");\n");
              out.write("\n");
              out.write("        for (var i = 0; i < element.options.length; i++) {\n");
              out.write("            if (element.options[i].value == tenant) {\n");
              out.write("                element.value = tenant;\n");
              out.write("                break;\n");
              out.write("            }\n");
              out.write("        }\n");
              out.write("\n");
              out.write("        //remove super tenant from dropdown based on the properties\n");
              out.write("        var superTenant = \"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"super.tenant"));
              out.write("\";\n");
              out.write("        if (superTenant == null || superTenant == \"\") {\n");
              out.write("            for (i = 0; i < element.options.length; i++) {\n");
              out.write("                if (element.options[i].value == superTenant) {\n");
              out.write("                    element.remove(i);\n");
              out.write("                    break;\n");
              out.write("                }\n");
              out.write("            }\n");
              out.write("        }\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    // Handle form submission preventing double submission.\n");
              out.write("    $(document).ready(function(){\n");
              out.write("        $.fn.preventDoubleSubmission = function() {\n");
              out.write("            $(this).on('submit',function(e){\n");
              out.write("                var $form = $(this);\n");
              out.write("                if ($form.data('submitted') === true) {\n");
              out.write("                    // Previously submitted - don't submit again.\n");
              out.write("                    e.preventDefault();\n");
              out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
              out.write("                } else {\n");
              out.write("                    // Mark it so that the next submit can be ignored.\n");
              out.write("                    $form.data('submitted', true);\n");
              out.write("                }\n");
              out.write("            });\n");
              out.write("\n");
              out.write("            return this;\n");
              out.write("        };\n");
              out.write("        $('#loginForm').preventDoubleSubmission();\n");
              out.write("    });\n");
              out.write("\n");
              out.write("    $('select.dropdown').dropdown();\n");
              out.write("\n");
              out.write("</script>\n");
              out.write("\n");
              out.write("                    ");

                            }
                        }
                                if (includeBasicAuth) {
                                    
              out.write("\n");
              out.write("                                        ");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write('\n');
              out.write('\n');

    String loginFormActionURL;

    if (isBackChannelBasicAuth) {
        loginFormActionURL = "authenticate.do";
        if (StringUtils.isNotBlank(queryString)) {
            loginFormActionURL = loginFormActionURL + "?" + queryString;
        }
    } else {
        String type = request.getParameter("type");
        if ("samlsso".equals(type)) {
            loginFormActionURL = samlssoURL;
        } else {
            loginFormActionURL = commonauthURL;
        }
    }

              out.write('\n');
              out.write('\n');
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");
              out.write("\n");

    Boolean isTypingDNAEnabledInTenant;
    try {
        PreferenceRetrievalClient preferenceRetrievalClient = new PreferenceRetrievalClient();
        isTypingDNAEnabledInTenant = preferenceRetrievalClient.checkTypingDNA(tenantDomain);
    } catch (PreferenceRetrievalClientException e) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", AuthenticationEndpointUtil
                .i18n(resourceBundle, "something.went.wrong.contact.admin"));
        IdentityManagementEndpointUtil.addErrorInformation(request, e);
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }
    File typingPatternRecorder = new File(getServletContext().getRealPath("plugins/typing-dna.jsp"));
    if (isTypingDNAEnabledInTenant && typingPatternRecorder.exists() && !isIdentifierFirstLogin(inputType)) {

              out.write("\n");
              out.write("        ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "plugins/typing-dna.jsp", out, false);
              out.write('\n');
 }  
              out.write('\n');
              out.write("\n");
              out.write("\n");
              out.write("<script>\n");
              out.write("    function goBack() {\n");
              out.write("        document.getElementById(\"restartFlowForm\").submit();\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    // Handle form submission preventing double submission.\n");
              out.write("    $(document).ready(function(){\n");
              out.write("        var usernameInput = $(\"#usernameUserInput\");\n");
              out.write("        var passwordInput = $(\"#password\");\n");
              out.write("\n");
              out.write("        // Hides invalid form error message on user input.\n");
              out.write("        if (usernameInput) {\n");
              out.write("            usernameInput.on(\"input\", function (e) {\n");
              out.write("                hideUsernameInvalidMessage();\n");
              out.write("            });\n");
              out.write("        }\n");
              out.write("\n");
              out.write("        // Hides invalid form error message on user input.\n");
              out.write("        if (passwordInput) {\n");
              out.write("            passwordInput.on(\"input\", function (e) {\n");
              out.write("                hidePasswordInvalidMessage();\n");
              out.write("            });\n");
              out.write("        }\n");
              out.write("\n");
              out.write("        $.fn.preventDoubleSubmission = function() {\n");
              out.write("            $(this).on('submit',function(e){\n");
              out.write("                var $form = $(this);\n");
              out.write("                if ($form.data('submitted') === true) {\n");
              out.write("                    // Previously submitted - don't submit again.\n");
              out.write("                    e.preventDefault();\n");
              out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
              out.write("                } else {\n");
              out.write("                    e.preventDefault();\n");
              out.write("\n");
              out.write("                    var userName = document.getElementById(\"username\");\n");
              out.write("                    var usernameUserInput = document.getElementById(\"usernameUserInput\");\n");
              out.write("                    var password = document.getElementById(\"password\");\n");
              out.write("                    var validInput = true;\n");
              out.write("\n");
              out.write("                    if (usernameUserInput) {\n");
              out.write("                        var sanitizedUsername = usernameUserInput.value.trim();\n");
              out.write("                        // Show error message when username is empty.\n");
              out.write("                        if (sanitizedUsername.length <= 0) {\n");
              out.write("                            showUsernameInvalidMessage();\n");
              out.write("                            validInput = false;\n");
              out.write("                        }\n");
              out.write("\n");
              out.write("                        userName.value = sanitizedUsername;\n");
              out.write("                    }\n");
              out.write("\n");
              out.write("                    if (password) {\n");
              out.write("                        var sanitizedPassword = password.value.trim();\n");
              out.write("                        // Show error message when password is empty.\n");
              out.write("                        if (sanitizedPassword.length <= 0) {\n");
              out.write("                            showPasswordInvalidMessage();\n");
              out.write("                            validInput = false;\n");
              out.write("                        }\n");
              out.write("                    }\n");
              out.write("\n");
              out.write("                    // Prevents the form submission if the inputs are invalid.\n");
              out.write("                    if (!validInput) {\n");
              out.write("                        return false;\n");
              out.write("                    }\n");
              out.write("\n");
              out.write("                    if (userName.value) {\n");
              out.write("                        $.ajax({\n");
              out.write("                            type: \"GET\",\n");
              out.write("                            url: \"");
              out.print( Encode.forJavaScriptBlock(loginContextRequestUrl));
              out.write("\",\n");
              out.write("                            xhrFields: { withCredentials: true },\n");
              out.write("                            success: function (data) {\n");
              out.write("                                if (data && data.status == 'redirect' && data.redirectUrl && data.redirectUrl.length > 0) {\n");
              out.write("                                    window.location.href = data.redirectUrl;\n");
              out.write("                                } else if ($form.data('submitted') !== true) {\n");
              out.write("                                    $form.data('submitted', true);\n");
              out.write("                                    document.getElementById(\"loginForm\").submit();\n");
              out.write("                                } else {\n");
              out.write("                                    console.warn(\"Prevented a possible double submit event.\");\n");
              out.write("                                }\n");
              out.write("                            },\n");
              out.write("                            cache: false\n");
              out.write("                        });\n");
              out.write("                    }\n");
              out.write("                }\n");
              out.write("            });\n");
              out.write("\n");
              out.write("            return this;\n");
              out.write("        };\n");
              out.write("        $('#loginForm').preventDoubleSubmission();\n");
              out.write("        $(\"button\").removeClass(\"loading\");\n");
              out.write("    });\n");
              out.write("\n");
              out.write("    // Function to show error message when username is empty.\n");
              out.write("    function showUsernameInvalidMessage() {\n");
              out.write("        var usernameError = $(\"#usernameError\");\n");
              out.write("        usernameError.show();\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    // Function to show error message when password is empty.\n");
              out.write("    function showPasswordInvalidMessage() {\n");
              out.write("        var passwordError = $(\"#passwordError\");\n");
              out.write("        passwordError.show();\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    // Function to hide error message when username is empty.\n");
              out.write("    function hideUsernameInvalidMessage() {\n");
              out.write("        var usernameError = $(\"#usernameError\");\n");
              out.write("        usernameError.hide();\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    // Function to hide error message when password is empty.\n");
              out.write("    function hidePasswordInvalidMessage() {\n");
              out.write("        var passwordError = $(\"#passwordError\");\n");
              out.write("        passwordError.hide();\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    function showResendReCaptcha() {\n");
              out.write("        ");
 if (StringUtils.isNotBlank(request.getParameter("failedUsername"))){ 
              out.write("\n");
              out.write("            window.location.href=\"login.do?resend_username=");
              out.print(Encode.forHtml(URLEncoder.encode(request.getParameter("failedUsername"), UTF_8)));
              out.write('&');
              out.print(AuthenticationEndpointUtil.cleanErrorMessages(Encode.forJava(request.getQueryString())));
              out.write("\";\n");
              out.write("        ");
 } 
              out.write("\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    function submitForm() {\n");
              out.write("\n");
              out.write("        var userName = document.getElementById(\"username\");\n");
              out.write("        var usernameUserInput = document.getElementById(\"usernameUserInput\");\n");
              out.write("        var password = document.getElementById(\"password\");\n");
              out.write("        var validInput = true;\n");
              out.write("\n");
              out.write("        if (usernameUserInput) {\n");
              out.write("            var sanitizedUsername = usernameUserInput.value.trim();\n");
              out.write("            // Show error message when username is empty.\n");
              out.write("            if (sanitizedUsername.length <= 0) {\n");
              out.write("                showUsernameInvalidMessage();\n");
              out.write("                validInput = false;\n");
              out.write("            }\n");
              out.write("\n");
              out.write("            userName.value = sanitizedUsername;\n");
              out.write("        }\n");
              out.write("\n");
              out.write("        if (password) {\n");
              out.write("            var sanitizedPassword = password.value.trim();\n");
              out.write("            // Show error message when password is empty.\n");
              out.write("            if (sanitizedPassword.length <= 0) {\n");
              out.write("                showPasswordInvalidMessage();\n");
              out.write("                validInput = false;\n");
              out.write("            }\n");
              out.write("        }\n");
              out.write("\n");
              out.write("        // Do the form submission if the inputs are valid.\n");
              out.write("        if (validInput) {\n");
              out.write("            document.getElementById(\"loginForm\").submit();\n");
              out.write("        } else {\n");
              out.write("            // Reset the recaptcha to allow another submission.\n");
              out.write("            var reCaptchaType = \"");
              out.print( CaptchaUtil.getReCaptchaType());
              out.write("\"\n");
              out.write("            if (\"recaptcha-enterprise\" == reCaptchaType) {\n");
              out.write("                grecaptcha.enterprise.reset();\n");
              out.write("            } else {\n");
              out.write("                grecaptcha.reset();\n");
              out.write("            }\n");
              out.write("        }\n");
              out.write("    }\n");
              out.write("</script>\n");
              out.write("\n");
              out.write('\n');
              out.write('\n');

    Boolean isAdminBannerAllowedInSP = CONSOLE.equals(Encode.forJava(request.getParameter("sp")));
    Boolean isAdminAdvisoryBannerEnabledInTenant = false;
    String adminAdvisoryBannerContentOfTenant = "";

    try {
        if (isAdminBannerAllowedInSP) {
            AdminAdvisoryDataRetrievalClient adminBannerPreferenceRetrievalClient =
                new AdminAdvisoryDataRetrievalClient();
            JSONObject adminAdvisoryBannerConfig = adminBannerPreferenceRetrievalClient
                .getAdminAdvisoryBannerData(tenantDomain);
            isAdminAdvisoryBannerEnabledInTenant = adminAdvisoryBannerConfig.getBoolean("enableBanner");
            adminAdvisoryBannerContentOfTenant = adminAdvisoryBannerConfig.getString("bannerContent");
        }
    } catch (JSONException | AdminAdvisoryDataRetrievalClientException e) {
        log.error("Error in displaying admin advisory banner", e);
    }

    String emailUsernameEnable = application.getInitParameter("EnableEmailUserName");
    Boolean isEmailUsernameEnabled = false;
    String usernameLabel = "username";
    String usernamePlaceHolder = "enter.your.username";

    Boolean isMultiAttributeLoginEnabledInTenant;
    String allowedAttributes;

    if (StringUtils.isNotBlank(emailUsernameEnable)) {
        isEmailUsernameEnabled = Boolean.valueOf(emailUsernameEnable);
    } else {
        isEmailUsernameEnabled = isEmailUsernameEnabled();
    }

    if (Boolean.parseBoolean(application.getInitParameter("IsHostedExternally"))) {
        isMultiAttributeLoginEnabledInTenant = false;
        allowedAttributes = "";
    } else {
        try {
            PreferenceRetrievalClient preferenceRetrievalClient = new PreferenceRetrievalClient();
            isMultiAttributeLoginEnabledInTenant = preferenceRetrievalClient.checkMultiAttributeLogin(tenantForTheming);
            allowedAttributes = preferenceRetrievalClient.checkMultiAttributeLoginProperty(tenantForTheming);
        } catch (PreferenceRetrievalClientException e) {
            request.setAttribute("error", true);
            request.setAttribute("errorMsg", AuthenticationEndpointUtil
                    .i18n(resourceBundle, "something.went.wrong.contact.admin"));
            IdentityManagementEndpointUtil.addErrorInformation(request, e);
            request.getRequestDispatcher("error.jsp").forward(request, response);
            return;
        }
    }

    if (isEmailUsernameEnabled == true) {
        usernameLabel = "email.username";
    }

    if (isMultiAttributeLoginEnabledInTenant) {
        if (allowedAttributes != null) {
            usernameLabel = getUsernameLabel(resourceBundle, allowedAttributes);
            usernamePlaceHolder = "enter.your.identifier";
        }
    }

    String resendUsername = request.getParameter("resend_username");
    String spProp = "sp";
    String spIdProp = "spId";
    String sp = request.getParameter("sp");
    String spId = "";

    try {
        if (sp.equals("My Account")) {
            spId = "My_Account";
        } else {
            ApplicationDataRetrievalClient applicationDataRetrievalClient = new ApplicationDataRetrievalClient();
            spId = applicationDataRetrievalClient.getApplicationID(tenantDomain,sp);
        }
    } catch (Exception e) {
        // Ignored and send the default value.
    }

    if (StringUtils.isNotBlank(resendUsername)) {

        ResendCodeRequestDTO selfRegistrationRequest = new ResendCodeRequestDTO();
        UserDTO userDTO = AuthenticationEndpointUtil.getUser(resendUsername);
        userDTO.setTenantDomain(tenantForTheming);
        userDTO.setUsername(UserCoreUtil.removeDomainFromName(resendUsername));
        selfRegistrationRequest.setUser(userDTO);

        List<PropertyDTO> properties = new ArrayList<PropertyDTO>();
        PropertyDTO appProperty = new PropertyDTO();
        appProperty.setKey(spProp);
        appProperty.setValue(sp);
        properties.add(appProperty);

        PropertyDTO spProperty = new PropertyDTO();
        spProperty.setKey(spIdProp);
        spProperty.setValue(spId);
        properties.add(spProperty);
        selfRegistrationRequest.setProperties(properties);

        String path = config.getServletContext().getInitParameter(Constants.ACCOUNT_RECOVERY_REST_ENDPOINT_URL);
        String proxyContextPath = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants
                .PROXY_CONTEXT_PATH);
        if (proxyContextPath == null) {
            proxyContextPath = "";
        }
        String url;
        if (StringUtils.isNotBlank(EndpointConfigManager.getServerOrigin())) {
            url = IdentityManagementEndpointUtil.getBasePath(tenantDomain, path, false);
        } else {
            url = IdentityUtil.getServerURL(path, true, false);
        }
        url = url.replace(TENANT_DOMAIN, userDTO.getTenantDomain());
        List<JSONProvider> providers = new ArrayList<JSONProvider>();
        JSONProvider jsonProvider = new JSONProvider();
        jsonProvider.setDropRootElement(true);
        jsonProvider.setIgnoreNamespaces(true);
        jsonProvider.setValidateOutput(true);
        jsonProvider.setSupportUnwrapped(true);
        providers.add(jsonProvider);

        String toEncode = EndpointConfigManager.getAppName() + ":" + String
                .valueOf(EndpointConfigManager.getAppPassword());
        byte[] encoding = Base64.encodeBase64(toEncode.getBytes());
        String authHeader = new String(encoding, Charset.defaultCharset());
        String header = "Client " + authHeader;

        SelfUserRegistrationResource selfUserRegistrationResource = JAXRSClientFactory
                .create(url, SelfUserRegistrationResource.class, providers);
        String reCaptchaResponse = request.getParameter("g-recaptcha-response");
        WebClient.client(selfUserRegistrationResource).header("g-recaptcha-response", reCaptchaResponse);
        WebClient.client(selfUserRegistrationResource).header("Authorization", header);
        Response selfRegistrationResponse = selfUserRegistrationResource.regenerateCode(selfRegistrationRequest);
        if (selfRegistrationResponse != null &&  selfRegistrationResponse.getStatus() == HttpStatus.SC_CREATED) {

              out.write("\n");
              out.write("<div class=\"ui visible positive message\">\n");
              out.write("    ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle,Constants.ACCOUNT_RESEND_SUCCESS_RESOURCE));
              out.write("\n");
              out.write("</div>\n");

} else {

              out.write("\n");
              out.write("<div class=\"ui visible negative message\">\n");
              out.write("    ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle,Constants.ACCOUNT_RESEND_FAIL_RESOURCE));
              out.write("\n");
              out.write("</div>\n");

        }
    }

              out.write('\n');
              out.write('\n');
 if (StringUtils.equals(request.getParameter("errorCode"), IdentityCoreConstants.USER_ACCOUNT_LOCKED_ERROR_CODE) &&
    StringUtils.equals(request.getParameter("remainingAttempts"), "0")) {
    if (StringUtils.equals(request.getParameter("lockedReason"), "AdminInitiated")) { 
              out.write("\n");
              out.write("        <div class=\"ui visible negative message\" lockedReasonid=\"error-msg\" data-testid=\"login-page-error-message\">\n");
              out.write("            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "error.user.account.locked.admin.initiated"));
              out.write("\n");
              out.write("        </div>\n");
              out.write("    ");
 } else { 
              out.write("\n");
              out.write("        <div class=\"ui visible negative message\" lockedReasonid=\"error-msg\" data-testid=\"login-page-error-message\">\n");
              out.write("            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "error.user.account.locked.incorrect.login.attempts"));
              out.write("\n");
              out.write("        </div>\n");
              out.write("    ");
 }
} else if (Boolean.parseBoolean(loginFailed) &&
        !errorCode.equals(IdentityCoreConstants.USER_ACCOUNT_NOT_CONFIRMED_ERROR_CODE)) {
    if (StringUtils.equals(request.getParameter("errorCode"),
            IdentityCoreConstants.ADMIN_FORCED_USER_PASSWORD_RESET_VIA_EMAIL_LINK_ERROR_CODE) &&
            StringUtils.equals(request.getParameter("t"), "carbon.super") &&
            StringUtils.isNotBlank(supportEmail)) { 
              out.write("\n");
              out.write("<div class=\"ui visible negative message\" id=\"error-msg\" data-testid=\"login-page-error-message\">\n");
              out.write("    ");
              out.print( AuthenticationEndpointUtil.i18n(resourceBundle, "password.reset.pending.super.tenant").replace("{supportEmail}",supportEmail) );
              out.write("\n");
              out.write("</div>\n");
 } else { 
              out.write("\n");
              out.write("<div class=\"ui visible negative message\" id=\"error-msg\" data-testid=\"login-page-error-message\">\n");
              out.write("    ");
              out.print( AuthenticationEndpointUtil.i18n(resourceBundle, Encode.forJava(errorMessage)) );
              out.write("\n");
              out.write("</div>\n");
 }
} else if ((Boolean.TRUE.toString()).equals(request.getParameter("authz_failure"))){
              out.write("\n");
              out.write("<div class=\"ui visible negative message\" id=\"error-msg\" data-testid=\"login-page-error-message\">\n");
              out.write("    ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "unauthorized.to.login"));
              out.write("\n");
              out.write("</div>\n");
 } else { 
              out.write("\n");
              out.write("    <div class=\"ui visible negative message\" style=\"display: none;\" id=\"error-msg\" data-testid=\"login-page-error-message\"></div>\n");
 } 
              out.write('\n');
              out.write('\n');
 if (Boolean.parseBoolean(loginFailed) && errorCode.equals(IdentityCoreConstants.USER_ACCOUNT_NOT_CONFIRMED_ERROR_CODE) && request.getParameter("resend_username") == null) { 
              out.write("\n");
              out.write("    <div class=\"ui visible warning message\" id=\"error-msg\" data-testid=\"login-page-error-message\">\n");
              out.write("\n");
              out.write("        <h5 class=\"ui heading\"><strong>");
              out.print( AuthenticationEndpointUtil.i18n(resourceBundle, "no.confirmation.mail.heading") );
              out.write("</strong></h5>\n");
              out.write("\n");
              out.write("        ");
              out.print( AuthenticationEndpointUtil.i18n(resourceBundle, Encode.forJava(errorMessage)) );
              out.write("\n");
              out.write("\n");
              out.write("        <div class=\"ui divider hidden\"></div>\n");
              out.write("\n");
              out.write("        ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "no.confirmation.mail"));
              out.write("\n");
              out.write("\n");
              out.write("        <a id=\"registerLink\"\n");
              out.write("            href=\"javascript:showResendReCaptcha();\"\n");
              out.write("            data-testid=\"login-page-resend-confirmation-email-link\"\n");
              out.write("        >\n");
              out.write("            ");
              out.print(StringEscapeUtils.escapeHtml4(AuthenticationEndpointUtil.i18n(resourceBundle, "resend.mail")));
              out.write("\n");
              out.write("        </a>\n");
              out.write("    </div>\n");
              out.write("    <div class=\"ui divider hidden\"></div>\n");
              out.write("    ");

        if (reCaptchaResendEnabled) {
            String reCaptchaKey = CaptchaUtil.reCaptchaSiteKey();
    
              out.write("\n");
              out.write("        <div class=\"field\">\n");
              out.write("            <div class=\"g-recaptcha\"\n");
              out.write("                data-sitekey=\"");
              out.print(Encode.forHtmlAttribute(reCaptchaKey));
              out.write("\"\n");
              out.write("                data-testid=\"register-page-g-recaptcha\"\n");
              out.write("                data-bind=\"registerLink\"\n");
              out.write("                data-callback=\"showResendReCaptcha\"\n");
              out.write("                data-theme=\"light\"\n");
              out.write("                data-tabindex=\"-1\"\n");
              out.write("            >\n");
              out.write("            </div>\n");
              out.write("        </div>\n");
              out.write("    ");

        }
    
              out.write('\n');
 } 
              out.write('\n');
              out.write('\n');
 if (isAdminAdvisoryBannerEnabledInTenant) { 
              out.write("\n");
              out.write("    <div class=\"ui warning message\" data-componentid=\"login-page-admin-session-advisory-banner\">\n");
              out.write("        ");
              out.print(Encode.forHtmlContent(adminAdvisoryBannerContentOfTenant));
              out.write("\n");
              out.write("    </div>\n");
 } 
              out.write("\n");
              out.write("\n");
              out.write("<form class=\"ui large form\" action=\"");
              out.print( Encode.forHtmlAttribute(loginFormActionURL) );
              out.write("\" method=\"post\" id=\"loginForm\">\n");
              out.write("    ");

        if (loginFormActionURL.equals(samlssoURL) || loginFormActionURL.equals(oauth2AuthorizeURL)) {
    
              out.write("\n");
              out.write("    <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");
              out.write("    ");

        }
    
              out.write("\n");
              out.write("\n");
              out.write("    ");
 if(Boolean.parseBoolean(request.getParameter("passwordReset"))) {
    
              out.write("\n");
              out.write("        <div class=\"ui visible positive message\" data-testid=\"password-reset-success-message\">\n");
              out.write("            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "Updated.the.password.successfully"));
              out.write("\n");
              out.write("        </div>\n");
              out.write("   ");
 } 
              out.write("\n");
              out.write("    ");
 if (!isIdentifierFirstLogin(inputType) && !isLoginHintAvailable(inputType)) { 
              out.write("\n");
              out.write("            <div class=\"field m-0\">\n");
              out.write("                ");
 String loginInputLabel=i18n(resourceBundle, customText, "login.identifier.input.label" , "", false); 
              out.write("\n");
              out.write("                    ");
 if (StringUtils.isNotBlank(loginInputLabel)) { 
              out.write("\n");
              out.write("                        <label>\n");
              out.write("                            ");
              out.print( loginInputLabel );
              out.write("\n");
              out.write("                        </label>\n");
              out.write("                        ");
 } else if (isMultiAttributeLoginEnabledInTenant) { 
              out.write("\n");
              out.write("                            <label>\n");
              out.write("                                ");
              out.print( usernameLabel );
              out.write("\n");
              out.write("                            </label>\n");
              out.write("                            ");
 } else { 
              out.write("\n");
              out.write("                                <label>\n");
              out.write("                                    ");
              out.print( AuthenticationEndpointUtil.i18n(resourceBundle, usernameLabel) );
              out.write("\n");
              out.write("                                </label>\n");
              out.write("                                ");
 } 
              out.write("\n");
              out.write("                <div class=\"ui fluid left icon input\">\n");
              out.write("                <input\n");
              out.write("                    type=\"text\"\n");
              out.write("                    id=\"usernameUserInput\"\n");
              out.write("                    value=\"\"\n");
              out.write("                    name=\"usernameUserInput\"\n");
              out.write("                    placeholder=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, usernamePlaceHolder));
              out.write("\"\n");
              out.write("                    data-testid=\"login-page-username-input\"\n");
              out.write("                    aria-required=\"true\"\n");
              out.write("                >\n");
              out.write("                <i aria-hidden=\"true\" class=\"user fill icon\"></i>\n");
              out.write("                <input id=\"username\" name=\"username\" type=\"hidden\" value=\"");
              out.print(username);
              out.write("\">\n");
              out.write("            </div>\n");
              out.write("        </div>\n");
              out.write("        <div class=\"mt-1\" id=\"usernameError\" style=\"display: none;\">\n");
              out.write("            <i class=\"red exclamation circle fitted icon\"></i>\n");
              out.write("            <span class=\"validation-error-message\" id=\"usernameErrorText\">\n");
              out.write("                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username.cannot.be.empty"));
              out.write("\n");
              out.write("            </span>\n");
              out.write("        </div>\n");
              out.write("    ");
 } else { 
              out.write("\n");
              out.write("        <input id=\"username\" name=\"username\" type=\"hidden\" data-testid=\"login-page-username-input\" value=\"");
              out.print(username);
              out.write("\">\n");
              out.write("    ");
 } 
              out.write("\n");
              out.write("        <div class=\"field mt-3 mb-0\">\n");
              out.write("            <label>");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "password"));
              out.write("</label>\n");
              out.write("            <div class=\"ui fluid left icon input addon-wrapper\">\n");
              out.write("                <input\n");
              out.write("                    type=\"password\"\n");
              out.write("                    id=\"password\"\n");
              out.write("                    name=\"password\"\n");
              out.write("                    value=\"\"\n");
              out.write("                    autocomplete=\"off\"\n");
              out.write("                    placeholder=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "enter.your.password"));
              out.write("\"\n");
              out.write("                    data-testid=\"login-page-password-input\"\n");
              out.write("                    aria-required=\"true\"\n");
              out.write("                >\n");
              out.write("                <i aria-hidden=\"true\" class=\"lock icon\"></i>\n");
              out.write("                <i id=\"password-eye\" class=\"eye icon right-align password-toggle slash\" onclick=\"showPassword()\"></i>\n");
              out.write("            </div>\n");
              out.write("        </div>\n");
              out.write("        <div class=\"mt-1\" id=\"passwordError\" style=\"display: none;\">\n");
              out.write("            <i class=\"red exclamation circle fitted icon\"></i>\n");
              out.write("            <span class=\"validation-error-message\" id=\"passwordErrorText\">\n");
              out.write("                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "password.cannot.be.empty"));
              out.write("\n");
              out.write("            </span>\n");
              out.write("        </div>\n");
              out.write("\n");
              out.write("    ");

        String recoveryEPAvailable = application.getInitParameter("EnableRecoveryEndpoint");
        String enableSelfSignUpEndpoint = application.getInitParameter("EnableSelfSignUpEndpoint");
        Boolean isRecoveryEPAvailable = false;
        Boolean isSelfSignUpEPAvailable = false;
        String identityMgtEndpointContext = "";
        String accountRegistrationEndpointURL = "";
        String urlEncodedURL = "";
        String urlParameters = "";

        if (StringUtils.isNotBlank(recoveryEPAvailable)) {
            isRecoveryEPAvailable = Boolean.valueOf(recoveryEPAvailable);
        } else {
            isRecoveryEPAvailable = isRecoveryEPAvailable();
        }

        if (StringUtils.isNotBlank(enableSelfSignUpEndpoint)) {
            isSelfSignUpEPAvailable = Boolean.valueOf(enableSelfSignUpEndpoint);
        } else {
            isSelfSignUpEPAvailable = isSelfSignUpEPAvailable();
        }

        if (isRecoveryEPAvailable || isSelfSignUpEPAvailable) {
            String urlWithoutEncoding = null;
            try {
                ApplicationDataRetrievalClient applicationDataRetrievalClient = new ApplicationDataRetrievalClient();
                urlWithoutEncoding = applicationDataRetrievalClient.getApplicationAccessURL(tenantDomain,
                        request.getParameter("sp"));
            } catch (ApplicationDataRetrievalClientException e) {
                //ignored and fallback to login page url
            }

            if (StringUtils.isBlank(urlWithoutEncoding)) {
                String scheme = request.getScheme();
                String serverName = request.getServerName();
                int serverPort = request.getServerPort();
                String uri = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_REQUEST_URI);
                String prmstr = URLDecoder.decode(((String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING)), UTF_8);
                if ((scheme == "http" && serverPort == HttpURL.DEFAULT_PORT) || (scheme == "https" && serverPort == HttpsURL.DEFAULT_PORT)) {
                    urlWithoutEncoding = scheme + "://" + serverName + uri + "?" + prmstr;
                } else {
                    urlWithoutEncoding = scheme + "://" + serverName + ":" + serverPort + uri + "?" + prmstr;
                }
            }
            urlWithoutEncoding = IdentityManagementEndpointUtil.replaceUserTenantHintPlaceholder(
                    urlWithoutEncoding, userTenantDomain);

            urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, UTF_8);
            urlParameters = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING);

            identityMgtEndpointContext = application.getInitParameter("IdentityManagementEndpointContextURL");
            if (StringUtils.isBlank(identityMgtEndpointContext)) {
                try {
                    identityMgtEndpointContext = ServiceURLBuilder.create().addPath(ACCOUNT_RECOVERY_ENDPOINT).build()
                            .getAbsolutePublicURL();
                } catch (URLBuilderException e) {
                    request.setAttribute(STATUS, AuthenticationEndpointUtil.i18n(resourceBundle, CONFIGURATION_ERROR));
                    request.setAttribute(STATUS_MSG, AuthenticationEndpointUtil
                            .i18n(resourceBundle, ERROR_WHILE_BUILDING_THE_ACCOUNT_RECOVERY_ENDPOINT_URL));
                    request.getRequestDispatcher("error.do").forward(request, response);
                    return;
                }
            }

            accountRegistrationEndpointURL = application.getInitParameter("AccountRegisterEndpointURL");
            if (StringUtils.isBlank(accountRegistrationEndpointURL)
                    || !(StringUtils.equals(tenantForTheming, IdentityManagementEndpointConstants.SUPER_TENANT))) {
                accountRegistrationEndpointURL = identityMgtEndpointContext + ACCOUNT_RECOVERY_ENDPOINT_REGISTER;
            }

            // For self sign-up build the normal callback URL.
            String srURI;

            if (Boolean.parseBoolean(application.getInitParameter("IsHostedExternally"))) {
                srURI = application.getInitParameter("IdentityManagementEndpointLoginURL");
            } else {
                srURI = ServiceURLBuilder.create().addPath(AUTHENTICATION_ENDPOINT_LOGIN).build().getAbsolutePublicURL();
            }
            String srprmstr = URLDecoder.decode(((String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING)), UTF_8);
            String srURLWithoutEncoding = srURI + "?" + srprmstr;
            srURLEncodedURL= URLEncoder.encode(srURLWithoutEncoding, UTF_8);
        }
    
              out.write("\n");
              out.write("\n");
              out.write("    <div class=\"buttons mt-2\">\n");
              out.write("        ");
 if (isRecoveryEPAvailable && (isUsernameRecoveryEnabledInTenant || isPasswordRecoveryEnabledInTenant)) { 
              out.write("\n");
              out.write("        <div class=\"field external-link-container text-small\">\n");
              out.write("            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username.password"));
              out.write("\n");
              out.write("            ");
 if (!isIdentifierFirstLogin(inputType) && !isLoginHintAvailable(inputType) && isUsernameRecoveryEnabledInTenant) { 
              out.write("\n");
              out.write("            <a\n");
              out.write("                id=\"usernameRecoverLink\"\n");
              out.write("                href=\"");
              out.print(StringEscapeUtils.escapeHtml4(getRecoverAccountUrl(identityMgtEndpointContext, urlEncodedURL, true, urlParameters)));
              out.write("\"\n");
              out.write("                data-testid=\"login-page-username-recovery-button\"\n");
              out.write("            >\n");
              out.write("                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username"));
              out.write("\n");
              out.write("            </a>\n");
              out.write("            ");
 }
              if (!isIdentifierFirstLogin(inputType) && !isLoginHintAvailable(inputType) && isUsernameRecoveryEnabledInTenant && isPasswordRecoveryEnabledInTenant) { 
              out.write("\n");
              out.write("            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username.password.or"));
              out.write("\n");
              out.write("            ");
 }
              if (isPasswordRecoveryEnabledInTenant && isPasswordRecoveryEnabledInTenantPreferences) { 
              out.write("\n");
              out.write("            <a\n");
              out.write("                id=\"passwordRecoverLink\"\n");
              out.write("                ");
 if(StringUtils.isNotBlank(passwordRecoveryOverrideURL)) { 
              out.write("\n");
              out.write("                href=\"");
              out.print(StringEscapeUtils.escapeHtml4(passwordRecoveryOverrideURL));
              out.write("\"\n");
              out.write("                ");
 } else { 
              out.write("\n");
              out.write("                href=\"");
              out.print(StringEscapeUtils.escapeHtml4(getRecoverAccountUrlWithUsername(identityMgtEndpointContext, urlEncodedURL, false, urlParameters, usernameIdentifier)));
              out.write("\"\n");
              out.write("                ");
 } 
              out.write("\n");
              out.write("                data-testid=\"login-page-password-recovery-button\"\n");
              out.write("                ");
 if (StringUtils.equals("true", promptAccountLinking)) { 
              out.write("\n");
              out.write("                    target=\"_blank\" rel=\"noopener noreferrer\"\n");
              out.write("                ");
 } 
              out.write("\n");
              out.write("            >\n");
              out.write("                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.password"));
              out.write("\n");
              out.write("            </a>\n");
              out.write("            ");
 } 
              out.write("\n");
              out.write("            ?\n");
              out.write("        </div>\n");
              out.write("        ");
 } 
              out.write("\n");
              out.write("    </div>\n");
              out.write("\n");
              out.write("    <div class=\"ui divider hidden\"></div>\n");
              out.write("\n");
              out.write("    <div class=\"field external-link-container text-small\">\n");
              out.write("        <div class=\"ui checkbox\">\n");
              out.write("            <input\n");
              out.write("                type=\"checkbox\"\n");
              out.write("                id=\"chkRemember\"\n");
              out.write("                name=\"chkRemember\"\n");
              out.write("                data-testid=\"login-page-remember-me-checkbox\"\n");
              out.write("            >\n");
              out.write("            <label for=\"chkRemember\">");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.me"));
              out.write("</label>\n");
              out.write("        </div>\n");
              out.write("    </div>\n");
              out.write("    <input type=\"hidden\" name=\"sessionDataKey\" value='");
              out.print(Encode.forHtmlAttribute
            (request.getParameter("sessionDataKey")));
              out.write("'/>\n");
              out.write("\n");
              out.write("    <div class=\"mt-0\">\n");
              out.write("        <div class=\"buttons\">\n");
              out.write("            <button\n");
              out.write("                type=\"submit\"\n");
              out.write("                class=\"ui primary loading fluid large button\"\n");
              out.write("                role=\"button\"\n");
              out.write("                data-testid=\"login-page-continue-login-button\"\n");
              out.write("                id=\"sign-in-button\"\n");
              out.write("                ");
              out.print( reCaptchaEnabled ? "disabled" : "" );
              out.write("\n");
              out.write("                onclick=\"handleClickSignIn()\"\n");
              out.write("            >\n");
              out.write("                ");
              out.print( i18n(resourceBundle, customText, "login.button") );
              out.write("\n");
              out.write("            </button>\n");
              out.write("        </div>\n");
              out.write("    </div>\n");
              out.write("\n");
              out.write("    ");
 if (isSelfSignUpEPAvailable && !isIdentifierFirstLogin(inputType) && !isLoginHintAvailable(inputType) && isSelfSignUpEnabledInTenant && isSelfSignUpEnabledInTenantPreferences) { 
              out.write("\n");
              out.write("        <div class=\"mt-4 mb-4\">\n");
              out.write("            <div class=\"mt-3 external-link-container text-small\">\n");
              out.write("                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "dont.have.an.account"));
              out.write("\n");
              out.write("                <a\n");
              out.write("                    ");
 if(StringUtils.isNotBlank(selfSignUpOverrideURL)) { 
              out.write("\n");
              out.write("                    href=\"");
              out.print(i18nLink(userLocale, selfSignUpOverrideURL));
              out.write("\"\n");
              out.write("                    ");
 } else { 
              out.write("\n");
              out.write("                    href=\"");
              out.print(StringEscapeUtils.escapeHtml4(getRegistrationUrl(accountRegistrationEndpointContextURL, srURLEncodedURL, urlParameters)));
              out.write("\"\n");
              out.write("                    ");
 } 
              out.write("\n");
              out.write("                    target=\"_self\"\n");
              out.write("                    class=\"clickable-link\"\n");
              out.write("                    rel=\"noopener noreferrer\"\n");
              out.write("                    id=\"registerLink\"\n");
              out.write("                    data-testid=\"login-page-create-account-button\"\n");
              out.write("                    style=\"cursor: pointer;\"\n");
              out.write("                >\n");
              out.write("                    ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "register"));
              out.write("\n");
              out.write("                </a>\n");
              out.write("            </div>\n");
              out.write("        </div>\n");
              out.write("    ");
 } 
              out.write("\n");
              out.write("    ");
 if (isIdentifierFirstLogin(inputType) && !StringUtils.equals("true", promptAccountLinking)) { 
              out.write("\n");
              out.write("        <div class=\"field external-link-container text-small mt-4\">\n");
              out.write("            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "not.you"));
              out.write("\n");
              out.write("            <a\n");
              out.write("                id=\"backLink\"\n");
              out.write("                class=\"clickable-link\"\n");
              out.write("                tabindex=\"0\"\n");
              out.write("                onclick=\"goBack()\"\n");
              out.write("                onkeypress=\"javascript: if (window.event.keyCode === 13) goBack()\"\n");
              out.write("                data-testid=\"login-page-back-button\">\n");
              out.write("                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.different.account"));
              out.write("\n");
              out.write("            </a>\n");
              out.write("        </div>\n");
              out.write("    ");
 } 
              out.write("\n");
              out.write("\n");
              out.write("    ");
              out.write("\n");
              out.write("\n");
              out.write("    ");

        if (reCaptchaEnabled) {
            String reCaptchaKey = CaptchaUtil.reCaptchaSiteKey();
    
              out.write("\n");
              out.write("        <div class=\"field\">\n");
              out.write("            <div class=\"g-recaptcha\"\n");
              out.write("                data-sitekey=\"");
              out.print(Encode.forHtmlAttribute(reCaptchaKey));
              out.write("\"\n");
              out.write("                data-testid=\"login-page-g-recaptcha\"\n");
              out.write("                data-bind=\"sign-in-button\"\n");
              out.write("                data-callback=\"submitForm\"\n");
              out.write("                data-theme=\"light\"\n");
              out.write("                data-tabindex=\"-1\"\n");
              out.write("            >\n");
              out.write("            </div>\n");
              out.write("        </div>\n");
              out.write("    ");

        }
    
              out.write("\n");
              out.write("</form>\n");
              out.write("\n");
              out.write("<form action=\"");
              out.print( Encode.forHtmlAttribute(loginFormActionURL) );
              out.write("\" method=\"post\" id=\"restartFlowForm\">\n");
              out.write("    <input type=\"hidden\" name=\"sessionDataKey\" value='");
              out.print(Encode.forHtmlAttribute(request.getParameter("sessionDataKey")));
              out.write("'/>\n");
              out.write("    <input type=\"hidden\" name=\"restart_flow\" value='true'/>\n");
              out.write("    <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");
              out.write("</form>\n");
              out.write("\n");

    String clientId = Encode.forHtmlAttribute(request.getParameter("client_id"));

              out.write("\n");
              out.write("\n");
              out.write("<script type=\"text/javascript\">\n");
              out.write("    var insightsAppIdentifier = \"");
              out.print(clientId);
              out.write("\";\n");
              out.write("    var insightsTenantIdentifier = \"");
              out.print(userTenant);
              out.write("\";\n");
              out.write("    var isResendUserNameAvailable = \"");
              out.print(StringUtils.isNotBlank(resendUsername));
              out.write("\";\n");
              out.write("\n");
              out.write("    // Removes the resend_user param to prevent sending confirmation mail on page reload.\n");
              out.write("    if (isResendUserNameAvailable === \"true\") {\n");
              out.write("        const url = new URL(window.location.href);\n");
              out.write("        url.searchParams.delete('resend_username');\n");
              out.write("        window.history.pushState(null, window.document.title, \"login.do?\" + url.searchParams.toString());\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    if (insightsAppIdentifier == \"MY_ACCOUNT\") {\n");
              out.write("        insightsAppIdentifier = \"my-account\";\n");
              out.write("    } else if (insightsAppIdentifier == \"CONSOLE\") {\n");
              out.write("        insightsAppIdentifier = \"console\";\n");
              out.write("    } else if (insightsTenantIdentifier !== \"");
              out.print(org.wso2.carbon.utils.multitenancy.MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);
              out.write("\") {\n");
              out.write("        insightsAppIdentifier = \"business-app\";\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    trackEvent(\"page-visit-authentication-portal\", {\n");
              out.write("        \"app\": insightsAppIdentifier,\n");
              out.write("        \"tenant\": insightsTenantIdentifier !== \"null\" ? insightsTenantIdentifier : \"\"\n");
              out.write("    });\n");
              out.write("\n");
              out.write("    function handleClickSignIn() {\n");
              out.write("        trackEvent(\"authentication-portal-basicauth-click-sign-in\", {\n");
              out.write("            \"app\": insightsAppIdentifier,\n");
              out.write("            \"tenant\": insightsTenantIdentifier !== \"null\" ? insightsTenantIdentifier : \"\"\n");
              out.write("        });\n");
              out.write("    }\n");
              out.write("\n");
              out.write("    // Removing the recaptcha UI from the keyboard tab order\n");
              out.write("    Array.prototype.forEach.call(document.getElementsByClassName(\"g-recaptcha\"), function (element) {\n");
              out.write("            //Add a load event listener to each wrapper, using capture.\n");
              out.write("            element.addEventListener(\"load\", function (e) {\n");
              out.write("                //Get the data-tabindex attribute value from the wrapper.\n");
              out.write("                var tabindex = e.currentTarget.getAttribute(\"data-tabindex\");\n");
              out.write("                //Check if the attribute is set.\n");
              out.write("                if (tabindex) {\n");
              out.write("                    //Set the tabIndex on the iframe.\n");
              out.write("                    e.target.tabIndex = \"-1\";\n");
              out.write("                }\n");
              out.write("            }, true);\n");
              out.write("        });\n");
              out.write("\n");
              out.write("</script>\n");
              out.write("\n");
              out.write("                                    ");

                                }
                            }
                        }
                    
              out.write("\n");
              out.write("                    ");
if (idpAuthenticatorMapping != null &&
                            idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME) != null) { 
              out.write("\n");
              out.write("\n");
              out.write("                    ");
} 
              out.write("\n");
              out.write("                    ");

                        if ((hasLocalLoginOptions && localAuthenticatorNames.size() > 1) || (!hasLocalLoginOptions)
                                || (hasLocalLoginOptions && idpAuthenticatorMapping != null && idpAuthenticatorMapping.size() > 1)) {
                    
              out.write("\n");
              out.write("                    ");
 if (localAuthenticatorNames.contains(BASIC_AUTHENTICATOR) ||
                            localAuthenticatorNames.contains(IDENTIFIER_EXECUTOR)) { 
              out.write("\n");
              out.write("                    <div class=\"ui horizontal divider\">\n");
              out.write("                        ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "or"));
              out.write("\n");
              out.write("                    </div>\n");
              out.write("                    ");
 } 
              out.write("\n");
              out.write("                    <div class=\"field\">\n");
              out.write("                        <div class=\"ui vertical ui center aligned segment form\">\n");
              out.write("                            ");

                                int iconId = 0;
                                if (idpAuthenticatorMapping != null) {
                                    boolean isEnterpriseUserLogin = false;
                                    boolean isOrgEnterpriseUserLogin = false;
                                for (Map.Entry<String, String> idpEntry : idpAuthenticatorMapping.entrySet()) {
                                    iconId++;
                                    if (!idpEntry.getKey().equals(Constants.RESIDENT_IDP_RESERVED_NAME)) {
                                        String idpName = idpEntry.getKey();
                                        String idpDisplayName = idpName;
                                        boolean isHubIdp = false;
                                        boolean isGoogleIdp = false;
                                        boolean isGitHubIdp = false;
                                        boolean isFacebookIdp = false;
                                        boolean isMicrosoftIdp = false;
                                        boolean isGoogleOneTap = true;

                                        String GOOGLE_CLIENT_ID = "";
                                        String GOOGLE_CALLBACK_URL = "";
                                        boolean GOOGLE_ONE_TAP_ENABLED = false;

                                        if ("Asgardeo Platform IDP".equals(idpName)) {
                                            idpDisplayName = "Asgardeo";
                                        }
                                        if (idpName.endsWith(".hub")) {
                                            isHubIdp = true;
                                            idpName = idpName.substring(0, idpName.length() - 4);
                                        }
                                        if (GOOGLE_AUTHENTICATOR.equals(idpEntry.getValue())) {
                                            isGoogleIdp = true;
                                            IdentityProviderDataRetrievalClient identityProviderDataRetrievalClient =
                                                new IdentityProviderDataRetrievalClient();
                                            List<String> configKeys = new ArrayList<>();
                                            configKeys.add("ClientId");
                                            configKeys.add("callbackUrl");
                                            configKeys.add("IsGoogleOneTapEnabled");

                                            try {
                                                Map<String,String> idpConfigMap =
                                                    identityProviderDataRetrievalClient.getFederatedIdpConfigs(
                                                        tenantDomain, GOOGLE_AUTHENTICATOR, idpName, configKeys);
                                                if (MapUtils.isNotEmpty(idpConfigMap)) {
                                                    GOOGLE_CLIENT_ID = idpConfigMap.get("ClientId");
                                                    GOOGLE_CALLBACK_URL = idpConfigMap.get("callbackUrl");
                                                    GOOGLE_ONE_TAP_ENABLED = Boolean.parseBoolean(idpConfigMap.get("IsGoogleOneTapEnabled"));
                                                }
                                            } catch (IdentityProviderDataRetrievalClientException e) {
                                                // Exception is ignored.
                                            }
                                        }
                                        if (StringUtils.equals(idpEntry.getValue(),GITHUB_AUTHENTICATOR)) {
                                            isGitHubIdp = true;
                                        }
                                        if (StringUtils.equals(idpEntry.getValue(), FACEBOOK_AUTHENTICATOR)) {
                                            isFacebookIdp = true;
                                        }
                                        if (StringUtils.equals(idpEntry.getValue(), OIDC_AUTHENTICATOR)) {
                                            if (StringUtils.equals(idpName, MICROSOFT_IDP)) {
                                                isMicrosoftIdp = true;
                                            }
                                        }
                                        if (StringUtils.equals(idpEntry.getValue(), ENTERPRISE_USER_LOGIN_AUTHENTICATOR)) {
                                            if (StringUtils.equals(userTenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT) ||
                                                    StringUtils.equals(userTenantDomain, null)) {
                                                continue;
                                            } else if (StringUtils.equals(idpName, ENTERPRISE_USER_LOGIN_ORG)) {
                                                isOrgEnterpriseUserLogin = true;
                                            } else {
                                                isEnterpriseUserLogin = true;
                                            }
                                            continue;
                                        }
                                        if (isHubIdp || isGitHubIdp || isGoogleIdp || isFacebookIdp || isMicrosoftIdp) {
                                            hasFederatedOptions = true;
                                        }
                                        // Uses the `IdentityProviderDataRetrievalClient` to get the IDP image.
                                        // TODO: Use this approach for Google, GitHub etc. since it's not scalable.
                                        // Might Need to fix E2E suite as well.
                                        String imageURL = "libs/themes/default/assets/images/identity-providers/enterprise-idp-illustration.svg";
                                        try {
                                            IdentityProviderDataRetrievalClient identityProviderDataRetrievalClient = new IdentityProviderDataRetrievalClient();
                                            imageURL = identityProviderDataRetrievalClient.getIdPImage(tenantDomain, idpName);
                                        } catch (IdentityProviderDataRetrievalClientException e) {
                                            // Exception is ignored and the default `imageURL` value will be used as a fallback.
                                        }
                                        // If any IdP's name starts with `Sign in with`, then we need to remove the `Sign in with` part.
                                        // If not, the UI will look weird with labels like `Sign in with Sign In With Google`.
                                        String EXTERNAL_CONNECTION_PREFIX = "sign in with";
                                        if (StringUtils.startsWithIgnoreCase(idpDisplayName, EXTERNAL_CONNECTION_PREFIX)) {
                                            idpDisplayName = idpDisplayName.substring(EXTERNAL_CONNECTION_PREFIX.length());
                                        }
                                        // If IdP name is "SSO", need to handle as special case.
                                        if (StringUtils.equalsIgnoreCase(idpName, SSO_AUTHENTICATOR_NAME)) {
                                            imageURL = "libs/themes/default/assets/images/identity-providers/sso.svg";
                                        }
                            
              out.write("\n");
              out.write("                                ");
 if (isHubIdp) { 
              out.write("\n");
              out.write("                                    <div class=\"field\">\n");
              out.write("                                        <button class=\"ui labeled icon button fluid isHubIdpPopupButton\" id=\"icon-");
              out.print(iconId);
              out.write("\">\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write(" <strong>");
              out.print(Encode.forHtmlContent(idpDisplayName));
              out.write("</strong>\n");
              out.write("                                        </button>\n");
              out.write("                                        <div class=\"ui flowing popup transition hidden isHubIdpPopup\">\n");
              out.write("                                            <h5 class=\"font-large\">");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"sign.in.with"));
              out.write("\n");
              out.write("                                                ");
              out.print(Encode.forHtmlContent(idpDisplayName));
              out.write("</h5>\n");
              out.write("                                            <div class=\"content\">\n");
              out.write("                                                <form class=\"ui form\">\n");
              out.write("                                                    <div class=\"field\">\n");
              out.write("                                                        <input id=\"domainName\" class=\"form-control\" type=\"text\"\n");
              out.write("                                                            placeholder=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "domain.name"));
              out.write("\">\n");
              out.write("                                                    </div>\n");
              out.write("                                                    <input type=\"button\" class=\"ui button primary\"\n");
              out.write("                                                        onClick=\"javascript: myFunction('");
              out.print(idpName);
              out.write('\'');
              out.write(',');
              out.write('\'');
              out.print(idpEntry.getValue());
              out.write("','domainName')\"\n");
              out.write("                                                        value=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"go"));
              out.write("\"/>\n");
              out.write("                                                </form>\n");
              out.write("                                            </div>\n");
              out.write("                                        </div>\n");
              out.write("                                    </div>\n");
              out.write("                                    <br>\n");
              out.write("                                ");
 } else if (isGoogleIdp) { 
              out.write("\n");
              out.write("                                    <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                        <div\n");
              out.write("                                            class=\"ui basic segment google-one-tap-loader\"\n");
              out.write("                                            id=\"googleSignInLoading\"\n");
              out.write("                                            data-testid=\"login-page-sign-in-with-google-loader\"\n");
              out.write("                                        >\n");
              out.write("                                            <div class=\"ui active inverted dimmer\">\n");
              out.write("                                                <div class=\"ui small loader\"></div>\n");
              out.write("                                            </div>\n");
              out.write("                                        </div>\n");
              out.write("                                        <div class=\"field\" id=\"googleSignIn\" style=\"display: none;\">\n");
              out.write("                                            <button type=\"button\"\n");
              out.write("                                                    class=\"ui button\"\n");
              out.write("                                                    data-testid=\"login-page-sign-in-with-google\"\n");
              out.write("                                                    onclick=\"handleNoDomain(this,\n");
              out.write("                                                                '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpName)));
              out.write("',\n");
              out.write("                                                                '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getValue())));
              out.write("')\"\n");
              out.write("                                            >\n");
              out.write("                                                <img\n");
              out.write("                                                    class=\"ui image\"\n");
              out.write("                                                    src=\"libs/themes/default/assets/images/identity-providers/google-idp-illustration.svg\"\n");
              out.write("                                                    alt=\"Google Login icon\"\n");
              out.write("                                                    role=\"presentation\">\n");
              out.write("                                                <span>");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write(' ');
              out.print(Encode.forHtmlContent(idpDisplayName));
              out.write("</span>\n");
              out.write("                                            </button>\n");
              out.write("                                        </div>\n");
              out.write("                                    </div>\n");
              out.write("\n");
              out.write("                                    ");
 if (GOOGLE_ONE_TAP_ENABLED) { 
              out.write("\n");
              out.write("\n");
              out.write("                                        <script src=\"https://accounts.google.com/gsi/client\" async defer></script>\n");
              out.write("\n");
              out.write("                                        <div id=\"google_parent\" class=\"google-one-tap-container\"></div>\n");
              out.write("\n");
              out.write("                                        <form action=\"");
              out.print(GOOGLE_CALLBACK_URL);
              out.write("\" method=\"post\" id=\"googleOneTapForm\" style=\"display: none;\">\n");
              out.write("                                            <input type=\"hidden\" name=\"state\" value=\"");
              out.print(Encode.forHtmlAttribute(request.getParameter("sessionDataKey")));
              out.write("\"/>\n");
              out.write("                                            <input type=\"hidden\" name=\"idp\" value=\"");
              out.print(idpName);
              out.write("\"/>\n");
              out.write("                                            <input type=\"hidden\" name=\"authenticator\"  value=\"");
              out.print(idpEntry.getValue());
              out.write("\"/>\n");
              out.write("                                            <input type=\"hidden\" name=\"one_tap_enabled\"  value=\"true\"/>\n");
              out.write("                                            <input type=\"hidden\" name=\"internal_submission\"  value=\"true\"/>\n");
              out.write("                                            <input type=\"hidden\" name=\"credential\" id=\"credential\"/>\n");
              out.write("                                        </form>\n");
              out.write("\n");
              out.write("                                        <script>\n");
              out.write("\n");
              out.write("                                            if (navigator) {\n");
              out.write("                                                var userAgent = navigator.userAgent;\n");
              out.write("                                                var browserName = void 0;\n");
              out.write("                                                var restrictedBrowsersForGOT = \"");
              out.print(restrictedBrowsersForGOT);
              out.write("\";\n");
              out.write("\n");
              out.write("                                                if (userAgent.match(/chrome|chromium|crios/i)) {\n");
              out.write("                                                    browserName = \"chrome\";\n");
              out.write("                                                } else if (userAgent.match(/firefox|fxios/i)) {\n");
              out.write("                                                    browserName = \"firefox\";\n");
              out.write("                                                } else if (userAgent.match(/safari/i)) {\n");
              out.write("                                                    browserName = \"safari\";\n");
              out.write("                                                } else if (userAgent.match(/opr\\//i)) {\n");
              out.write("                                                    browserName = \"opera\";\n");
              out.write("                                                } else if (userAgent.match(/edg/i)) {\n");
              out.write("                                                    browserName = \"edge\";\n");
              out.write("                                                } else {\n");
              out.write("                                                    browserName = \"No browser detection\";\n");
              out.write("                                                }\n");
              out.write("\n");
              out.write("                                                if (restrictedBrowsersForGOT !== null\n");
              out.write("                                                    && restrictedBrowsersForGOT.trim() !== ''\n");
              out.write("                                                    && restrictedBrowsersForGOT.toLowerCase().includes(browserName)) {\n");
              out.write("                                                        document.getElementById(\"googleSignInLoading\").style.display = \"none\";\n");
              out.write("                                                        document.getElementById(\"googleSignIn\").style.display = \"block\";\n");
              out.write("                                                } else {\n");
              out.write("                                                    window.onload = function callGoogleOneTap() {\n");
              out.write("                                                        google.accounts.id.initialize({\n");
              out.write("                                                            client_id: \"");
              out.print(Encode.forJavaScriptAttribute(GOOGLE_CLIENT_ID));
              out.write("\",\n");
              out.write("                                                            prompt_parent_id: \"google_parent\",\n");
              out.write("                                                            cancel_on_tap_outside: false,\n");
              out.write("                                                            nonce: \"");
              out.print(Encode.forJavaScriptAttribute(request.getParameter("sessionDataKey")));
              out.write("\",\n");
              out.write("                                                            callback: handleCredentialResponse\n");
              out.write("                                                        });\n");
              out.write("                                                        google.accounts.id.prompt((notification) => {\n");
              out.write("                                                             onMoment(notification);\n");
              out.write("                                                        });\n");
              out.write("                                                    }\n");
              out.write("                                                }\n");
              out.write("                                            }\n");
              out.write("                                        </script>\n");
              out.write("                                    ");
} else {
              out.write("\n");
              out.write("                                        <script>\n");
              out.write("                                           document.getElementById(\"googleSignInLoading\").style.display = \"none\";\n");
              out.write("                                           document.getElementById(\"googleSignIn\").style.display = \"block\";\n");
              out.write("                                        </script>\n");
              out.write("                                    ");
} 
              out.write("\n");
              out.write("                                    <br>\n");
              out.write("                                ");
 } else if (isGitHubIdp) { 
              out.write("\n");
              out.write("                                    <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                        <div class=\"field\">\n");
              out.write("                                                <button type=\"button\"\n");
              out.write("                                                        class=\"ui button\"\n");
              out.write("                                                        data-testid=\"login-page-sign-in-with-github\"\n");
              out.write("                                                        onclick=\"handleNoDomain(this,\n");
              out.write("                                                            '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpName)));
              out.write("',\n");
              out.write("                                                            '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getValue())));
              out.write("')\"\n");
              out.write("                                                >\n");
              out.write("                                                <img\n");
              out.write("                                                    class=\"ui image\"\n");
              out.write("                                                    src=\"libs/themes/default/assets/images/identity-providers/github-idp-illustration.svg\"\n");
              out.write("                                                    alt=\"Github login icon\"\n");
              out.write("                                                    role=\"presentation\">\n");
              out.write("                                                <span>");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write(' ');
              out.print(Encode.forHtmlContent(idpDisplayName));
              out.write("</span>\n");
              out.write("                                            </button>\n");
              out.write("                                        </div>\n");
              out.write("                                    </div>\n");
              out.write("                                    <br>\n");
              out.write("                                ");
 } else if (isFacebookIdp) { 
              out.write("\n");
              out.write("                                    <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                        <div class=\"field\">\n");
              out.write("                                                <button\n");
              out.write("                                                type=\"button\"\n");
              out.write("                                                class=\"ui button\"\n");
              out.write("                                                data-testid=\"login-page-sign-in-with-facebook\"\n");
              out.write("                                                onclick=\"handleNoDomain(this,\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpName)));
              out.write("',\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getValue())));
              out.write("')\"\n");
              out.write("                                                >\n");
              out.write("                                                <img\n");
              out.write("                                                    class=\"ui image\"\n");
              out.write("                                                    src=\"libs/themes/default/assets/images/identity-providers/facebook-idp-illustration.svg\"\n");
              out.write("                                                    alt=\"Facebook login icon\"\n");
              out.write("                                                    role=\"presentation\">\n");
              out.write("                                                <span>");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write(' ');
              out.print(Encode.forHtmlContent(idpDisplayName));
              out.write("</span>\n");
              out.write("                                            </button>\n");
              out.write("                                        </div>\n");
              out.write("                                    </div>\n");
              out.write("                                    <br>\n");
              out.write("                                ");
 } else if (isMicrosoftIdp) { 
              out.write("\n");
              out.write("                                    <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                    <div class=\"field\">\n");
              out.write("                                        <button\n");
              out.write("                                                type=\"button\"\n");
              out.write("                                                class=\"ui button\"\n");
              out.write("                                                data-testid=\"login-page-sign-in-with-microsoft\"\n");
              out.write("                                                onclick=\"handleNoDomain(this,\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpName)));
              out.write("',\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getValue())));
              out.write("')\"\n");
              out.write("                                        >\n");
              out.write("                                                <img\n");
              out.write("                                                    class=\"ui image\"\n");
              out.write("                                                    src=\"libs/themes/default/assets/images/identity-providers/microsoft-idp-illustration.svg\"\n");
              out.write("                                                    alt=\"Microsoft login icon\"\n");
              out.write("                                                    role=\"presentation\">\n");
              out.write("                                                <span>");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write(' ');
              out.print(Encode.forHtmlContent(idpDisplayName));
              out.write("</span>\n");
              out.write("                                        </button>\n");
              out.write("                                        </div>\n");
              out.write("                                    </div>\n");
              out.write("                                    <br>\n");
              out.write("                                    ");
 } else {

                                        String logoPath = imageURL;

                                        if (imageURL == null || imageURL.isEmpty()) {
                                            logoPath = "libs/themes/default/assets/images/identity-providers/enterprise-idp-illustration.svg";
                                        }

                                        if ("Asgardeo Platform IDP".equals(idpName)) {
                                            logoPath = "libs/themes/wso2is/assets/images/identity-providers/asgardeo.svg";
                                        }

                                        if (!imageURL.isEmpty() && imageURL.contains("assets/images/logos/")) {
                                            String[] imageURLSegements = imageURL.split("/");
                                            String logoFileName = imageURLSegements[imageURLSegements.length - 1];

                                            logoPath = "libs/themes/default/assets/images/identity-providers/" + logoFileName;
                                        }
                                    
              out.write("\n");
              out.write("                                    <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                        <div class=\"field\">\n");
              out.write("                                            <button\n");
              out.write("                                                id=\"icon-");
              out.print(iconId);
              out.write("\"\n");
              out.write("                                                type=\"button\"\n");
              out.write("                                                class=\"ui button\"\n");
              out.write("                                                data-testid='login-page-sign-in-with-");
              out.print(Encode.forHtmlAttribute(idpName));
              out.write("'\n");
              out.write("                                                onclick=\"handleNoDomain(this,\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpName)));
              out.write("',\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getValue())));
              out.write("')\"\n");
              out.write("                                                >\n");
              out.write("                                                    <img\n");
              out.write("                                                        role=\"presentation\"\n");
              out.write("                                                        alt=\"sign-in-with-");
              out.print(Encode.forHtmlAttribute(idpName));
              out.write(" icon\"\n");
              out.write("                                                        class=\"ui image\"\n");
              out.write("                                                        src=\"");
              out.print(Encode.forHtmlAttribute(logoPath));
              out.write("\">\n");
              out.write("                                                    <span>");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write(' ');
              out.print(Encode.forHtmlContent(idpDisplayName));
              out.write("</span>\n");
              out.write("                                            </button>\n");
              out.write("                                        </div>\n");
              out.write("                                    </div>\n");
              out.write("                                    <br>\n");
              out.write("                                ");
 } 
              out.write("\n");
              out.write("                            ");
 } else if (localAuthenticatorNames.size() > 0) {
                                if (localAuthenticatorNames.contains(IWA_AUTHENTICATOR)) {
                            
              out.write("\n");
              out.write("                            <div class=\"field\">\n");
              out.write("                                <button class=\"ui blue labeled icon button fluid\"\n");
              out.write("                                    onclick=\"handleNoDomain(this,\n");
              out.write("                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
              out.write("',\n");
              out.write("                                        'IWAAuthenticator')\"\n");
              out.write("                                    id=\"icon-");
              out.print(iconId);
              out.write("\"\n");
              out.write("                                    title=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write(" IWA\">\n");
              out.write("                                    ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write(" <strong>IWA</strong>\n");
              out.write("                                </button>\n");
              out.write("                            </div>\n");
              out.write("                            ");

                                }
                                if (localAuthenticatorNames.contains(X509_CERTIFICATE_AUTHENTICATOR)) {
                            
              out.write("\n");
              out.write("                            <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                <div class=\"field\">\n");
              out.write("                                    <button class=\"ui secondary button\" onclick=\"handleNoDomain(this,\n");
              out.write("                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
              out.write("',\n");
              out.write("                                        'x509CertificateAuthenticator')\" id=\"icon-");
              out.print(iconId);
              out.write("\"\n");
              out.write("                                        title=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write(" X509 Certificate\"\n");
              out.write("                                    >\n");
              out.write("                                        <img\n");
              out.write("                                            class=\"ui image\"\n");
              out.write("                                            src=\"libs/themes/default/assets/images/icons/x509-authenticator-icon.svg\"\n");
              out.write("                                            alt=\"Magic Link Logo\"\n");
              out.write("                                            role=\"presentation\"\n");
              out.write("                                        />\n");
              out.write("                                        <span>\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write(" x509 Certificate\n");
              out.write("                                        </span>\n");
              out.write("                                    </button>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            <br />\n");
              out.write("                            ");

                                }
                                if (localAuthenticatorNames.contains(FIDO_AUTHENTICATOR)) {
                            
              out.write("\n");
              out.write("                            <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                <div class=\"field\">\n");
              out.write("                                    <button class=\"ui button\" onclick=\"handleNoDomain(this,\n");
              out.write("                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
              out.write("',\n");
              out.write("                                        'FIDOAuthenticator')\" id=\"icon-");
              out.print(iconId);
              out.write("\"\n");
              out.write("                                        title=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write("\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "fido.authenticator" ));
              out.write("\"\n");
              out.write("                                        data-componentid=\"login-page-sign-in-with-fido\"\n");
              out.write("                                    >\n");
              out.write("                                        <img\n");
              out.write("                                            class=\"ui image\"\n");
              out.write("                                            src=\"libs/themes/default/assets/images/authenticators/fido-passkey-black.svg\"\n");
              out.write("                                            alt=\"Fido Logo\"\n");
              out.write("                                            role=\"presentation\" />\n");
              out.write("                                        <span>\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with" ));
              out.write("\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "fido.authenticator" ));
              out.write("\n");
              out.write("                                        </span>\n");
              out.write("\n");
              out.write("                                    </button>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            <br />\n");
              out.write("                            ");

                                }
                                    if (localAuthenticatorNames.contains(MAGIC_LINK_AUTHENTICATOR)) {
                            
              out.write("\n");
              out.write("                            <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                <div class=\"field\">\n");
              out.write("                                    <button class=\"ui secondary button\" onclick=\"handleNoDomain(this,\n");
              out.write("                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
              out.write("',\n");
              out.write("                                        '");
              out.print(MAGIC_LINK_AUTHENTICATOR);
              out.write("')\" id=\"icon-");
              out.print(iconId);
              out.write("\"\n");
              out.write("                                        title=\"");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write("\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "magic.link" ));
              out.write("\"\n");
              out.write("                                        data-componentid=\"login-page-sign-in-with-magic-link\">\n");
              out.write("                                        <img\n");
              out.write("                                            class=\"ui image\"\n");
              out.write("                                            src=\"libs/themes/default/assets/images/icons/magic-link-icon.svg\"\n");
              out.write("                                            alt=\"Magic Link Logo\"\n");
              out.write("                                            role=\"presentation\" />\n");
              out.write("                                        <span>\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with" ));
              out.write("\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "magic.link" ));
              out.write("\n");
              out.write("                                        </span>\n");
              out.write("\n");
              out.write("                                    </button>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            <br />\n");
              out.write("                            ");

                                }
                                if (localAuthenticatorNames.contains("totp")) {
                            
              out.write("\n");
              out.write("                                <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                <div class=\"field\">\n");
              out.write("                                        <button\n");
              out.write("                                            type=\"button\"\n");
              out.write("                                            id=\"icon-");
              out.print(iconId);
              out.write("\"\n");
              out.write("                                            class=\"ui button secondary\"\n");
              out.write("                                            data-testid=\"login-page-sign-in-with-totp\"\n");
              out.write("                                            onclick=\"handleNoDomain(this,\n");
              out.write("                                                '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
              out.write("',\n");
              out.write("                                                'totp')\"\n");
              out.write("                                        >\n");
              out.write("                                        <img\n");
              out.write("                                            class=\"ui image\"\n");
              out.write("                                            src=\"libs/themes/default/assets/images/icons/outline-icons/clock-outline.svg\"\n");
              out.write("                                            alt=\"TOTP Logo\"\n");
              out.write("                                            role=\"presentation\">\n");
              out.write("                                        <span>\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write("\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "totp"));
              out.write("\n");
              out.write("                                        </span>\n");
              out.write("                                    </button>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            <br>\n");
              out.write("                            ");

                                }
                                if (localAuthenticatorNames.contains("sms-otp-authenticator")) {
                            
              out.write("\n");
              out.write("                                <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                <div class=\"field\">\n");
              out.write("                                        <button\n");
              out.write("                                            type=\"button\"\n");
              out.write("                                            id=\"icon-");
              out.print(iconId);
              out.write("\"\n");
              out.write("                                            class=\"ui button\"\n");
              out.write("                                            data-testid=\"login-page-sign-in-with-sms-otp-authenticator\"\n");
              out.write("                                            onclick=\"handleNoDomain(this,\n");
              out.write("                                                '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
              out.write("',\n");
              out.write("                                                'sms-otp-authenticator')\"\n");
              out.write("                                        >\n");
              out.write("                                        <img class=\"ui image\" src=\"libs/themes/default/assets/images/icons/sms-icon.svg\">\n");
              out.write("                                        <span>\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write("\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sms.otp"));
              out.write("\n");
              out.write("                                        </span>\n");
              out.write("                                    </button>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            <br>\n");
              out.write("                            ");

                                        }
                                if (localAuthenticatorNames.contains("email-otp-authenticator")) {
                            
              out.write("\n");
              out.write("                                <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                <div class=\"field\">\n");
              out.write("                                        <button\n");
              out.write("                                            type=\"button\"\n");
              out.write("                                            id=\"icon-");
              out.print(iconId);
              out.write("\"\n");
              out.write("                                            class=\"ui button secondary\"\n");
              out.write("                                            data-testid=\"login-page-sign-in-with-email-otp\"\n");
              out.write("                                            onclick=\"handleNoDomain(this,\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
              out.write("',\n");
              out.write("                                                    'email-otp-authenticator')\"\n");
              out.write("                                        >\n");
              out.write("                                        <img\n");
              out.write("                                            class=\"ui image\"\n");
              out.write("                                            src=\"libs/themes/default/assets/images/icons/solid-icons/email-solid.svg\"\n");
              out.write("                                            alt=\"Email OTP Logo\"\n");
              out.write("                                            role=\"presentation\">\n");
              out.write("                                        <span>\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write("\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "email.otp"));
              out.write("\n");
              out.write("                                        </span>\n");
              out.write("                                    </button>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            <br>\n");
              out.write("                            ");

                                        }
                                if (localAuthenticatorNames.contains("push-notification-authenticator")) {
                            
              out.write("\n");
              out.write("                                <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                <div class=\"field\">\n");
              out.write("                                        <button\n");
              out.write("                                            type=\"button\"\n");
              out.write("                                            id=\"icon-");
              out.print(iconId);
              out.write("\"\n");
              out.write("                                            class=\"ui button secondary\"\n");
              out.write("                                            data-testid=\"login-page-sign-in-with-push-notification\"\n");
              out.write("                                            onclick=\"handleNoDomain(this,\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
              out.write("',\n");
              out.write("                                                    'push-notification-authenticator')\"\n");
              out.write("                                        >\n");
              out.write("                                        <img\n");
              out.write("                                            class=\"ui image\"\n");
              out.write("                                            src=\"libs/themes/default/assets/images/icons/push.svg\"\n");
              out.write("                                            alt=\"Push Notification Logo\"\n");
              out.write("                                            role=\"presentation\">\n");
              out.write("                                        <span>\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write("\n");
              out.write("                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "push.notification"));
              out.write("\n");
              out.write("                                        </span>\n");
              out.write("                                    </button>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            <br>\n");
              out.write("                            ");

                                        }
                                for (String localAuthenticator : localAuthenticatorNames) {
                                    if (registeredLocalAuthenticators.contains(localAuthenticator)) {
                                        continue;
                                    }

                                    if (localAuthenticator.startsWith(CUSTOM_LOCAL_AUTHENTICATOR_PREFIX)) {
                                       
                                        String customLocalAuthenticatorImageURL = "libs/themes/default/assets/images/authenticators/custom-authenticator.svg";
                                        String customLocalAuthenticatorDisplayName = localAuthenticator;
                                        Map<String, String> authenticatorConfigMap = new HashMap<>();
                                        try {
                                            AuthenticatorDataRetrievalClient authenticatorDataRetrievalClient = new AuthenticatorDataRetrievalClient();
                                            authenticatorConfigMap = authenticatorDataRetrievalClient.getAuthenticatorConfig(tenantDomain, localAuthenticator);
                                        } catch (AuthenticatorDataRetrievalClientException e) {
                                            // Exception is ignored and the default values will be used as a fallback.
                                        }

                                        if (MapUtils.isNotEmpty(authenticatorConfigMap) && authenticatorConfigMap.containsKey("definedBy") 
                                            && authenticatorConfigMap.get("definedBy").equals("USER")) {
                                            
                                            if (authenticatorConfigMap.containsKey("image")) {
                                                customLocalAuthenticatorImageURL = authenticatorConfigMap.get("image");
                                            }
                                            customLocalAuthenticatorDisplayName = authenticatorConfigMap.get("displayName");
                            
              out.write("\n");
              out.write("                                <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                    <div class=\"field\">\n");
              out.write("                                            <button\n");
              out.write("                                                type=\"button\"\n");
              out.write("                                                id=\"icon-");
              out.print(iconId);
              out.write("\"\n");
              out.write("                                                class=\"ui button secondary\"\n");
              out.write("                                                data-testid=\"login-page-sign-in-with-");
              out.print(Encode.forHtmlAttribute(localAuthenticator));
              out.write("\"\n");
              out.write("                                                onclick=\"handleNoDomain(this,\n");
              out.write("                                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
              out.write("',\n");
              out.write("                                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(localAuthenticator)));
              out.write("')\"\n");
              out.write("                                            >\n");
              out.write("                                            <img\n");
              out.write("                                                class=\"ui image\"\n");
              out.write("                                                src=\"");
              out.print(Encode.forHtmlAttribute(customLocalAuthenticatorImageURL));
              out.write("\"\n");
              out.write("                                                alt=\"");
              out.print(Encode.forHtmlAttribute(localAuthenticator));
              out.write(" Logo\"\n");
              out.write("                                                role=\"presentation\">\n");
              out.write("                                            <span>\n");
              out.write("                                                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write("\n");
              out.write("                                                ");
              out.print(Encode.forHtmlAttribute(customLocalAuthenticatorDisplayName));
              out.write("\n");
              out.write("                                            </span>\n");
              out.write("                                            </button>\n");
              out.write("                                    </div>\n");
              out.write("                                </div>\n");
              out.write("                            <br>\n");
              out.write("                            <br>\n");
              out.write("                            ");

                                            continue;   
                                        } 
                                    }
                            
              out.write("\n");
              out.write("                                <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                    <div class=\"field\">\n");
              out.write("                                            <button\n");
              out.write("                                                type=\"button\"\n");
              out.write("                                                id=\"icon-");
              out.print(iconId);
              out.write("\"\n");
              out.write("                                                class=\"ui button secondary\"\n");
              out.write("                                                data-testid=\"login-page-sign-in-with-");
              out.print(localAuthenticator);
              out.write("\"\n");
              out.write("                                                onclick=\"handleNoDomain(this,\n");
              out.write("                                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getKey())));
              out.write("',\n");
              out.write("                                                        '");
              out.print(localAuthenticator);
              out.write("')\"\n");
              out.write("                                            >\n");
              out.write("                                            <img\n");
              out.write("                                                class=\"ui image\"\n");
              out.write("                                                src=\"libs/themes/default/assets/images/authenticators/");
              out.print(localAuthenticator);
              out.write(".svg\"\n");
              out.write("                                                alt=\"");
              out.print(localAuthenticator);
              out.write(" Logo\"\n");
              out.write("                                                role=\"presentation\">\n");
              out.write("                                            <span>\n");
              out.write("                                                ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.with"));
              out.write("\n");
              out.write("                                                ");
              out.print(localAuthenticator);
              out.write("\n");
              out.write("                                            </span>\n");
              out.write("                                            </button>\n");
              out.write("                                    </div>\n");
              out.write("                            </div>\n");
              out.write("                            <br>\n");
              out.write("                            ");

                                }
                                    }
                                }
                                if (isOrgEnterpriseUserLogin) { 
              out.write("\n");
              out.write("                                        <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                            <div class=\"field\">\n");
              out.write("                                                <button\n");
              out.write("                                                    id=\"org-continue-button\"\n");
              out.write("                                                    type=\"button\"\n");
              out.write("                                                    class=\"ui button\"\n");
              out.write("                                                    data-testid='login-page-sign-in-with-");
              out.print(Encode.forHtmlContent(ENTERPRISE_USER_LOGIN_ORG));
              out.write("'\n");
              out.write("                                                    onclick=\"handleOrgEnterpriseIdp(this,\n");
              out.write("                                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(ENTERPRISE_USER_LOGIN_ORG)));
              out.write("',\n");
              out.write("                                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(ENTERPRISE_USER_LOGIN_AUTHENTICATOR)));
              out.write("',\n");
              out.write("                                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(userTenantDomain)));
              out.write("')\"\n");
              out.write("                                                    >\n");
              out.write("                                                        <img class=\"ui image\" src=\"libs/themes/wso2is/assets/images/branding/asgardeo-trifacta.svg\">\n");
              out.write("                                                        <span>\n");
              out.write("                                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "continue.with"));
              out.write("\n");
              out.write("                                                            ");
              out.print(Encode.forHtmlContent("Asgardeo"));
              out.write("\n");
              out.write("                                                        </span>\n");
              out.write("                                                </button>\n");
              out.write("                                            </div>\n");
              out.write("                                        </div>\n");
              out.write("                                    ");
 } else if (isEnterpriseUserLogin && StringUtils.equals(userType, USER_TYPE_ASGARDEO)) { 
              out.write("\n");
              out.write("                                        <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                                            <div class=\"field\">\n");
              out.write("                                                <button\n");
              out.write("                                                    id=\"asgardeo-continue-button\"\n");
              out.write("                                                    type=\"button\"\n");
              out.write("                                                    class=\"ui button\"\n");
              out.write("                                                    data-testid='login-page-sign-in-with-");
              out.print(Encode.forHtmlContent(ENTERPRISE_USER_LOGIN_IDP));
              out.write("'\n");
              out.write("                                                    onclick=\"handleEnterpriseIdp(this,\n");
              out.write("                                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(ENTERPRISE_USER_LOGIN_IDP)));
              out.write("',\n");
              out.write("                                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(ENTERPRISE_USER_LOGIN_AUTHENTICATOR)));
              out.write("',\n");
              out.write("                                                        '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(userTenantDomain)));
              out.write("')\"\n");
              out.write("                                                    >\n");
              out.write("                                                        <img class=\"ui image\" src=\"libs/themes/default/assets/images/identity-providers/enterprise-idp-illustration.svg\">\n");
              out.write("                                                        <span>\n");
              out.write("                                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "continue.with"));
              out.write("\n");
              out.write("                                                            ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "organization"));
              out.write("\n");
              out.write("                                                        </span>\n");
              out.write("                                                </button>\n");
              out.write("                                            </div>\n");
              out.write("                                        </div>\n");
              out.write("                                    ");
 }
                            } 
              out.write("\n");
              out.write("                            </div>\n");
              out.write("                        </div>\n");
              out.write("                    ");
 } 
              out.write("\n");
              out.write("\n");
              out.write("                    ");

                    String clientId = Encode.forHtmlAttribute(request.getParameter("client_id"));
                    String urlParameters = "";
                    if (
                        !isSelfSignUpEnabledInTenant
                        && StringUtils.isNotBlank(application.getInitParameter("AccountRegisterEndpointURL"))
                        && (
                            StringUtils.equals("CONSOLE",clientId)
                            || (
                                StringUtils.equals("MY_ACCOUNT",clientId)
                                && StringUtils.equals(tenantForTheming, IdentityManagementEndpointConstants.SUPER_TENANT)
                            )
                        )
                        && !StringUtils.equals("true", promptAccountLinking)) {
                            String recoveryEPAvailable = application.getInitParameter("EnableRecoveryEndpoint");
                            String enableSelfSignUpEndpoint = application.getInitParameter("EnableSelfSignUpEndpoint");
                            Boolean isRecoveryEPAvailable = false;
                            Boolean isSelfSignUpEPAvailable = false;
                            String urlEncodedURL = "";
                            if (StringUtils.isNotBlank(recoveryEPAvailable)) {
                                isRecoveryEPAvailable = Boolean.valueOf(recoveryEPAvailable);
                            } else {
                                isRecoveryEPAvailable = isRecoveryEPAvailable();
                            }
                            if (StringUtils.isNotBlank(enableSelfSignUpEndpoint)) {
                                isSelfSignUpEPAvailable = Boolean.valueOf(enableSelfSignUpEndpoint);
                            } else {
                                isSelfSignUpEPAvailable = isSelfSignUpEPAvailable();
                            }
                            if (isRecoveryEPAvailable || isSelfSignUpEPAvailable) {
                                if (StringUtils.equals("business-app", insightsAppIdentifier)) {
                                    String scheme = request.getScheme();
                                    String serverName = request.getServerName();
                                    int serverPort = request.getServerPort();
                                    String uri = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_REQUEST_URI);
                                    String prmstr = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING);
                                    String urlWithoutEncoding = scheme + "://" +serverName + ":" + serverPort + uri + "?" + prmstr;
                                    if ((scheme == "http" && serverPort == HttpURL.DEFAULT_PORT) || (scheme == "https" && serverPort == HttpsURL.DEFAULT_PORT)) {
                                        urlWithoutEncoding = scheme + "://" + serverName + uri + "?" + prmstr;
                                    }
                                    urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, UTF_8);
                                    urlParameters = prmstr;
                                } else {
                                    urlParameters = "utm_source=" + insightsAppIdentifier;
                                }
                                if (StringUtils.isBlank(accountRegistrationEndpointContextURL)) {
                                    accountRegistrationEndpointContextURL = identityMgtEndpointContextURL + ACCOUNT_RECOVERY_ENDPOINT_REGISTER;
                                }
                            }
                        
              out.write("\n");
              out.write("                            <div class=\"mt-4 mb-4\">\n");
              out.write("                                <div class=\"mt-3 external-link-container text-small\">\n");
              out.write("                                    ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "dont.have.an.account"));
              out.write("\n");
              out.write("                                    <a\n");
              out.write("                                        onclick=\"handleSignupClick()\"\n");
              out.write("                                        href=\"");
              out.print(getRegistrationUrl(accountRegistrationEndpointContextURL, urlEncodedURL, urlParameters));
              out.write("\"\n");
              out.write("                                        target=\"_self\"\n");
              out.write("                                        class=\"clickable-link\"\n");
              out.write("                                        rel=\"noopener noreferrer\"\n");
              out.write("                                        data-testid=\"login-page-early-signup-link\"\n");
              out.write("                                        style=\"cursor: pointer;\"\n");
              out.write("                                    >\n");
              out.write("                                        ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "register"));
              out.write("\n");
              out.write("                                    </a>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                        ");
 }
                        if (
                            !StringUtils.equals("CONSOLE",clientId)
                            && !StringUtils.equals("MY_ACCOUNT",clientId) && !hasLocalLoginOptions && hasFederatedOptions &&
                            isSelfSignUpEnabledInTenant && isSelfSignUpEnabledInTenantPreferences
                        ) {
                                urlParameters = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING);
                        
              out.write("\n");
              out.write("                                <div class=\"ui horizontal divider\">\n");
              out.write("                                    ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "or"));
              out.write("\n");
              out.write("                                </div>\n");
              out.write("                                <div class=\"mt-0\">\n");
              out.write("                                <div class=\"buttons\">\n");
              out.write("                                    <button\n");
              out.write("                                        type=\"button\"\n");
              out.write("                                        ");
 if(StringUtils.isNotBlank(selfSignUpOverrideURL)) { 
              out.write("\n");
              out.write("                                        onclick=\"window.location.href='");
              out.print(i18nLink(userLocale, selfSignUpOverrideURL));
              out.write("';\"\n");
              out.write("                                        ");
 } else { 
              out.write("\n");
              out.write("                                        onclick=\"window.location.href='");
              out.print(StringEscapeUtils.escapeHtml4(getRegistrationUrl(accountRegistrationEndpointContextURL, srURLEncodedURL, urlParameters)));
              out.write("';\"\n");
              out.write("                                        ");
 } 
              out.write("\n");
              out.write("                                        class=\"ui large fluid button secondary\"\n");
              out.write("                                        id=\"registerLink\"\n");
              out.write("                                        role=\"button\"\n");
              out.write("                                        data-testid=\"login-page-create-account-button\"\n");
              out.write("                                    >\n");
              out.write("                                        ");
              out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "create.an.account"));
              out.write("\n");
              out.write("                                    </button>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                        ");
 } 
              out.write("\n");
              out.write("                </div>\n");
              out.write("            </div>\n");
              out.write("        ");
              int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f1.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_layout_005fcomponent_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f1);
          out.write("\n");
          out.write("        ");
          //  layout:component
          org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f2 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
          _jspx_th_layout_005fcomponent_005f2.setPageContext(_jspx_page_context);
          _jspx_th_layout_005fcomponent_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
          // /login.jsp(1343,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_layout_005fcomponent_005f2.setComponentName("ProductFooter");
          int _jspx_eval_layout_005fcomponent_005f2 = _jspx_th_layout_005fcomponent_005f2.doStartTag();
          if (_jspx_eval_layout_005fcomponent_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("            ");
              out.write("\n");
              out.write("            ");

                File productFooterFile = new File(getServletContext().getRealPath("extensions/product-footer.jsp"));
                if (productFooterFile.exists()) {
            
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-footer.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } else { 
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-footer.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } 
              out.write("\n");
              out.write("        ");
              int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f2.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_layout_005fcomponent_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f2);
          out.write("\n");
          out.write("        ");
          if (_jspx_meth_layout_005fdynamicComponent_005f0(_jspx_th_layout_005fmain_005f0, _jspx_page_context))
            return;
          out.write("\n");
          out.write("    ");
          int evalDoAfterBody = _jspx_th_layout_005fmain_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_layout_005fmain_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.reuse(_jspx_th_layout_005fmain_005f0);
      out.write("\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        File footerFile = new File(getServletContext().getRealPath("extensions/footer.jsp"));
        if (footerFile.exists()) {
    
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <script src=\"util/string-utils.js\"></script>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("\n");
      out.write("        ");
 if (Boolean.parseBoolean(request.getParameter("isSelfRegistration"))) { 
      out.write("\n");
      out.write("                $(\".ui.segment\").hide();\n");
      out.write("                window.location = \"");
      out.print(getRegistrationUrl(accountRegistrationEndpointContextURL, srURLEncodedURL, (String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING)));
      out.write("\";\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("        function onMoment(notification) {\n");
      out.write("            displayGoogleSignIn(notification.isNotDisplayed() || notification.isSkippedMoment());\n");
      out.write("\n");
      out.write("            const observed = document.querySelector('#credential_picker_container');\n");
      out.write("\n");
      out.write("            if (observed != null && notification.isDisplayed()) {\n");
      out.write("                let style = window.getComputedStyle(observed);\n");
      out.write("                const observer = new MutationObserver(function(mutations) {\n");
      out.write("                    mutations.find(function(mutation) {\n");
      out.write("                        if (style.display == \"none\") {\n");
      out.write("                          displayGoogleSignIn(true);\n");
      out.write("                        }\n");
      out.write("                        return true;\n");
      out.write("                    });\n");
      out.write("                    observer.takeRecords();\n");
      out.write("                    observer.disconnect();\n");
      out.write("                });\n");
      out.write("                observer.observe(observed, {\n");
      out.write("                    attributesList: [\"style\"],\n");
      out.write("                    attributes: true,\n");
      out.write("                    subtree: true,\n");
      out.write("                    childList: true\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            var googleOneTapLoadingElement = document.getElementById(\"googleSignInLoading\");\n");
      out.write("            if (googleOneTapLoadingElement != null) {\n");
      out.write("                googleOneTapLoadingElement.style.display = \"none\";\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Add loaded class to google_parent element to animate the google one tap container.\n");
      out.write("            document.getElementById(\"google_parent\").classList.add('loaded');\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function displayGoogleSignIn(display) {\n");
      out.write("            var element = document.getElementById(\"googleSignIn\");\n");
      out.write("            if (element != null) {\n");
      out.write("                if (display) {\n");
      out.write("                    element.style.display = \"block\";\n");
      out.write("                } else {\n");
      out.write("                    element.style.display = \"none\";\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function handleCredentialResponse(response) {\n");
      out.write("            $('#credential').val(response.credential);\n");
      out.write("            $('#googleOneTapForm').submit();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var passwordField = $(\"#password\");\n");
      out.write("        var usernameField = $(\"#usernameUserInput\");\n");
      out.write("\n");
      out.write("        var insightsAppIdentifier = \"");
      out.print(insightsAppIdentifier);
      out.write("\";\n");
      out.write("        var insightsTenantIdentifier = \"");
      out.print(insightsTenantIdentifier);
      out.write("\";\n");
      out.write("\n");
      out.write("        function checkSessionKey() {\n");
      out.write("            $.ajax({\n");
      out.write("                type: \"GET\",\n");
      out.write("                url: \"");
      out.print( Encode.forJavaScriptBlock(loginContextRequestUrl));
      out.write("\",\n");
      out.write("                xhrFields: { withCredentials: true },\n");
      out.write("                success: function (data) {\n");
      out.write("                    if (data && data.status == 'redirect' && data.redirectUrl && data.redirectUrl.length > 0) {\n");
      out.write("                        window.location.href = data.redirectUrl;\n");
      out.write("                    }\n");
      out.write("                },\n");
      out.write("                cache: false\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // show password function\n");
      out.write("        function showPassword() {\n");
      out.write("            if (passwordField.attr(\"type\") === 'text') {\n");
      out.write("                passwordField.attr(\"type\", \"password\")\n");
      out.write("                document.getElementById(\"password-eye\").classList.add(\"slash\");\n");
      out.write("            } else {\n");
      out.write("                passwordField.attr(\"type\", \"text\")\n");
      out.write("                document.getElementById(\"password-eye\").classList.remove(\"slash\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getParameterByName(name, url) {\n");
      out.write("            if (!url) {\n");
      out.write("                url = window.location.href;\n");
      out.write("            }\n");
      out.write("            name = name.replace(/[\\[\\]]/g, '\\$&');\n");
      out.write("            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n");
      out.write("            results = regex.exec(url);\n");
      out.write("            if (!results) return null;\n");
      out.write("            if (!results[2]) return \"\";\n");
      out.write("            return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        $(document).ready(function () {\n");
      out.write("            var label = $(\"#user-name-label\");\n");
      out.write("            var NATIVE_ELEMENT = 0;\n");
      out.write("            /**\n");
      out.write("             * Below condition will trigger the label popup based on the\n");
      out.write("             * text overflown property. Basically, if the text is overflown\n");
      out.write("             * we will attach the popup to the label. Otherwise we don't.\n");
      out.write("             *\n");
      out.write("             * Note that we are immediately evaluating this expression on\n");
      out.write("             * document ready state. This is because, when the user gets to\n");
      out.write("             * this page the email address / username is uneditable and is\n");
      out.write("             * represented in a label format. So, we don't need to periodically\n");
      out.write("             * check the label length changes.\n");
      out.write("             *\n");
      out.write("             * {@code NATIVE_ELEMENT} is used to access the native element\n");
      out.write("             * of the queried jquery element. There's a another variant called\n");
      out.write("             * $.get(index) but it is slow compared to computed index access.\n");
      out.write("             */\n");
      out.write("            if (label && label[NATIVE_ELEMENT]) {\n");
      out.write("                if (label[NATIVE_ELEMENT].offsetWidth < label[NATIVE_ELEMENT].scrollWidth)\n");
      out.write("                    label.popup({lastResort: \"top left\"});\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            $('.main-link').click(function () {\n");
      out.write("                $('.main-link').next().hide();\n");
      out.write("                $(this).next().toggle('fast');\n");
      out.write("                var w = $(document).width();\n");
      out.write("                var h = $(document).height();\n");
      out.write("                $('.overlay').css(\"width\", w + \"px\").css(\"height\", h + \"px\").show();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $('.overlay').click(function () {\n");
      out.write("                $(this).hide();\n");
      out.write("                $('.main-link').next().hide();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $('.ui.dimmer').dimmer({\n");
      out.write("                on: 'hover',\n");
      out.write("                duration : {\n");
      out.write("                    show : 500,\n");
      out.write("                    hide : 500\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            ");

                if(reCaptchaEnabled) {
            
      out.write("\n");
      out.write("                var error_msg = $(\"#error-msg\");\n");
      out.write("\n");
      out.write("                $(\"#loginForm\").submit(function (e) {\n");
      out.write("                    var resp = $(\"[name='g-recaptcha-response']\")[0].value;\n");
      out.write("                    if (resp.trim() == '') {\n");
      out.write("                        error_msg.text(\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"please.select.recaptcha"));
      out.write("\");\n");
      out.write("                        error_msg.show();\n");
      out.write("                        $(\"html, body\").animate({scrollTop: error_msg.offset().top}, 'slow');\n");
      out.write("                        return false;\n");
      out.write("                    }\n");
      out.write("                    return true;\n");
      out.write("                });\n");
      out.write("            ");

                }
            
      out.write("\n");
      out.write("\n");
      out.write("            passwordField.focusin();\n");
      out.write("            usernameField.focusin();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        function myFunction(key, value, name) {\n");
      out.write("            var object = document.getElementById(name);\n");
      out.write("            var domain = object.value;\n");
      out.write("\n");
      out.write("\n");
      out.write("            if (domain != \"\") {\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                        \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("&domain=\" +\n");
      out.write("                        domain;\n");
      out.write("            } else {\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                        \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("\";\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function handleNoDomain(elem, key, value) {\n");
      out.write("            var linkClicked = \"link-clicked\";\n");
      out.write("            if ($(elem).hasClass(linkClicked)) {\n");
      out.write("                console.warn(\"Preventing multi click.\")\n");
      out.write("            } else {\n");
      out.write("                trackEvent(\"authentication-portal-click-sign-in-with\", {\n");
      out.write("                    \"type\": StringUtils.kebabCase(value),\n");
      out.write("                    \"app\": insightsAppIdentifier,\n");
      out.write("                    \"tenant\": insightsTenantIdentifier !== \"null\" ? insightsTenantIdentifier : \"\"\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                $(elem).addClass(linkClicked);\n");
      out.write("\n");
      out.write("                var baseLocation = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                    \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("\";\n");
      out.write("\n");
      out.write("                if (\"");
      out.print(username);
      out.write("\" !== \"null\" && \"");
      out.print(username);
      out.write("\".length > 0) {\n");
      out.write("                    document.location = baseLocation + \"&username=\" + \"");
      out.print(Encode.forUriComponent(username));
      out.write("\" + \"");
      out.print(multiOptionURIParam);
      out.write("\";\n");
      out.write("                } else {\n");
      out.write("                    document.location = baseLocation + \"");
      out.print(multiOptionURIParam);
      out.write("\";\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function handleEnterpriseIdp(elem, key, value, tenant) {\n");
      out.write("            var linkClicked = \"link-clicked\";\n");
      out.write("            if ($(elem).hasClass(linkClicked)) {\n");
      out.write("                console.warn(\"Preventing multi click.\")\n");
      out.write("            } else {\n");
      out.write("                trackEvent(\"authentication-portal-click-sign-in-with\", {\n");
      out.write("                    \"type\": StringUtils.kebabCase(value),\n");
      out.write("                    \"app\": insightsAppIdentifier,\n");
      out.write("                    \"tenant\": insightsTenantIdentifier !== \"null\" ? insightsTenantIdentifier : \"\"\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                $(elem).addClass(linkClicked);\n");
      out.write("                document.location = \"");
      out.print(oauth2AuthorizeURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                    \"&fidp=EnterpriseIDP\" + \"&org=\" + tenant +\n");
      out.write("                    \"&code_challenge_method=");
      out.print(Encode.forUriComponent(request.getParameter("code_challenge_method")));
      out.write("\" +\n");
      out.write("                    \"&code_challenge=");
      out.print(Encode.forUriComponent(request.getParameter("code_challenge")));
      out.write("\" +\n");
      out.write("                    \"&response_type=");
      out.print(Encode.forUriComponent(request.getParameter("response_type")));
      out.write("\" +\n");
      out.write("                    \"&client_id=");
      out.print(Encode.forUriComponent(request.getParameter("client_id")));
      out.write("\" +\n");
      out.write("                    \"&scope=");
      out.print(Encode.forUriComponent(request.getParameter("scope")));
      out.write("\" +\n");
      out.write("                    \"&redirect_uri=");
      out.print(Encode.forUriComponent(request.getParameter("redirect_uri")));
      out.write("\" +\n");
      out.write("                    \"&response_mode=");
      out.print(Encode.forUriComponent(request.getParameter("response_mode")));
      out.write("\";\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function handleOrgEnterpriseIdp(elem, key, value, tenant) {\n");
      out.write("            var linkClicked = \"link-clicked\";\n");
      out.write("            if ($(elem).hasClass(linkClicked)) {\n");
      out.write("                console.warn(\"Preventing multi click.\")\n");
      out.write("            } else {\n");
      out.write("                trackEvent(\"authentication-portal-click-sign-in-with\", {\n");
      out.write("                    \"type\": StringUtils.kebabCase(value),\n");
      out.write("                    \"app\": insightsAppIdentifier,\n");
      out.write("                    \"tenant\": insightsTenantIdentifier !== \"null\" ? insightsTenantIdentifier : \"\"\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                $(elem).addClass(linkClicked);\n");
      out.write("                document.location = \"");
      out.print(consoleURL);
      out.write("\" + \"/t/\" + tenant + \"?utype=");
      out.print(USER_TYPE_ASGARDEO);
      out.write("\";\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        window.onunload = function(){};\n");
      out.write("\n");
      out.write("        function changeUsername (e) {\n");
      out.write("            document.getElementById(\"changeUserForm\").submit();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        $('.isHubIdpPopupButton').popup({\n");
      out.write("            popup: '.isHubIdpPopup',\n");
      out.write("            on: 'click',\n");
      out.write("            position: 'top left',\n");
      out.write("            delay: {\n");
      out.write("                show: 300,\n");
      out.write("                hide: 800\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        function handleSignupClick() {\n");
      out.write("            trackEvent(\"authentication-portal-click-signup\", {\n");
      out.write("                \"app\": insightsAppIdentifier,\n");
      out.write("                \"tenant\": insightsTenantIdentifier !== \"null\" ? insightsTenantIdentifier : \"\"\n");
      out.write("            });\n");
      out.write("        }\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_layout_005fdynamicComponent_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_layout_005fmain_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    javax.servlet.http.HttpServletRequest request = (javax.servlet.http.HttpServletRequest)_jspx_page_context.getRequest();
    javax.servlet.http.HttpServletResponse response = (javax.servlet.http.HttpServletResponse)_jspx_page_context.getResponse();
    //  layout:dynamicComponent
    org.wso2.identity.apps.taglibs.layout.controller.DynamicComponentTagHandler _jspx_th_layout_005fdynamicComponent_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.DynamicComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName.get(org.wso2.identity.apps.taglibs.layout.controller.DynamicComponentTagHandler.class);
    _jspx_th_layout_005fdynamicComponent_005f0.setPageContext(_jspx_page_context);
    _jspx_th_layout_005fdynamicComponent_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
    // /login.jsp(1354,8) name = filePathStoringVariableName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_layout_005fdynamicComponent_005f0.setFilePathStoringVariableName("pathOfDynamicComponent");
    int _jspx_eval_layout_005fdynamicComponent_005f0 = _jspx_th_layout_005fdynamicComponent_005f0.doStartTag();
    if (_jspx_eval_layout_005fdynamicComponent_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("            ");
        org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pathOfDynamicComponent}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
        out.write("\n");
        out.write("        ");
        int evalDoAfterBody = _jspx_th_layout_005fdynamicComponent_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_layout_005fdynamicComponent_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName.reuse(_jspx_th_layout_005fdynamicComponent_005f0);
    return false;
  }
}
