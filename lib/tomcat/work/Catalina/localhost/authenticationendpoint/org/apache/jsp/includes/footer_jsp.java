/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-07-07 07:26:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.includes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.owasp.encoder.Encode;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthContextAPIClient;
import java.util.List;
import java.util.Arrays;

public final class footer_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthContextAPIClient");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<script src=\"libs/themes/default/semantic.min.js\"></script>\n");
      out.write("<script src=\"libs/tldts-6.1.73.umd.min.js\" async></script>\n");
      out.write("<script src=\"util/url-utils.js\" async></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    // Determining whether the application user is going to login is Console, as the maintenance banner
    // should only be shown in console related authentication flows.
    List<String> downtimeBannerEnabledAppList = Arrays.asList("Console");
    Boolean isDowntimeBannerEnabled = StringUtils.equals("true", application.getInitParameter("isDowntimeBannerEnabled"))
        && downtimeBannerEnabledAppList.contains(Encode.forJava(request.getParameter("sp")));

      out.write("\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    // Automatically shows on init if the user hasn't already acknowledged cookie usage.\n");
      out.write("    $(document).ready(function () {\n");
      out.write("        // downtime-banner.\n");
      out.write("        var SHOW_DOWNTIME_BANNER = ");
      out.print( isDowntimeBannerEnabled );
      out.write(";\n");
      out.write("\n");
      out.write("        if(SHOW_DOWNTIME_BANNER) {\n");
      out.write("            $(\"#downtime-banner\")\n");
      out.write("            .nag(\"show\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if (!isCookieConsentShown()) {\n");
      out.write("            // Simply show the banner without a transition.\n");
      out.write("            // Having a opening transition will be weird when switching\n");
      out.write("            // from apps. i.e From website to login portal.\n");
      out.write("            $(\"#cookie-consent-banner\")\n");
      out.write("                .transition({\n");
      out.write("                    animation : undefined,\n");
      out.write("                    duration  : 0\n");
      out.write("                });\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Get the name of the cookie consent cookie.\n");
      out.write("     */\n");
      out.write("    function getCookieConsentCookieName() {\n");
      out.write("\n");
      out.write("        return \"accepts-cookies\";\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Callback for cookie consent banner action click.\n");
      out.write("     * @param e - Click event.\n");
      out.write("     */\n");
      out.write("    function onCookieConsentClear(e) {\n");
      out.write("\n");
      out.write("        var cookieString = getCookieConsentCookieName() + \"=true;max-age=31536000;path=/;Secure\";\n");
      out.write("        var domain = URLUtils.getDomain(window.location.href);\n");
      out.write("\n");
      out.write("        if (domain) {\n");
      out.write("            cookieString = cookieString + \";domain=\" + domain;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        document.cookie = cookieString;\n");
      out.write("\n");
      out.write("        $(\"#cookie-consent-banner\")\n");
      out.write("            .transition({\n");
      out.write("                animation : \"slide up\",\n");
      out.write("                duration  : 500\n");
      out.write("            });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Look for a specific browser cookie.\n");
      out.write("     * @param name - Name of the cookie to find.\n");
      out.write("     */\n");
      out.write("    function getCookie(name) {\n");
      out.write("\n");
      out.write("        var match = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]+)\"));\n");
      out.write("\n");
      out.write("        if (match) {\n");
      out.write("            return match[2];\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Checks if the cookie consent is shown.\n");
      out.write("     */\n");
      out.write("    function isCookieConsentShown() {\n");
      out.write("\n");
      out.write("        var COOKIE_CONSENT_COOKIE_NAME = \"accepts-cookies\";\n");
      out.write("        var isShown = getCookie(COOKIE_CONSENT_COOKIE_NAME);\n");
      out.write("\n");
      out.write("        if (isShown !== undefined) {\n");
      out.write("            return isShown;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        return false;\n");
      out.write("    }\n");
      out.write("</script>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
