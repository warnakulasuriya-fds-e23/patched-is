/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-07-07 06:09:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import org.apache.commons.collections.map.HashedMap;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApiException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.api.RecoveryApiV2;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.AccountRecoveryType;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.RecoveryInitRequest;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.UserClaim;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil;
import org.wso2.carbon.utils.multitenancy.MultitenantUtils;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.ConfirmRequest;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.ConfirmResponse;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.RecoveryChannelInformation;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.RecoveryChannel;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.RecoveryRequest;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.RecoveryResponse;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.ResendRequest;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.ResendResponse;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import org.apache.commons.lang.StringUtils;

public final class password_002drecovery_002dotp_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 
    /**
     * RecoveryStage represents the four steps of recovery in the 
     * PasswordRecoveryAPI V2.
     */
    public enum RecoveryStage {

        INITIATE("INITIATE"),
        RESEND("RESEND"),
        CONFIRM("CONFIRM"),
        RESET("RESET");

        private final String value;

        RecoveryStage(String value) {
            
            this.value = value;
        }

        /**
         * Returns tye string value of the enum.
         */
        public String getValue() {

            return value;
        }

        /**
         * Override the toStirng method of the object class.
         */
        @Override
        public String toString() {

            return value;
        }

        /**
         * Compares enum with string based on it's value.
         * @return boolean whether the passed string equals the value of the enum.
         */
        public boolean equalsValue(String otherValue) {

            return this.value.equals(otherValue);
        }
    }

 
    /**
    * This generates a random number to provide a sample number for a invalid username
    * to avoid letting external entities learning of the existing usernames. The same 
    * random number string will be generated for the same username each time.
    */
    public static String getRandomNumberString(int len, String seed) {

        StringBuilder sb = new StringBuilder(len);
        Random random = new Random(seed.hashCode());

        for (int i = 0; i < len; i++) {
            Integer numAtIndex = random.nextInt(10);
            sb.append(numAtIndex.toString());
        }
        return sb.toString();
    }


    /**
     * This redirects the flow to the error page with the provided error message.
     */
    public void redirectToErrorPageWithMessage(HttpServletRequest request, 
        HttpServletResponse response, String errorMsg) throws ServletException, IOException {
        
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", errorMsg);
        request.getRequestDispatcher("error.jsp").forward(request, response);
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/tenant-resolve.jsp", Long.valueOf(1740062656000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(42);
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("javax.servlet.ServletException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApiException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.AccountRecoveryType");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.ResendResponse");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil");
    _jspx_imports_classes.add("java.util.Random");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.ResendRequest");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.RecoveryChannelInformation");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.api.RecoveryApiV2");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.UserClaim");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityTenantUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.RecoveryChannel");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.RecoveryInitRequest");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletResponse");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants");
    _jspx_imports_classes.add("java.util.UUID");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.ConfirmRequest");
    _jspx_imports_classes.add("org.apache.commons.collections.map.HashedMap");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.wso2.carbon.utils.multitenancy.MultitenantUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.RecoveryResponse");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.RecoveryRequest");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.recovery.v2.ConfirmResponse");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String tenantDomain;
    String tenantForTheming;
    String userTenant;
    String userTenantDomain;
    String spAppName = request.getParameter("sp");
    String spAppId = request.getParameter("spId");

    if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
        tenantDomain = IdentityTenantUtil.resolveTenantDomain();
        String tenantDomainFromURL = request.getParameter("t");
        if (IdentityManagementEndpointConstants.SUPER_TENANT.equals(tenantDomain) &&
                !StringUtils.isBlank(tenantDomainFromURL)) {
            tenantDomain = tenantDomainFromURL;
        }
        tenantForTheming = tenantDomain;
        userTenant = tenantDomain;
        String tenantDomainOfUser = request.getParameter("ut");
        userTenantDomain = tenantDomainOfUser;

        if (StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)
            && StringUtils.equals(spAppName, "Console")) {
            tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
        } else {
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomainFromURL;
            }
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomain;
            }
            if (StringUtils.isNotBlank(tenantDomainOfUser)) {
                tenantForTheming = tenantDomainOfUser;
            }
            if (StringUtils.equals(spAppName, "My Account")
                && StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {
                tenantForTheming = userTenantDomain;
                userTenant = userTenantDomain;
            }
        }
    } else {
        tenantDomain = request.getParameter("tenantDomain");
        String tenantDomainFromURL = request.getParameter("t");
        String tenantDomainOfUser = request.getParameter("ut");

        if (StringUtils.isBlank(tenantDomain)) {
            tenantDomain = request.getParameter(IdentityManagementEndpointConstants.TENANT_DOMAIN);
        }

        if (!StringUtils.isBlank(tenantDomainFromURL)) {
            tenantDomain = tenantDomainFromURL;
        }

        tenantForTheming = tenantDomain;
        userTenant = tenantDomain;
        userTenantDomain = tenantDomainOfUser;

        if (StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)
            && StringUtils.equals(spAppName, "Console")) {
            tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
        } else {
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomainFromURL;
            }
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomain;
            }
            if (StringUtils.isNotBlank(tenantDomainOfUser)) {
                tenantForTheming = tenantDomainOfUser;
            }
            if (StringUtils.equals(spAppName, "My Account")
                && StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {
                tenantForTheming = userTenantDomain;
                userTenant = userTenantDomain;
            }
        }
    }

    // If `tenantDomain` is null, fallback to super tenant.
    if (StringUtils.isBlank(tenantDomain)) {
        tenantDomain = IdentityManagementEndpointConstants.SUPER_TENANT;
    }
    // If `tenantForTheming` is null, fallback to super tenant.
    if (StringUtils.isBlank(tenantForTheming)) {
        tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

    String userIdentifierClaimKey = "http://wso2.org/claims/username";
    final String MULTI_ATTRIBUTE_USER_IDENTIFIER_CLAIM_URI = "internal.user.identifier.claim.uri";
    final RecoveryApiV2 recoveryApiV2 = new RecoveryApiV2();
    
    try {
        PreferenceRetrievalClient preferenceRetrievalClient = new PreferenceRetrievalClient();
        if (preferenceRetrievalClient.checkMultiAttributeLogin(tenantDomain)) {
            userIdentifierClaimKey = MULTI_ATTRIBUTE_USER_IDENTIFIER_CLAIM_URI;
        }
    } catch (PreferenceRetrievalClientException e) {
        IdentityManagementEndpointUtil.addErrorInformation(request, e);
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }

    String username = (String) request.getAttribute("username");
    if (StringUtils.isBlank(username)) {
        username = request.getParameter("username");
    }
    String recoveryStage = request.getParameter("recoveryStage");

    if (RecoveryStage.INITIATE.equalsValue(recoveryStage)) {
        // if otp is supported by a new channel (eg: email) update this value assignment. null means unsupported.
        final String targetChannel = IdentityManagementEndpointConstants.PasswordRecoveryOptions.SMSOTP
            .equals((String)request.getAttribute("channel"))
                ? "SMS"
                : null;
        // Manage unsupported channel
        if (StringUtils.isBlank(targetChannel)) {
            redirectToErrorPageWithMessage(request, response, "Unknown.channel");
            return;
        }
        List<UserClaim> userClaims = new ArrayList<UserClaim>();

        // Get the username claim string for the tenant
        UserClaim userNameClaim = new UserClaim();
        userNameClaim.setUri(userIdentifierClaimKey);
        userNameClaim.setValue(MultitenantUtils.getTenantAwareUsername(username));
        userClaims.add(userNameClaim);

        String flawConfirmationCode = "";
        String recoveryCode = "";
        String channelId = "";
        String screenValue = "";

        try {
            // Initiate password recovery.
            RecoveryInitRequest recoveryInitRequest = new RecoveryInitRequest();
            recoveryInitRequest.setClaims(userClaims);
            Map<String, String> requestHeaders = new HashedMap();
            if (request.getParameter("g-recaptcha-response") != null) {
                requestHeaders.put("g-recaptcha-response", request.getParameter("g-recaptcha-response"));
            }
            List<AccountRecoveryType> resp = 
                recoveryApiV2.initiatePasswordRecovery(recoveryInitRequest, tenantDomain, requestHeaders);
            if (resp == null) {
                /** Handle invalid username scenario. proceeds to next level without warning to 
                avoid an attacker bruteforcing to learn the usernames. */
                request.setAttribute("screenValue", "******" + getRandomNumberString(4, username));
                request.setAttribute("resendCode", UUID.randomUUID().toString());
                request.setAttribute("flowConfirmationCode", UUID.randomUUID().toString());
                request.getRequestDispatcher("sms-otp.jsp").forward(request, response);
                return;
            }
            for(AccountRecoveryType recoveryType: resp) {
                if ("recoverWithNotifications".equals(recoveryType.getMode())) {
                    RecoveryChannelInformation channelInfo = recoveryType.getChannelInfo();
                    recoveryCode = channelInfo.getRecoveryCode();
                    List<RecoveryChannel> channels = channelInfo.getChannels();
                    for(RecoveryChannel ch: channels) {
                        flawConfirmationCode = recoveryType.getFlowConfirmationCode();
                        if (ch.getType().equals(targetChannel)) {
                            channelId = ch.getId();
                            screenValue = ch.getValue();
                            break;
                        }
                    }
                }
                if (StringUtils.isNotBlank(channelId)) {
                    break;
                }
            }

            /**
             * Manage user don't have phone number set up in the account.
             */
            if (StringUtils.isBlank(channelId)) {
                String recoveryPageQueryString = request.getParameter("urlQuery");
                request.setAttribute("error", true);
                request.setAttribute("errorMsg", "Channel.unavailable.for.user");
                String redirectString = "recoveraccountrouter.do?" + recoveryPageQueryString;
                request.getRequestDispatcher(redirectString).forward(request, response);
                return;
            }

            // Get Recovery Information.
            RecoveryRequest recoveryRequest = new RecoveryRequest();
            recoveryRequest.setChannelId(channelId);
            recoveryRequest.setRecoveryCode(recoveryCode);
            RecoveryResponse recoveryResponse = 
                recoveryApiV2.recoverPassword(recoveryRequest, tenantDomain, requestHeaders);
            request.setAttribute("screenValue", screenValue);
            request.setAttribute("resendCode", recoveryResponse.getResendCode());
            request.setAttribute("flowConfirmationCode", recoveryResponse.getFlowConfirmationCode());
        } catch (ApiException e) {
            IdentityManagementEndpointUtil.addErrorInformation(request, e);
            request.getRequestDispatcher("error.jsp").forward(request, response);
            return;
        }
        // Redirect to enter the OTP.
        request.getRequestDispatcher("sms-otp.jsp").forward(request, response);
    } else if (RecoveryStage.RESEND.equalsValue(recoveryStage)) {
        String resendCode = request.getParameter("resendCode");
        String flowConfirmationCode = request.getParameter("flowConfirmationCode");
        // Sending resend request
        try {
            Map<String, String> requestHeaders = new HashedMap();
            if (request.getParameter("g-recaptcha-response") != null) {
                requestHeaders.put("g-recaptcha-response", request.getParameter("g-recaptcha-response"));
            }
            ResendRequest resendRequest = new ResendRequest();
            resendRequest.setResendCode(resendCode);
            ResendResponse resendResponse = 
                recoveryApiV2.resendPasswordNotification(resendRequest, tenantDomain, requestHeaders);
            
            /** Resend code re-attached to the reqeust to avoid value being missed after the page refresh that
             *  happens after the resend operation. */
            resendCode = resendResponse.getResendCode();
            flowConfirmationCode = resendResponse.getFlowConfirmationCode();
            request.setAttribute("resendSuccess", true);
        } catch (ApiException e) {
            /** Status code 406 is used for invalid/expired channel id/recovery code. Other error are considered
            unexpected and redirected to the error page. */
            if (e.getCode() != 406) {
                IdentityManagementEndpointUtil.addErrorInformation(request, e);
                request.getRequestDispatcher("error.jsp").forward(request, response);
                return;
            }
            request.setAttribute("isResendFailure","true");
            request.setAttribute("resendFailureMsg", "resend.fail.message");
        }
        request.setAttribute("resendCode", resendCode);
        request.setAttribute("sp", request.getParameter("sp"));
        request.setAttribute("flowConfirmationCode", flowConfirmationCode);
        request.getRequestDispatcher("sms-otp.jsp").forward(request, response);
    } else if (RecoveryStage.CONFIRM.equalsValue(recoveryStage)) {
        String flowConfirmationCode = request.getParameter("flowConfirmationCode"); 
        String OTPcode = request.getParameter("OTPcode");
        try {
            Map<String, String> requestHeaders = new HashedMap();
            if (request.getParameter("g-recaptcha-response") != null) {
                requestHeaders.put("g-recaptcha-response", request.getParameter("g-recaptcha-response"));
            }
            ConfirmRequest confirmRequest = new ConfirmRequest();
            /** For local notification channels flowConfirmationCode is used as confirmation code. */
            confirmRequest.setConfirmationCode(flowConfirmationCode);
            confirmRequest.setOtp(OTPcode);
            ConfirmResponse confirmResponse = 
                recoveryApiV2.confirmPasswordRecovery(confirmRequest, tenantDomain, requestHeaders);
            request.setAttribute("resetCode", confirmResponse.getResetCode());
        } catch (ApiException e) {
            /** Status code 406 is used for invalid/expired channel id/recovery code. Other error are considered
            unexpected and redirected to the error page. */
            if (e.getCode() != 406) {
                IdentityManagementEndpointUtil.addErrorInformation(request, e);
                request.getRequestDispatcher("error.jsp").forward(request, response);
                return;
            }
            request.setAttribute("isAuthFailure","true");
            request.setAttribute("authFailureMsg", "authentication.fail.message");
            request.setAttribute("resendCode", request.getParameter("resendCode"));
            request.setAttribute("sp", request.getParameter("sp"));
            request.setAttribute("flowConfirmationCode", flowConfirmationCode);
            request.getRequestDispatcher("sms-otp.jsp").forward(request, response);
            return;
        }
        String spId = Encode.forJava(request.getParameter("spId"));
        request.setAttribute("spId", spId);
        request.getRequestDispatcher("password-reset.jsp").forward(request, response);
    } else if (RecoveryStage.RESET.equalsValue(recoveryStage)) {
        request.setAttribute("useRecoveryV2API", "true");
        request.getRequestDispatcher("password-reset-complete.jsp").forward(request, response);
    } else {
        request.setAttribute("errorMsg", "Invalid password recovery stage.");
        if (!StringUtils.isBlank(username)) {
            request.setAttribute("username", username);
        }
        request.getRequestDispatcher("error.jsp").forward(request, response);
    }

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
