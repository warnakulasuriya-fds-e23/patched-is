/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-07-07 06:09:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;
import java.util.*;
import org.apache.commons.lang.StringUtils;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.captcha.util.CaptchaUtil;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import org.wso2.carbon.identity.core.util.IdentityUtil;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApiException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.api.ReCaptchaApi;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.ReCaptchaProperties;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.User;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementServiceUtil;
import org.wso2.carbon.utils.multitenancy.MultitenantUtils;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isEmailUsernameEnabled;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl;
import java.nio.charset.StandardCharsets;
import java.util.*;
import org.json.JSONObject;
import java.util.Calendar;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.owasp.encoder.Encode;
import java.io.BufferedReader;
import java.io.FileReader;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import org.apache.commons.lang.StringUtils;
import java.io.File;
import java.util.Map;
import java.util.HashMap;
import org.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import javax.servlet.http.HttpServletRequest;
import java.util.*;
import java.util.List;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import java.util.ResourceBundle;

public final class password_002drecovery_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key) {
        return i18n(resourceBundle, customText, key, null, true);
    }

    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     * Overloaded method with default value.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @param defaultValue Default value.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key, String defaultValue) {
        return i18n(resourceBundle, customText, key, defaultValue, true);
    }

    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     * Overloaded method with default value with the ability to not fallback to resource bundle and return "" as default.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @param defaultValue Default value.
     * @param shouldFallbackToResourceBundle Should fallback to resource bundle.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key, String defaultValue, boolean shouldFallbackToResourceBundle) {
        String localizedString = null;
        Calendar calendar = Calendar.getInstance();
        int currentYear = calendar.get(Calendar.YEAR);

        try {
            if (customText != null && customText.has(key)) {
                localizedString = Encode.forHtmlContent(customText.getString(key));
            } else {
                if (StringUtils.isNotBlank(defaultValue)) {
                    localizedString = Encode.forHtmlContent(defaultValue);
                } else if (shouldFallbackToResourceBundle) {
                    localizedString = IdentityManagementEndpointUtil.i18n(resourceBundle, key);
                } else {
                    localizedString = "";
                }
            }
        } catch (Exception e) {
            // Return the key itself as a fallback
            localizedString = Encode.forHtmlContent(key);
        }

        // Replace newline characters with actual line breaks
        localizedString = localizedString.replace("\\n", "\n");

        return localizedString.replace("{{currentYear}}", String.valueOf(currentYear));
    }

    /**
     * Replaces i18n path placeholders in a given link with locale and country codes.
     *
     * @param locale The locale from which to derive values for placeholders.
     * @param link The link containing i18n placeholders (e.g., {{lang}}, {{country}}, {{locale}}).
     * @return The link with placeholders replaced by actual values based on the given locale.
     */
    public String i18nLink(Locale locale, String link) {
        String transformedLink = link;

        try {
            String langCode = locale.getLanguage();
            String countryCode = locale.getCountry();
            String localeCode = locale.toLanguageTag();

            String LANGUAGE_PLACEHOLDER = "{{lang}}";
            String COUNTRY_PLACEHOLDER = "{{country}}";
            String LOCALE_PLACEHOLDER = "{{locale}}";

            if (transformedLink.contains(LANGUAGE_PLACEHOLDER) || transformedLink.contains(COUNTRY_PLACEHOLDER) || transformedLink.contains(LOCALE_PLACEHOLDER)) {
                transformedLink = transformedLink
                    .replace("{{lang}}", langCode)
                    .replace("{{country}}", countryCode)
                    .replace("{{locale}}", localeCode);
            } else {
                if (transformedLink.contains("?")) {
                    return transformedLink.concat("&ui_locales=" + localeCode);
                } else {
                    return transformedLink.concat("?ui_locales=" + localeCode);
                }
            }

            return StringEscapeUtils.escapeHtml4(transformedLink);
        } catch (Exception e) {
            // Return the link itself as a fallback.
            return StringEscapeUtils.escapeHtml4(transformedLink);
        }
    }

 
    private static final String LOCALE_CODE_KEY = "localeCode";
    private static final String FLAG_CODE_KEY = "flagCode";
    private static final String DISPLAY_NAME_KEY = "displayName";


    /**
     * Retrieve all available locales and their display names for the Local dropdown.
     *
     * @return {List<Map<String, String>>}
     */
    private List<Map<String, String>> getLocaleList(ServletContext context) {
        List<Map<String, String>> localeList = new ArrayList<>();
        String localeOptionsFilePath = context.getRealPath("/WEB-INF/classes/LocaleOptions.properties");

        try (BufferedReader localeReader = new BufferedReader(new FileReader(localeOptionsFilePath, java.nio.charset.StandardCharsets.UTF_8))) {
            Properties localeProperties = new Properties();
            localeProperties.load(localeReader);

            for (String key : localeProperties.stringPropertyNames()) {
                String[] values = localeProperties.getProperty(key).split(",");
                
                // Validate the number of values
                if (values.length == 3) {
                    String flagCode = values[0].trim();
                    String displayName = values[1].trim();
                    String localeCode = values[2].trim();

                    // Avoid null or empty values
                    if (StringUtils.isNotBlank(flagCode) && StringUtils.isNotBlank(displayName) && StringUtils.isNotBlank(localeCode)) {
                        Map<String, String> localeMap = new HashMap<>();
                        localeMap.put(FLAG_CODE_KEY, flagCode);
                        localeMap.put(DISPLAY_NAME_KEY, displayName);
                        localeMap.put(LOCALE_CODE_KEY, localeCode);
                        localeList.add(localeMap);
                    }
                } else {
                    System.err.println("Invalid locale entry in LocaleOptions.properties for key: " + key);
                }
            }
        } catch (Exception e) {
            System.err.println("Error reading LocaleOptions.properties: " + e.getMessage());
            e.printStackTrace();
        }

        return localeList;
    }


    /**
    * Get the user's preferred locale based on the request, cookies, and URL parameters.
    *
    * This method determines the user's locale based on the following priority order:
    * 1. Locale set in a cookie (if available).
    * 2. Locales specified in the "ui_locales" URL parameter.
    * 3. Browser's default locale.
    *
    * If a valid locale cannot be determined from the cookie or URL parameters, the browser's
    * default locale is used as the fallback.
    *
    * @param request The HTTP servlet request.
    * @return The user's preferred locale.
    */
    public Locale getUserLocale(HttpServletRequest request) {
        String lang = "en_US"; // Default lang is en_US
        String COOKIE_NAME = "ui_lang";
        String BUNDLE = "org.wso2.carbon.identity.mgt.recovery.endpoint.i18n.Resources";
        Locale browserLocale = request.getLocale();
        Locale userLocale = browserLocale;
        String uiLocaleFromURL = request.getParameter("ui_locales");
        String localeFromCookie = null;
        // Check cookie for the user selected language first
        Cookie[] cookies = request.getCookies();

        // Map to store default supported language codes.
        Map<String, String> supportedLanguages = new HashMap<>();
        supportedLanguages.put("en", "US");
        supportedLanguages.put("fr", "FR");
        supportedLanguages.put("es", "ES");
        supportedLanguages.put("pt", "PT");
        supportedLanguages.put("de", "DE");
        supportedLanguages.put("zh", "CN");
        supportedLanguages.put("ja", "JP");

        List<String> languageSupportedCountries = new ArrayList<>();
        languageSupportedCountries.add("US");
        languageSupportedCountries.add("FR");
        languageSupportedCountries.add("ES");
        languageSupportedCountries.add("PT");
        languageSupportedCountries.add("DE");
        languageSupportedCountries.add("CN");
        languageSupportedCountries.add("JP");
        languageSupportedCountries.add("BR");

        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals(COOKIE_NAME)) {
                    localeFromCookie = cookie.getValue();
                }
            }
        }
        // Set lang from the priority order
        if (localeFromCookie != null) {
            lang = localeFromCookie;
            try {
                String langStr = "en";
                String langLocale = "US";

                if (lang.contains("_")) {
                    langStr = lang.split("_")[0];
                    langLocale = lang.split("_")[1];
                } else if (lang.contains("-")) {
                    langStr = lang.split("-")[0];
                    langLocale = lang.split("-")[1];
                }

                userLocale = new Locale(langStr, langLocale);
            } catch (Exception e) {
                // In case the language is defined but not in the correct format
                userLocale = browserLocale;
            }
        } else if (uiLocaleFromURL != null) {
            for (String localeStr : uiLocaleFromURL.split(" ")) {
                String langStr = "en";
                String langLocale = "US";

                if (localeStr.contains("_")) {
                    langStr = localeStr.split("_")[0];
                    langLocale = localeStr.split("_")[1];
                } else if (localeStr.contains("-")) {
                    langStr = localeStr.split("-")[0];
                    langLocale = localeStr.split("-")[1];
                }

                Locale tempLocale = new Locale(langStr, langLocale);

                // Trying to find out whether we have a resource bundle for the given locale.
                try {
                    ResourceBundle foundBundle = ResourceBundle.getBundle(BUNDLE, tempLocale);
                    // If the i18n bundle for the locale is found, set the userLocale to that locale. If not, set the
                    // browser locale as user locale.
                    // Currently, we only care about the language - we do not compare about country locales since our
                    // supported locale set is limited.
                    if (tempLocale.getLanguage().equals(foundBundle.getLocale().getLanguage())) {
                        userLocale = tempLocale;
                        break;
                    } else if (tempLocale.getLanguage().equals("en") && foundBundle.getLocale().getLanguage().equals("")) {
                        // When the given locale is "en," which is our fallback one, we have to handle it separately
                        // because it returns an empty string as locale language
                        userLocale = tempLocale;
                        break;
                    } else {
                        userLocale = browserLocale;
                    }
                } catch (Exception e) {
                    userLocale = browserLocale;
                }
            }
        } else {
            // `browserLocale` is coming as `en` instead of `en_US` for the first render before switching the language from the dropdown.
            String countryCode = browserLocale.getCountry();
            String fallbackCountryCode = supportedLanguages.get(browserLocale.getLanguage());

            if (StringUtils.isNotBlank(countryCode) && languageSupportedCountries.contains(countryCode)) {
                userLocale = new Locale(browserLocale.getLanguage(), countryCode);
            } else if (StringUtils.isNotBlank(fallbackCountryCode)){
                userLocale = new Locale(browserLocale.getLanguage(), fallbackCountryCode);
            } else {
                userLocale = new Locale("en","US");
            }
        }
        return userLocale;
    }
    /**
    * Get the user's locale code in the "language-country" format based on the request, cookies, and URL parameters.
    *
    * This method determines the user's locale based on the getUserLocale method and returns the locale code
    * in the "language-country" format (e.g., "en-US").
    *
    * @param request The HTTP servlet request.
    * @return The user's locale code in the "language-country" format.
    */
    public String getUserLocaleCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getLanguage() + "-" + locale.getCountry();
    }
    /**
    * Get the user's language code based on the request, cookies, and URL parameters.
    *
    * This method determines the user's language code based on the getUserLocale method and returns
    * the language code (e.g., "en").
    *
    * @param request The HTTP servlet request.
    * @return The user's language code.
    */
    public String getUserLanguageCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getLanguage();
    }
    /**
    * Get the user's country code based on the request, cookies, and URL parameters.
    *
    * This method determines the user's country code based on the getUserLocale method and returns
    * the country code (e.g., "US").
    *
    * @param request The HTTP servlet request.
    * @return The user's country code.
    */
    public String getUserCountryCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getCountry();
    }


    /**
    * Convert the application name by replacing spaces with underscores.
    *
    * This serves as a temporary solution for implementing a custom layout for applications with
    * names containing spaces. It is recommended to remove this workaround and implement a more
    * robust solution in the future.
    * Tracked by - https://github.com/wso2-enterprise/asgardeo-product/issues/19824
    *
    * @param applicationName Name of the application (Service Provider Name).
    * @return Converted application name.
    */
    public String convertApplicationName(String applicationName) {
        return StringUtils.replace(applicationName, " ", "_");
    }


    private static final String USERNAME_CLAIM_URI = "http://wso2.org/claims/username";
    private static final String EMAIL_CLAIM_URI = "http://wso2.org/claims/emailaddress";
    private static final String MOBILE_CLAIM_URI = "http://wso2.org/claims/mobile";


    /**
     * Retrieve the username place holder when alternative
     * login identifiers are enabled.
     *
     * @return {String}
     */
    public String getUsernameLabel(ResourceBundle resourceBundle, String allowedAttributes) {
        
        String[] attributes = allowedAttributes.split(",");
        List<String> attributeList = new ArrayList<>();
        String usernameLabel="";
        
            for (int index = 0; index < attributes.length; index++) {
                String attribute = attributes[index];
                String i18nKey = null;
        
                if (StringUtils.equals(attribute, USERNAME_CLAIM_URI)) {
                    i18nKey = "username";
                } else if (StringUtils.equals(attribute, EMAIL_CLAIM_URI )) {
                    i18nKey = "email";
                } else if (StringUtils.equals(attribute, MOBILE_CLAIM_URI)) {
                    i18nKey = "mobile";
                }
        
                if (i18nKey != null) {
                    String i18nValue = AuthenticationEndpointUtil.i18n(resourceBundle, i18nKey);
                    if (index > 0) {
                        i18nValue = i18nValue.toLowerCase();
                    }
                    attributeList.add(i18nValue);
                }
            }
            if (attributeList.size() > 0) {
                String orString = AuthenticationEndpointUtil.i18n(resourceBundle, "or").toLowerCase(); 
                usernameLabel = String.join(", ", attributeList.subList(0, attributeList.size() - 1))
                    + (attributeList.size() > 1 ? " " + orString + " " : "")
                    + attributeList.get(attributeList.size() - 1);
            }
        return usernameLabel;
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(7);
    _jspx_dependants.put("/tenant-resolve.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/includes/localize.jsp", Long.valueOf(1747321634000L));
    _jspx_dependants.put("/includes/branding-preferences.jsp", Long.valueOf(1747321634000L));
    _jspx_dependants.put("/includes/username-label-resolver.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.4.34.jar", Long.valueOf(1739947872000L));
    _jspx_dependants.put("jar:file:/home/dheera/Research/ISWithCustAuthPatch/wso2is-7.1.0/repository/deployment/server/webapps/accountrecoveryendpoint/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.4.34.jar!/META-INF/taglib.tld", Long.valueOf(1660634188000L));
    _jspx_dependants.put("/includes/layout-resolver.jsp", Long.valueOf(1740062656000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(46);
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApiException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.User");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isEmailUsernameEnabled");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.ReCaptchaProperties");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.ResourceBundle");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.api.ReCaptchaApi");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityTenantUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementServiceUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl");
    _jspx_imports_classes.add("org.apache.commons.text.StringEscapeUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.wso2.carbon.utils.multitenancy.MultitenantUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.captcha.util.CaptchaUtil");
    _jspx_imports_classes.add("java.io.BufferedReader");
    _jspx_imports_classes.add("java.io.FileReader");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.release();
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.release();
    _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String lang = "en_US"; // Default lang is en_US
    String COOKIE_NAME = "ui_lang";
    Locale browserLocale = request.getLocale();
    Locale userLocale = browserLocale;
    String uiLocaleFromURL = request.getParameter("ui_locales");
    String localeFromCookie = null;
    String BUNDLE = "org.wso2.carbon.identity.mgt.recovery.endpoint.i18n.Resources";

    // List of screen names for retrieving text branding customizations.
    List<String> screenNames = new ArrayList<>();
    screenNames.add("common");

    // Map to store default supported language codes.
    // TODO: Use this map to generate the `language-switcher.jsp`.
    Map<String, String> supportedLanguages = new HashMap<>();
    supportedLanguages.put("en", "US");
    supportedLanguages.put("fr", "FR");
    supportedLanguages.put("es", "ES");
    supportedLanguages.put("pt", "PT");
    supportedLanguages.put("de", "DE");
    supportedLanguages.put("zh", "CN");
    supportedLanguages.put("ja", "JP");

    List<String> languageSupportedCountries = new ArrayList<>();
    languageSupportedCountries.add("US");
    languageSupportedCountries.add("FR");
    languageSupportedCountries.add("ES");
    languageSupportedCountries.add("PT");
    languageSupportedCountries.add("DE");
    languageSupportedCountries.add("CN");
    languageSupportedCountries.add("JP");
    languageSupportedCountries.add("BR");

    // Check cookie for the user selected language first
    Cookie[] cookies = request.getCookies();
    if (cookies != null) {
        for (Cookie cookie : cookies) {
            if (cookie.getName().equals(COOKIE_NAME)) {
                localeFromCookie = cookie.getValue();
            }
        }
    }

    // Set lang from the priority order
    if (localeFromCookie != null) {
        lang = localeFromCookie;

        try {
            String langStr = "en";
            String langLocale = "US";

            if (lang.contains("_")) {
                langStr = lang.split("_")[0];
                langLocale = lang.split("_")[1];
            } else if (lang.contains("-")) {
                langStr = lang.split("-")[0];
                langLocale = lang.split("-")[1];
            }

            userLocale = new Locale(langStr, langLocale);
        } catch (Exception e) {
            // In case the language is defined but not in the correct format
            userLocale = browserLocale;
        }
    } else if (uiLocaleFromURL != null) {
        for (String localeStr : uiLocaleFromURL.split(" ")) {
            String langStr = "en";
            String langLocale = "US";

            if (localeStr.contains("_")) {
                langStr = localeStr.split("_")[0];
                langLocale = localeStr.split("_")[1];
            } else if (localeStr.contains("-")) {
                langStr = localeStr.split("-")[0];
                langLocale = localeStr.split("-")[1];
            }

            Locale tempLocale = new Locale(langStr, langLocale);

            // Trying to find out whether we have resource bundle for the given locale
            try {
                ResourceBundle foundBundle = ResourceBundle.getBundle(BUNDLE, tempLocale);

                // If so, setting the userLocale to that locale. If not, set the browser locale as user locale
                // Currently, we only care about the language - we do not compare about country locales since our
                // supported locale set is limited.
                if (tempLocale.getLanguage().equals(foundBundle.getLocale().getLanguage())) {
                    userLocale = tempLocale;
                    break;
                } else if (tempLocale.getLanguage().equals("en") && foundBundle.getLocale().getLanguage().equals("")) {
                    // When the given locale is en - which is our fallback one, we have to handle it separately because
                    // returns and empty string as locale language
                    userLocale = tempLocale;
                    break;
                } else {
                    userLocale = browserLocale;
                }
            } catch (Exception e) {
                userLocale = browserLocale;
            }
        }
    } else {
        // `browserLocale` is coming as `en` instead of `en_US` for the first render before switching the language from the dropdown.
        String countryCode = browserLocale.getCountry();
        String fallbackCountryCode = supportedLanguages.get(browserLocale.getLanguage());

        if (StringUtils.isNotBlank(countryCode) && languageSupportedCountries.contains(countryCode)) {
            userLocale = new Locale(browserLocale.getLanguage(), countryCode);
        } else if (StringUtils.isNotBlank(fallbackCountryCode)){
            userLocale = new Locale(browserLocale.getLanguage(), fallbackCountryCode);
        } else {
            userLocale = new Locale("en","US");
        }
    }

    ResourceBundle recoveryResourceBundle = ResourceBundle.getBundle(BUNDLE, userLocale, new
        EncodedControl(StandardCharsets.UTF_8.toString()));

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String tenantDomain;
    String tenantForTheming;
    String userTenant;
    String userTenantDomain;
    String spAppName = request.getParameter("sp");
    String spAppId = request.getParameter("spId");

    if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
        tenantDomain = IdentityTenantUtil.resolveTenantDomain();
        String tenantDomainFromURL = request.getParameter("t");
        if (IdentityManagementEndpointConstants.SUPER_TENANT.equals(tenantDomain) &&
                !StringUtils.isBlank(tenantDomainFromURL)) {
            tenantDomain = tenantDomainFromURL;
        }
        tenantForTheming = tenantDomain;
        userTenant = tenantDomain;
        String tenantDomainOfUser = request.getParameter("ut");
        userTenantDomain = tenantDomainOfUser;

        if (StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)
            && StringUtils.equals(spAppName, "Console")) {
            tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
        } else {
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomainFromURL;
            }
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomain;
            }
            if (StringUtils.isNotBlank(tenantDomainOfUser)) {
                tenantForTheming = tenantDomainOfUser;
            }
            if (StringUtils.equals(spAppName, "My Account")
                && StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {
                tenantForTheming = userTenantDomain;
                userTenant = userTenantDomain;
            }
        }
    } else {
        tenantDomain = request.getParameter("tenantDomain");
        String tenantDomainFromURL = request.getParameter("t");
        String tenantDomainOfUser = request.getParameter("ut");

        if (StringUtils.isBlank(tenantDomain)) {
            tenantDomain = request.getParameter(IdentityManagementEndpointConstants.TENANT_DOMAIN);
        }

        if (!StringUtils.isBlank(tenantDomainFromURL)) {
            tenantDomain = tenantDomainFromURL;
        }

        tenantForTheming = tenantDomain;
        userTenant = tenantDomain;
        userTenantDomain = tenantDomainOfUser;

        if (StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)
            && StringUtils.equals(spAppName, "Console")) {
            tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
        } else {
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomainFromURL;
            }
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomain;
            }
            if (StringUtils.isNotBlank(tenantDomainOfUser)) {
                tenantForTheming = tenantDomainOfUser;
            }
            if (StringUtils.equals(spAppName, "My Account")
                && StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {
                tenantForTheming = userTenantDomain;
                userTenant = userTenantDomain;
            }
        }
    }

    // If `tenantDomain` is null, fallback to super tenant.
    if (StringUtils.isBlank(tenantDomain)) {
        tenantDomain = IdentityManagementEndpointConstants.SUPER_TENANT;
    }
    // If `tenantForTheming` is null, fallback to super tenant.
    if (StringUtils.isBlank(tenantForTheming)) {
        tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    // Add the password-recovery screen to the list to retrieve text branding customizations.
    screenNames.add("password-recovery");

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');

    JSONObject brandingPreference = null;
    JSONObject customText = new JSONObject();

    boolean isBrandingEnabledInTenantPreferences = true;
    boolean isSelfSignUpEnabledInTenantPreferences = true;
    boolean isPasswordRecoveryEnabledInTenantPreferences = true;
    boolean shouldRemoveDefaultBranding = true;
    @Deprecated
    JSONObject colors = null;
    JSONObject theme = null;
    String activeThemeName = "";
    String overrideStylesheet = "";
    @Deprecated
    String __DEPRECATED__copyrightText = "";
    @Deprecated
    String __DEPRECATED__siteTitle = "";
    String supportEmail = "contact@wso2.com";
    String logoURL = "";
    String logoAlt = "";
    String faviconURL = "libs/themes/wso2is/assets/images/branding/favicon.ico";
    String privacyPolicyURL = "/authenticationendpoint/privacy_policy.do";
    String termsOfUseURL = "";
    String cookiePolicyURL = "/authenticationendpoint/cookie_policy.do";
    String selfSignUpOverrideURL = "";
    String passwordRecoveryOverrideURL = "";
    String layout = "centered";
    String layoutFileRelativePath = "includes/layouts/" + layout + "/body.ser";
    String layoutStoreURL = "extensions/layouts/custom/${tenantDomain}";
    Map<String, Object> layoutData = new HashMap<String, Object>();
    String productName = "WSO2 Identity Server";
    String productURL = "https://wso2.com/identity-server";
    String productLogoURL = "libs/themes/wso2is/assets/images/branding/logo-full.svg";
    String productLogoAlt = "WSO2 Identity Server Logo";
    String productWhiteLogoURL = "libs/themes/wso2is/assets/images/branding/logo-full-inverted.svg";
    String productWhiteLogoAlt = "WSO2 Identity Server Logo White Variation";
    String poweredByLogoURL = "";

    final String BRANDING_PREFERENCE_CACHE_KEY = "BrandingPreferenceCache";
    final String BRANDING_TEXT_PREFERENCE_CACHE_KEY = "BrandingTextPreferenceCache";

    // Constants used to create full custom layout name
    String PREFIX_FOR_CUSTOM_LAYOUT_NAME = "custom";
    String CUSTOM_LAYOUT_NAME_SEPERATOR = "-";

    // Preferences response object pointer keys.
    String PREFERENCE_KEY = "preference";
    String ACTIVE_THEME_KEY = "activeTheme";
    String COLORS_KEY = "colors";
    String THEME_KEY = "theme";
    String STYLESHEETS_KEY = "stylesheets";
    String ACCOUNT_APP_STYLESHEET_KEY = "accountApp";
    String ORG_DETAILS_KEY = "organizationDetails";
    String COPYRIGHT_TEXT_KEY = "copyrightText";
    String SITE_TITLE_KEY = "siteTitle";
    String SUPPORT_EMAIL_KEY = "supportEmail";
    String IMAGES_KEY = "images";
    String IMAGE_URL_KEY = "imgURL";
    String ALT_TEXT_KEY = "altText";
    String LOGO_KEY = "logo";
    String FAVICON_KEY = "favicon";
    String URLS_KEY = "urls";
    String PRIVACY_POLICY_URL_KEY = "privacyPolicyURL";
    String TERMS_OF_USE_URL_KEY = "termsOfUseURL";
    String COOKIE_POLICY_URL_KEY = "cookiePolicyURL";
    String SELF_SIGN_UP_URL_KEY = "selfSignUpURL";
    String PASSWORD_RECOVERY_URL_KEY = "passwordRecoveryURL";
    String CONFIGS_KEY = "configs";
    String IS_BRANDING_ENABLED_KEY= "isBrandingEnabled";
    String IS_SELF_SIGN_UP_ENABLED_KEY = "isSelfSignUpEnabled";
    String IS_PASSWORD_RECOVERY_ENABLED_KEY = "isPasswordRecoveryEnabled";
    String SHOULD_REMOVE_ASGARDEO_BRANDING_KEY = "removeAsgardeoBranding";
    String SHOULD_REMOVE_DEFAULT_BRANDING_KEY = "removeDefaultBranding";
    String TEXT_KEY = "text";

    // Additional keys to override the fallback values.
    String PRODUCT_NAME_KEY = "productName";
    String PRODUCT_URL_KEY = "productURL";
    String PRODUCT_LOGO_URL_KEY = "productLogoURL";
    String PRODUCT_LOGO_ALT_KEY = "productLogoAlt";
    String PRODUCT_WHITE_LOGO_URL_KEY = "productWhiteLogoURL";
    String PRODUCT_WHITE_LOGO_ALT_KEY = "productWhiteLogoAlt";

    // Load the branding fallback override values file if it exists.
    if (config.getServletContext().getResource("extensions/branding-fallbacks.jsp") != null) {

      out.write("\n");
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/extensions/branding-fallbacks.jsp", out, false);
      out.write('\n');
      out.write('\n');

    }

    /*
        The override values are set within the request object using a Map object.
        This approach is necessary because 'branding-fallbacks.jsp' may not always exist.
        Consequently, a directive include cannot be employed; rather, an action include must be utilized.
        It ensures that the override values are accessible to this JSP page through the request object.
    */
    Map<String, Object> overrideFallbackValues = (Map<String, Object>) request.getAttribute("overrideFallbackValues");

    // Override the branding fallback values
    if (overrideFallbackValues != null) {
        // Configs
        if (overrideFallbackValues.containsKey(IS_BRANDING_ENABLED_KEY)) {
            isBrandingEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_BRANDING_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(IS_SELF_SIGN_UP_ENABLED_KEY)) {
            isSelfSignUpEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_SELF_SIGN_UP_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(IS_PASSWORD_RECOVERY_ENABLED_KEY)) {
            isPasswordRecoveryEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_PASSWORD_RECOVERY_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(SHOULD_REMOVE_DEFAULT_BRANDING_KEY)) {
            shouldRemoveDefaultBranding = (boolean) overrideFallbackValues.get(SHOULD_REMOVE_DEFAULT_BRANDING_KEY);
        }

        // Colors.
        // @deprecated Moved in to `theme` object. Kept here for backward compatibility.
        if (overrideFallbackValues.containsKey(COLORS_KEY)) {
            colors = (JSONObject) overrideFallbackValues.get(COLORS_KEY);
        }

        // Theme
        if (overrideFallbackValues.containsKey(THEME_KEY)) {
            theme = (JSONObject) overrideFallbackValues.get(THEME_KEY);
        }

        if (overrideFallbackValues.containsKey(ACTIVE_THEME_KEY)) {
            activeThemeName = (String) overrideFallbackValues.get(ACTIVE_THEME_KEY);
        }

        // Product details
        if (overrideFallbackValues.containsKey(PRODUCT_NAME_KEY)) {
            productName = (String) overrideFallbackValues.get(PRODUCT_NAME_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_URL_KEY)) {
            productURL = (String) overrideFallbackValues.get(PRODUCT_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_LOGO_URL_KEY)) {
            productLogoURL = (String) overrideFallbackValues.get(PRODUCT_LOGO_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_LOGO_ALT_KEY)) {
            productLogoAlt = (String) overrideFallbackValues.get(PRODUCT_LOGO_ALT_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_WHITE_LOGO_URL_KEY)) {
            productWhiteLogoURL = (String) overrideFallbackValues.get(PRODUCT_WHITE_LOGO_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_WHITE_LOGO_ALT_KEY)) {
            productWhiteLogoAlt = (String) overrideFallbackValues.get(PRODUCT_WHITE_LOGO_ALT_KEY);
        }

        // Stylesheets
        if (overrideFallbackValues.containsKey(ACCOUNT_APP_STYLESHEET_KEY)) {
            overrideStylesheet = (String) overrideFallbackValues.get(ACCOUNT_APP_STYLESHEET_KEY);
        }

        // Organization Details
        if (overrideFallbackValues.containsKey(COPYRIGHT_TEXT_KEY)) {
            __DEPRECATED__copyrightText = (String) overrideFallbackValues.get(COPYRIGHT_TEXT_KEY);
        }

        if (overrideFallbackValues.containsKey(SITE_TITLE_KEY)) {
            __DEPRECATED__siteTitle = (String) overrideFallbackValues.get(SITE_TITLE_KEY);
        }

        if (overrideFallbackValues.containsKey(SUPPORT_EMAIL_KEY)) {
            supportEmail = (String) overrideFallbackValues.get(SUPPORT_EMAIL_KEY);
        }

        // Images
        if (overrideFallbackValues.containsKey(FAVICON_KEY)) {
            faviconURL = (String) overrideFallbackValues.get(FAVICON_KEY);
        }

        // Links
        if (overrideFallbackValues.containsKey(PRIVACY_POLICY_URL_KEY)) {
            privacyPolicyURL = (String) overrideFallbackValues.get(PRIVACY_POLICY_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(TERMS_OF_USE_URL_KEY)) {
            termsOfUseURL = (String) overrideFallbackValues.get(TERMS_OF_USE_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(COOKIE_POLICY_URL_KEY)) {
            cookiePolicyURL = (String) overrideFallbackValues.get(COOKIE_POLICY_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(SELF_SIGN_UP_URL_KEY)) {
            selfSignUpOverrideURL = (String) overrideFallbackValues.get(SELF_SIGN_UP_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PASSWORD_RECOVERY_URL_KEY)) {
            passwordRecoveryOverrideURL = (String) overrideFallbackValues.get(PASSWORD_RECOVERY_URL_KEY);
        }
    }

    String DEFAULT_RESOURCE_LOCALE = "en-US";
    String ORG_PREFERENCE_RESOURCE_TYPE = "ORG";
    String APP_PREFERENCE_RESOURCE_TYPE = "APP";
    String RESOURCE_TYPE = "type";
    String preferenceResourceType = ORG_PREFERENCE_RESOURCE_TYPE;
    String tenantRequestingPreferences = tenantForTheming;
    String applicationRequestingPreferences = spAppId;
    String locale = StringUtils.isNotBlank(getUserLocaleCode(request)) ? getUserLocaleCode(request) : DEFAULT_RESOURCE_LOCALE;

    try {

        // If the `sp` param is defined, set the resource type as app.
        if (StringUtils.isNotBlank(applicationRequestingPreferences)) {
            preferenceResourceType = APP_PREFERENCE_RESOURCE_TYPE;
        }

        BrandingPreferenceRetrievalClient brandingPreferenceRetrievalClient = new BrandingPreferenceRetrievalClient();
        JSONObject brandingPreferenceResponse = null;
        Object cachedBrandingPreferenceResponse = request.getAttribute(BRANDING_PREFERENCE_CACHE_KEY);
        if (cachedBrandingPreferenceResponse != null && cachedBrandingPreferenceResponse instanceof BrandingPreferenceRetrievalClientException) {
            throw (BrandingPreferenceRetrievalClientException) cachedBrandingPreferenceResponse;
        } else {
            brandingPreferenceResponse = (JSONObject) cachedBrandingPreferenceResponse;
        }
        if (brandingPreferenceResponse == null) {
            brandingPreferenceResponse = brandingPreferenceRetrievalClient.getPreference(tenantRequestingPreferences,
                preferenceResourceType, applicationRequestingPreferences, DEFAULT_RESOURCE_LOCALE);
            request.setAttribute(BRANDING_PREFERENCE_CACHE_KEY, brandingPreferenceResponse);
        }

        if (brandingPreferenceResponse.has(PREFERENCE_KEY)) {
            brandingPreference = brandingPreferenceResponse.getJSONObject(PREFERENCE_KEY);
            preferenceResourceType = brandingPreferenceResponse.getString(RESOURCE_TYPE);
        }


      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');


    // Get the layout store url from the configuration file
    String tempLayoutStoreURL = application.getInitParameter("LayoutStoreURL");
    if (!StringUtils.equals(tenantRequestingPreferences, IdentityManagementEndpointConstants.SUPER_TENANT) && !StringUtils.isBlank(tempLayoutStoreURL)) {
        layoutStoreURL = tempLayoutStoreURL;
    }

    // Common data for the layout file.
    layoutData.put("BASE_URL", "includes/layouts/" + layout);

    if (brandingPreference != null) {
        // First, check if Branding is enabled.
        if (brandingPreference.has(CONFIGS_KEY)) {
            if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_BRANDING_ENABLED_KEY)) {
                isBrandingEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_BRANDING_ENABLED_KEY);
            }
        }

        // Proceed only if the branding is enabled.
        if (isBrandingEnabledInTenantPreferences) {
            // Keys.
            String LAYOUT_KEY = "layout";
            String ACTIVE_LAYOUT_KEY = "activeLayout";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY = "sideImg";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY = "imgURL";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY = "altText";
            String LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY = "productTagLine";

            // Layout names.
            String LEFT_IMAGE_LAYOUT_NAME = "left-image";
            String RIGHT_IMAGE_LAYOUT_NAME = "right-image";
            String LEFT_ALIGNED_LAYOUT_NAME = "left-aligned";
            String RIGHT_ALIGNED_LAYOUT_NAME = "right-aligned";

            // Keys for the layout data hash map.
            String SIDE_IMAGE_URL_KEY = "sideImgUrl";
            String SIDE_IMAGE_ALT_KEY = "sideImgAltText";
            String PRODUCT_TAG_LINE_KEY = "productTagLine";

            // Layout resolving logic.
            if (brandingPreference.has(LAYOUT_KEY)) {
                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(ACTIVE_LAYOUT_KEY)) {
                    if (!StringUtils.isBlank(brandingPreference.getJSONObject(LAYOUT_KEY).getString(ACTIVE_LAYOUT_KEY))){
                        String temp = brandingPreference.getJSONObject(LAYOUT_KEY).getString(ACTIVE_LAYOUT_KEY);
                        if (StringUtils.equals(temp, PREFIX_FOR_CUSTOM_LAYOUT_NAME)) {
                            // App-wise and tenant-wise custom layout resolving logic.
                            if (StringUtils.equals(preferenceResourceType, APP_PREFERENCE_RESOURCE_TYPE)) {
                                layout = temp + CUSTOM_LAYOUT_NAME_SEPERATOR + tenantRequestingPreferences + CUSTOM_LAYOUT_NAME_SEPERATOR + convertApplicationName(applicationRequestingPreferences);
                                layoutFileRelativePath = layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/apps/" + convertApplicationName(applicationRequestingPreferences) + "/body.ser";
                                layoutData.put("BASE_URL", layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/apps/" + convertApplicationName(applicationRequestingPreferences));
                            } else if (StringUtils.equals(preferenceResourceType, ORG_PREFERENCE_RESOURCE_TYPE)) {
                                layout = temp + CUSTOM_LAYOUT_NAME_SEPERATOR + tenantRequestingPreferences;
                                layoutFileRelativePath = layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/body.ser";
                                layoutData.put("BASE_URL", layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences));
                            }
                        } else {
                            // Pre-added layouts
                            String layoutFilePath = "includes/layouts/" + temp + "/body.ser";
                            if (config.getServletContext().getResource(layoutFilePath) != null) {
                                layout = temp;
                                layoutFileRelativePath = layoutFilePath;
                                layoutData.put("BASE_URL", "includes/layouts/" + temp);

                                // Get the related data to specific layouts.
                                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY)) {
                                    if (brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY)) {
                                        layoutData.put(SIDE_IMAGE_URL_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).getString(LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY));
                                    }
                                    if (brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY)) {
                                        layoutData.put(SIDE_IMAGE_ALT_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).getString(LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY));
                                    }
                                }
                                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY)) {
                                    if (!StringUtils.isBlank(brandingPreference.getJSONObject(LAYOUT_KEY).getString(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY))) {
                                        layoutData.put(PRODUCT_TAG_LINE_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getString(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');


        // Proceed only if `preferences` object is defined.
        if (brandingPreference != null) {
            // First, check if Branding is enabled.
            if (brandingPreference.has(CONFIGS_KEY)) {
                if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_BRANDING_ENABLED_KEY)) {
                    isBrandingEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_BRANDING_ENABLED_KEY);
                }
            }

            // Proceed only if the branding is enabled.
            if (isBrandingEnabledInTenantPreferences) {
                // Custom Text
                for (String screenName : screenNames) {
                    StringBuilder textBrandingCacheKey = new StringBuilder(BRANDING_TEXT_PREFERENCE_CACHE_KEY);
                    textBrandingCacheKey.append("-");
                    textBrandingCacheKey.append(screenName);
                    JSONObject customTextPreferenceResponse = (JSONObject) request.getAttribute(textBrandingCacheKey.toString());
                    if (customTextPreferenceResponse == null) {
                        customTextPreferenceResponse = brandingPreferenceRetrievalClient.getCustomTextPreference(
                            tenantRequestingPreferences,
                            preferenceResourceType,
                            applicationRequestingPreferences,
                            screenName,
                            locale
                        );
                        request.setAttribute(textBrandingCacheKey.toString(), customTextPreferenceResponse);
                    }

                    // Merge the preferences for the current screen into the customText object
                    if (customTextPreferenceResponse.has(PREFERENCE_KEY)) {
                        if (customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY) != null && customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).has(TEXT_KEY)) {
                            if (customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY) != null) {
                                for (Object keyObj : customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY).keySet()) {
                                    String key = (String) keyObj;
                                    customText.put(key, customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY).getString(key));
                                }
                            }
                        }
                    }
                }

                // Configs
                if (brandingPreference.has(CONFIGS_KEY)) {
                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_SELF_SIGN_UP_ENABLED_KEY)) {
                        isSelfSignUpEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_SELF_SIGN_UP_ENABLED_KEY);
                    }

                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_PASSWORD_RECOVERY_ENABLED_KEY)) {
                        isPasswordRecoveryEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_PASSWORD_RECOVERY_ENABLED_KEY);
                    }

                    // @deprecated Renamed to `removeDefaultBranding` key. Kept here for backward compatibility.
                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(SHOULD_REMOVE_ASGARDEO_BRANDING_KEY)) {
                        shouldRemoveDefaultBranding = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(SHOULD_REMOVE_ASGARDEO_BRANDING_KEY);
                    }

                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(SHOULD_REMOVE_DEFAULT_BRANDING_KEY)) {
                        shouldRemoveDefaultBranding = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(SHOULD_REMOVE_DEFAULT_BRANDING_KEY);
                    }
                }

                // Colors.
                // @deprecated Moved in to `theme` object. Kept here for backward compatibility.
                if (brandingPreference.has(COLORS_KEY)) {
                    colors = brandingPreference.getJSONObject(COLORS_KEY);
                }

                // Theme
                if (brandingPreference.has(THEME_KEY)) {
                    if (brandingPreference.getJSONObject(THEME_KEY).has(ACTIVE_THEME_KEY)) {
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(THEME_KEY).getString(ACTIVE_THEME_KEY))) {
                            activeThemeName = brandingPreference.getJSONObject(THEME_KEY).getString(ACTIVE_THEME_KEY);

                            if (brandingPreference.getJSONObject(THEME_KEY).has(activeThemeName)
                                && brandingPreference.getJSONObject(THEME_KEY).getJSONObject(activeThemeName) != null) {

                                theme = brandingPreference.getJSONObject(THEME_KEY).getJSONObject(activeThemeName);

                                if (theme.has(IMAGES_KEY) && theme.getJSONObject(IMAGES_KEY) != null) {
                                    if (theme.getJSONObject(IMAGES_KEY).has(LOGO_KEY) && theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY) != null) {
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(IMAGE_URL_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY))) {

                                            logoURL = theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY);
                                        }
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(ALT_TEXT_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY))) {

                                            logoAlt = theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY);
                                        }
                                    }
                                    if (theme.getJSONObject(IMAGES_KEY).has(FAVICON_KEY) && theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY) != null) {
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).has(IMAGE_URL_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY))) {

                                            faviconURL = theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // Stylesheets
                if (brandingPreference.has(STYLESHEETS_KEY)) {
                    if (brandingPreference.getJSONObject(STYLESHEETS_KEY).has(ACCOUNT_APP_STYLESHEET_KEY)) {
                        // Only assign the `stylesheet` from response if not empty.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(STYLESHEETS_KEY).getString(ACCOUNT_APP_STYLESHEET_KEY))) {
                            overrideStylesheet = brandingPreference.getJSONObject(STYLESHEETS_KEY).getString(ACCOUNT_APP_STYLESHEET_KEY);
                        }
                    }
                }

                // Organization Details
                if (brandingPreference.has(ORG_DETAILS_KEY)) {
                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(COPYRIGHT_TEXT_KEY)) {
                        // Only assign the `copyright` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(COPYRIGHT_TEXT_KEY))) {
                            __DEPRECATED__copyrightText = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(COPYRIGHT_TEXT_KEY);
                        }
                    }

                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(SITE_TITLE_KEY)) {
                        // Only assign the `siteTitle` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SITE_TITLE_KEY))) {
                            __DEPRECATED__siteTitle = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SITE_TITLE_KEY);
                        }
                    }

                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(SUPPORT_EMAIL_KEY)) {
                        // Only assign the `supportEmail` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SUPPORT_EMAIL_KEY))) {
                            supportEmail = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SUPPORT_EMAIL_KEY);
                        }
                    }
                }

                // Images
                if (brandingPreference.has(IMAGES_KEY)) {
                    if (brandingPreference.getJSONObject(IMAGES_KEY).has(LOGO_KEY)) {
                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(IMAGE_URL_KEY)) {
                            // Only assign the `logoURL` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY))) {
                                logoURL = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY);
                            }
                        }

                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(ALT_TEXT_KEY)) {
                            // Only assign the `logoAlt` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY))) {
                                logoAlt = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY);
                            }
                        }
                    }

                    if (brandingPreference.getJSONObject(IMAGES_KEY).has(FAVICON_KEY)) {
                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).has(IMAGE_URL_KEY)) {
                            // Only assign the `faviconURL` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY))) {
                                faviconURL = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY);
                            }
                        }
                    }
                }

                // Links
                if (brandingPreference.has(URLS_KEY)) {
                    if (brandingPreference.getJSONObject(URLS_KEY).has(PRIVACY_POLICY_URL_KEY)) {
                        // Only assign the `privacyPolicyURL` from response if not empty. Else use the default value.
                        String privacyPolicyURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(PRIVACY_POLICY_URL_KEY);
                        if (!StringUtils.isBlank(privacyPolicyURLInput) && !privacyPolicyURLInput.toLowerCase().contains("javascript:") &&
                            !privacyPolicyURLInput.toLowerCase().contains("data:")) {
                                privacyPolicyURL = privacyPolicyURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(TERMS_OF_USE_URL_KEY)) {
                        // Only assign the `termsOfUseURL` from response if not empty. Else use the default value.
                        String termsOfUseURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(TERMS_OF_USE_URL_KEY);
                        if (!StringUtils.isBlank(termsOfUseURLInput) && !termsOfUseURLInput.toLowerCase().contains("javascript:") &&
                            !termsOfUseURLInput.toLowerCase().contains("data:")) {
                                termsOfUseURL = termsOfUseURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(COOKIE_POLICY_URL_KEY)) {
                        // Only assign the `cookiePolicyURL` from response if not empty. Else use the default value.
                        String cookiePolicyURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(COOKIE_POLICY_URL_KEY);
                        if (!StringUtils.isBlank(cookiePolicyURLInput) && !cookiePolicyURLInput.toLowerCase().contains("javascript:") &&
                            !cookiePolicyURLInput.toLowerCase().contains("data:")) {
                                cookiePolicyURL = cookiePolicyURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(SELF_SIGN_UP_URL_KEY)) {
                        String selfSignUpURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(SELF_SIGN_UP_URL_KEY);
                        if (!StringUtils.isBlank(selfSignUpURLInput) && !selfSignUpURLInput.toLowerCase().contains("javascript:") &&
                            !selfSignUpURLInput.toLowerCase().contains("data:")) {
                            selfSignUpOverrideURL = selfSignUpURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(PASSWORD_RECOVERY_URL_KEY)) {
                        String passwordRecoveryURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(PASSWORD_RECOVERY_URL_KEY);
                        if (!StringUtils.isBlank(passwordRecoveryURLInput) && !passwordRecoveryURLInput.toLowerCase().contains("javascript:") &&
                            !passwordRecoveryURLInput.toLowerCase().contains("data:")) {
                            passwordRecoveryOverrideURL = passwordRecoveryURLInput;
                        }
                    }
                }
            }
        }

    } catch (BrandingPreferenceRetrievalClientException e) {
        // Exception is ignored and the variable will use the fallbacks.
        // TODO: Move the duplicated logic to a common place.
        request.setAttribute(BRANDING_PREFERENCE_CACHE_KEY, e);
    } finally {

        // Set fallbacks.
        if (StringUtils.isEmpty(logoURL)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                logoURL = productLogoURL;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                logoURL = productWhiteLogoURL;
            } else {
                logoURL = productLogoURL;
            }
        }

        // Set powered by logo URL.
        if (StringUtils.isEmpty(poweredByLogoURL)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                poweredByLogoURL = productLogoURL;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                poweredByLogoURL = productWhiteLogoURL;
            } else {
                poweredByLogoURL = productLogoURL;
            }
        }

        if (StringUtils.isEmpty(logoAlt)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                logoAlt = productLogoAlt;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                logoAlt = productWhiteLogoAlt;
            } else {
                logoAlt = productLogoAlt;
            }
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

    final String SMSOTP = "SMSOTP";
    final String EMAIL = "EMAIL";
    final String SECURITY_QUESTIONS = "SECURITY_QUESTIONS";
    boolean error = IdentityManagementEndpointUtil.getBooleanValue(request.getAttribute("error"));
    String errorMsg = IdentityManagementEndpointUtil.getStringValue(request.getAttribute("errorMsg"));
    boolean isTenantQualifiedUsername = Boolean.parseBoolean(request.getParameter("isTenantQualifiedUsername"));
    String username = StringUtils.isNotEmpty(request.getParameter("username"))
        ? Encode.forHtmlAttribute(request.getParameter("username"))
        : "";
    if (isTenantQualifiedUsername) {
        tenantDomain = MultitenantUtils.getTenantDomain(username);
        username = MultitenantUtils.getTenantAwareUsername(username);
    }
    boolean isSaaSApp = Boolean.parseBoolean(request.getParameter("isSaaSApp"));
    String selectedOption= EMAIL;
    if (SMSOTP.equalsIgnoreCase(request.getParameter("selectedOption"))) {
        selectedOption = SMSOTP;
    }
    String sp = Encode.forJava(request.getParameter("sp"));
    String spId = Encode.forJava(request.getParameter("spId"));

    if (StringUtils.isBlank(tenantDomain)) {
        tenantDomain = IdentityManagementEndpointConstants.SUPER_TENANT;
    }

    // The user could have already been resolved and sent here.
    // Trying to resolve tenant domain from user to handle saas scenario.
    if (isSaaSApp &&
            StringUtils.isNotBlank(username) &&
            !IdentityTenantUtil.isTenantQualifiedUrlsEnabled() &&
            StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {

        tenantDomain = IdentityManagementServiceUtil.getInstance().getUser(username).getTenantDomain();
    }

    // Retrieve application access url to redirect user back to the application.
    String applicationAccessURLWithoutEncoding = null;

    try {
        ApplicationDataRetrievalClient applicationDataRetrievalClient = new ApplicationDataRetrievalClient();
        applicationAccessURLWithoutEncoding = applicationDataRetrievalClient.getApplicationAccessURL(tenantDomain,
                sp);
        applicationAccessURLWithoutEncoding = IdentityManagementEndpointUtil.replaceUserTenantHintPlaceholder(
                                                                applicationAccessURLWithoutEncoding, userTenantDomain);
    } catch (ApplicationDataRetrievalClientException e) {
        // Ignored and fallback to login page url.
    }

    ReCaptchaApi reCaptchaApi = new ReCaptchaApi();
    try {
        ReCaptchaProperties reCaptchaProperties = reCaptchaApi.getReCaptcha(tenantDomain, true, "ReCaptcha",
                "password-recovery");

        if (reCaptchaProperties.getReCaptchaEnabled()) {
            Map<String, List<String>> headers = new HashMap<>();
            headers.put("reCaptcha", Arrays.asList(String.valueOf(true)));
            headers.put("reCaptchaAPI", Arrays.asList(reCaptchaProperties.getReCaptchaAPI()));
            headers.put("reCaptchaKey", Arrays.asList(reCaptchaProperties.getReCaptchaKey()));
            IdentityManagementEndpointUtil.addReCaptchaHeaders(request, headers);
        }
    } catch (ApiException e) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", e.getMessage());
        if (!StringUtils.isBlank(username)) {
            request.setAttribute("username", username);
        }
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }

    boolean isEmailNotificationEnabled = false;

    isEmailNotificationEnabled = Boolean.parseBoolean(application.getInitParameter(
            IdentityManagementEndpointConstants.ConfigConstants.ENABLE_EMAIL_NOTIFICATION));

    boolean reCaptchaEnabled = false;

    if (request.getAttribute("reCaptcha") != null &&
            "TRUE".equalsIgnoreCase((String) request.getAttribute("reCaptcha"))) {
        reCaptchaEnabled = true;
    }

    Boolean isQuestionBasedPasswordRecoveryEnabledByTenant = false;
    Boolean isSMSRecoveryAvailable = false;
    Boolean isEmailLinkBasedPasswordRecoveryEnabledByTenant = false;
    Boolean isMultiAttributeLoginEnabledInTenant = false;
    String allowedAttributes = null;
    try {
        PreferenceRetrievalClient preferenceRetrievalClient = new PreferenceRetrievalClient();
        isQuestionBasedPasswordRecoveryEnabledByTenant =
            preferenceRetrievalClient.checkQuestionBasedPasswordRecovery(tenantDomain) &&
            Boolean.parseBoolean(IdentityUtil.getProperty("Connectors.ChallengeQuestions.Enabled"));
        isEmailLinkBasedPasswordRecoveryEnabledByTenant =
            preferenceRetrievalClient.checkEmailLinkBasedPasswordRecovery(tenantDomain);
        isSMSRecoveryAvailable = preferenceRetrievalClient.checkSMSOTPBasedPasswordRecovery(tenantDomain);
        isMultiAttributeLoginEnabledInTenant = preferenceRetrievalClient.checkMultiAttributeLogin(tenantDomain);
        allowedAttributes = preferenceRetrievalClient.checkMultiAttributeLoginProperty(tenantDomain);
    } catch (PreferenceRetrievalClientException e) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", IdentityManagementEndpointUtil
                        .i18n(recoveryResourceBundle, "something.went.wrong.contact.admin"));
        IdentityManagementEndpointUtil.addErrorInformation(request, e);
        if (!StringUtils.isBlank(username)) {
            request.setAttribute("username", username);
        }
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }
    Boolean isEmailRecoveryAvailable = isEmailNotificationEnabled && isEmailLinkBasedPasswordRecoveryEnabledByTenant;

    String emailUsernameEnable = application.getInitParameter("EnableEmailUserName");
    Boolean isEmailUsernameEnabled = false;
    String usernameLabel = "Username";
    String usernamePlaceHolder = "Enter.your.username.here";

    if (StringUtils.isNotBlank(emailUsernameEnable) && Boolean.parseBoolean(emailUsernameEnable)) {
        usernameLabel = "email.username";
        usernamePlaceHolder = "enter.your.email";
    } else if (isMultiAttributeLoginEnabledInTenant) {
        if (allowedAttributes != null) {
            usernameLabel = getUsernameLabel(recoveryResourceBundle, allowedAttributes);
            usernamePlaceHolder = "Enter.your.identifier";
        }
    }

      out.write("\n");
      out.write("\n");
      out.write("<!doctype html>\n");
      out.write("<html lang=\"en-US\">\n");
      out.write("<head>\n");
      out.write("    ");

        File headerFile = new File(getServletContext().getRealPath("extensions/header.jsp"));
        if (headerFile.exists()) {
    
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    ");

        if (reCaptchaEnabled) {
            String reCaptchaAPI = CaptchaUtil.reCaptchaAPIURL();
    
      out.write("\n");
      out.write("        <script src='");
      out.print((reCaptchaAPI));
      out.write("'></script>\n");
      out.write("    <style type=\"text/css\">\n");
      out.write("        .grecaptcha-badge {\n");
      out.write("            bottom: 55px !important;\n");
      out.write("        }\n");
      out.write("        @media only screen and (max-width: 767px) {\n");
      out.write("            .grecaptcha-badge {\n");
      out.write("                bottom: 100px !important;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("</head>\n");
      out.write("<body class=\"login-portal layout recovery-layout\">\n");
      out.write("    ");
      //  layout:main
      org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler _jspx_th_layout_005fmain_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler) _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.get(org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler.class);
      _jspx_th_layout_005fmain_005f0.setPageContext(_jspx_page_context);
      _jspx_th_layout_005fmain_005f0.setParent(null);
      // /password-recovery.jsp(221,4) name = layoutName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_layout_005fmain_005f0.setLayoutName( layout );
      // /password-recovery.jsp(221,4) name = layoutFileRelativePath type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_layout_005fmain_005f0.setLayoutFileRelativePath( layoutFileRelativePath );
      // /password-recovery.jsp(221,4) name = data type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_layout_005fmain_005f0.setData( layoutData );
      int _jspx_eval_layout_005fmain_005f0 = _jspx_th_layout_005fmain_005f0.doStartTag();
      if (_jspx_eval_layout_005fmain_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("        ");
          //  layout:component
          org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
          _jspx_th_layout_005fcomponent_005f0.setPageContext(_jspx_page_context);
          _jspx_th_layout_005fcomponent_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
          // /password-recovery.jsp(223,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_layout_005fcomponent_005f0.setComponentName("ProductHeader");
          int _jspx_eval_layout_005fcomponent_005f0 = _jspx_th_layout_005fcomponent_005f0.doStartTag();
          if (_jspx_eval_layout_005fcomponent_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("            ");
              out.write("\n");
              out.write("            ");

                File productTitleFile = new File(getServletContext().getRealPath("extensions/product-title.jsp"));
                if (productTitleFile.exists()) {
            
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-title.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } else { 
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-title.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } 
              out.write("\n");
              out.write("        ");
              int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f0.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_layout_005fcomponent_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f0);
          out.write("\n");
          out.write("        ");
          //  layout:component
          org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f1 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
          _jspx_th_layout_005fcomponent_005f1.setPageContext(_jspx_page_context);
          _jspx_th_layout_005fcomponent_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
          // /password-recovery.jsp(234,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_layout_005fcomponent_005f1.setComponentName("MainSection");
          int _jspx_eval_layout_005fcomponent_005f1 = _jspx_th_layout_005fcomponent_005f1.doStartTag();
          if (_jspx_eval_layout_005fcomponent_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("            <div class=\"ui segment\">\n");
              out.write("                ");
              out.write("\n");
              out.write("                <h3 class=\"ui header m-0\" data-testid=\"password-recovery-page-header\">\n");
              out.write("                    ");
              out.print(i18n(recoveryResourceBundle, customText, "password.recovery.heading"));
              out.write("\n");
              out.write("                </h3>\n");
              out.write("                ");
 if (error) { 
              out.write("\n");
              out.write("                <div class=\"ui visible negative message\" id=\"server-error-msg\">\n");
              out.write("                    ");
              out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, errorMsg));
              out.write("\n");
              out.write("                </div>\n");
              out.write("                ");
 } 
              out.write("\n");
              out.write("                <div class=\"ui negative message\" id=\"error-msg\" hidden=\"hidden\"></div>\n");
              out.write("\n");
              out.write("                <div class=\"ui divider hidden\"></div>\n");
              out.write("                <div class=\"segment-form\">\n");
              out.write("                    <form class=\"ui large form\" method=\"post\" action=\"verify.do\" id=\"recoverDetailsForm\">\n");
              out.write("                        ");

                        if (StringUtils.isNotBlank(sp)) {
                        
              out.write("\n");
              out.write("                            <input id=\"sp\" name=\"sp\" type=\"hidden\" value=\"");
              out.print(Encode.forHtmlAttribute(sp));
              out.write("\"/>\n");
              out.write("                        ");

                        }
                        
              out.write("\n");
              out.write("                        ");

                        if (StringUtils.isNotEmpty(username) && !error) {
                        
              out.write("\n");
              out.write("                        <div class=\"field mb-5\">\n");
              out.write("                            ");
              out.print(i18n(recoveryResourceBundle, customText, "password.recovery.body"));
              out.write("\n");
              out.write("                        </div>\n");
              out.write("                        <div class=\"field\">\n");
              out.write("                            <label for=\"username\">\n");
              out.write("                                ");
              out.print(i18n(recoveryResourceBundle, customText, usernameLabel) );
              out.write("\n");
              out.write("                            </label>\n");
              out.write("                            <div class=\"ui fluid left icon input\">\n");
              out.write("                                <input\n");
              out.write("                                    placeholder=\"");
              out.print(AuthenticationEndpointUtil.i18n(
                                        recoveryResourceBundle, usernamePlaceHolder));
              out.write("\"\n");
              out.write("                                    id=\"usernameUserInput\"\n");
              out.write("                                    name=\"usernameUserInput\"\n");
              out.write("                                    value=\"");
              out.print(Encode.forHtmlAttribute(username));
              out.write("\"\n");
              out.write("                                    type=\"text\"\n");
              out.write("                                    tabindex=\"0\"\n");
              out.write("                                    required\n");
              out.write("                                >\n");
              out.write("                                <i aria-hidden=\"true\" class=\"user fill icon\"></i>\n");
              out.write("                            </div>\n");
              out.write("                            <input id=\"username\" name=\"username\" type=\"hidden\">\n");
              out.write("                            ");

                                if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
                            
              out.write("\n");
              out.write("                            <input id=\"tenantDomain\" name=\"tenantDomain\"\n");
              out.write("                                value=\"");
              out.print( Encode.forHtmlAttribute(tenantDomain) );
              out.write("\" type=\"hidden\">\n");
              out.write("                            ");

                                }
                            
              out.write("\n");
              out.write("                            <input id=\"isSaaSApp\" name=\"isSaaSApp\" value=\"");
              out.print( isSaaSApp );
              out.write("\" type=\"hidden\">\n");
              out.write("                        </div>\n");
              out.write("                        ");

                        } else {
                        
              out.write("\n");
              out.write("                        <div class=\"field mb-5\">\n");
              out.write("                            ");
              out.print(i18n(recoveryResourceBundle, customText, "password.recovery.body"));
              out.write("\n");
              out.write("                        </div>\n");
              out.write("                        <div class=\"field\">\n");
              out.write("                            <label for=\"username\">\n");
              out.write("                                ");
              out.print(i18n(recoveryResourceBundle, customText, usernameLabel) );
              out.write("\n");
              out.write("                            </label>\n");
              out.write("                            <div class=\"ui fluid left icon input\">\n");
              out.write("                                ");
 String identifierPlaceholder=i18n(recoveryResourceBundle, customText,
                                    "password.recovery.identifier.input.placeholder" , "" , false); 
              out.write("\n");
              out.write("                                ");
 if (StringUtils.isNotBlank(identifierPlaceholder)) { 
              out.write("\n");
              out.write("                                    <input placeholder=\"");
              out.print(identifierPlaceholder);
              out.write("\" id=\"usernameUserInput\"\n");
              out.write("                                        name=\"usernameUserInput\" type=\"text\" tabindex=\"0\" required>\n");
              out.write("                                ");
 } else { 
              out.write("\n");
              out.write("                                    <input\n");
              out.write("                                        placeholder=\"");
              out.print(AuthenticationEndpointUtil.i18n(
                                            recoveryResourceBundle, usernamePlaceHolder));
              out.write("\"\n");
              out.write("                                        id=\"usernameUserInput\"\n");
              out.write("                                        name=\"usernameUserInput\"\n");
              out.write("                                        type=\"text\"\n");
              out.write("                                        tabindex=\"0\"\n");
              out.write("                                        required\n");
              out.write("                                    >\n");
              out.write("                                ");
 } 
              out.write("\n");
              out.write("                                <i aria-hidden=\"true\" class=\"user fill icon\"></i>\n");
              out.write("                            </div>\n");
              out.write("                            <input id=\"username\" name=\"username\" type=\"hidden\">\n");
              out.write("                            ");

                                if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
                            
              out.write("\n");
              out.write("                            <input id=\"tenantDomain\" name=\"tenantDomain\"\n");
              out.write("                                value=\"");
              out.print( Encode.forHtmlAttribute(tenantDomain) );
              out.write("\" type=\"hidden\">\n");
              out.write("                            ");

                                }
                            
              out.write("\n");
              out.write("                            <input id=\"isSaaSApp\" name=\"isSaaSApp\" value=\"");
              out.print( isSaaSApp );
              out.write("\" type=\"hidden\">\n");
              out.write("                        </div>\n");
              out.write("\n");
              out.write("                        ");

                            }
                        
              out.write("\n");
              out.write("                        <div class=\"ui list mb-5 field-validation-error-description\" id=\"error-msg-invalid-email\">\n");
              out.write("                                <i class=\"exclamation circle icon\"></i>\n");
              out.write("                                <span id=\"error-message\">");
              out.print(IdentityManagementEndpointUtil.i18n
                                    (recoveryResourceBundle,"Please.enter.valid.email"));
              out.write("\n");
              out.write("                                </span>\n");
              out.write("                        </div>\n");
              out.write("\n");
              out.write("                        ");

                            Boolean multipleRecoveryOptionsAvailable =
                                (isEmailRecoveryAvailable && isSMSRecoveryAvailable)
                                || (isEmailRecoveryAvailable && isQuestionBasedPasswordRecoveryEnabledByTenant)
                                || (isSMSRecoveryAvailable && isQuestionBasedPasswordRecoveryEnabledByTenant);
                            if (multipleRecoveryOptionsAvailable) {
                        
              out.write("\n");
              out.write("                        <div class=\"segment\" style=\"text-align: left;\"\n");
              out.write("                            data-testid=\"password-recovery-page-multi-option-radio\">\n");
              out.write("                            ");

                                if (isEmailRecoveryAvailable) {
                            
              out.write("\n");
              out.write("                            <div class=\"field\">\n");
              out.write("                                <div class=\"ui radio checkbox\">\n");
              out.write("                                    <input type=\"radio\" name=\"recoveryOption\" value=\"");
              out.print(EMAIL);
              out.write("\"\n");
              out.write("                                        ");
              out.print(EMAIL.equals(selectedOption)?"checked":"");
              out.write("/>\n");
              out.write("                                    <label>");
              out.print(i18n(recoveryResourceBundle, customText, "send.email.link"));
              out.write("\n");
              out.write("                                    </label>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            ");

                                }
                                if (isSMSRecoveryAvailable) {
                            
              out.write("\n");
              out.write("                            <div class=\"field\">\n");
              out.write("                                <div class=\"ui radio checkbox\">\n");
              out.write("                                    <input type=\"radio\" name=\"recoveryOption\" value=\"");
              out.print(SMSOTP);
              out.write("\"\n");
              out.write("                                        ");
              out.print(SMSOTP.equals(selectedOption)?"checked":"");
              out.write("/>\n");
              out.write("                                    <label>");
              out.print(i18n(recoveryResourceBundle, customText, "send.code.via.sms"));
              out.write("\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            ");

                                }
                                if (isQuestionBasedPasswordRecoveryEnabledByTenant) {
                            
              out.write("\n");
              out.write("                            <div class=\"field\">\n");
              out.write("                                <div class=\"ui radio checkbox\">\n");
              out.write("                                    <input type=\"radio\" name=\"recoveryOption\" value=\"");
              out.print(SECURITY_QUESTIONS);
              out.write("\"\n");
              out.write("                                        ");
              out.print(SECURITY_QUESTIONS.equals(selectedOption)?"checked":"");
              out.write("/>\n");
              out.write("                                    <label>\n");
              out.write("                                        ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                            "Recover.with.question"));
              out.write("\n");
              out.write("                                    </label>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            ");

                                }
                            
              out.write("\n");
              out.write("                        </div>\n");
              out.write("                        ");
 } else if (isEmailRecoveryAvailable){ 
              out.write("\n");
              out.write("                            <input type=\"hidden\" name=\"recoveryOption\" value=\"");
              out.print(EMAIL);
              out.write("\"/>\n");
              out.write("                        ");
 } else if (isSMSRecoveryAvailable){ 
              out.write("\n");
              out.write("                            <input type=\"hidden\" name=\"recoveryOption\" value=\"");
              out.print(SMSOTP);
              out.write("\"/>\n");
              out.write("                        ");
 } else { 
              out.write("\n");
              out.write("                            <input type=\"hidden\" name=\"recoveryOption\" value=\"");
              out.print(SECURITY_QUESTIONS);
              out.write("\"/>\n");
              out.write("                        ");
 } 
              out.write("\n");
              out.write("\n");
              out.write("                        <input type=\"hidden\" name=\"recoveryStage\" value=\"INITIATE\"/>\n");
              out.write("                        <input type=\"hidden\" name=\"channel\" value=\"\"/>\n");
              out.write("                        <input type=\"hidden\" name=\"sp\" value=\"");
              out.print(sp );
              out.write("\"/>\n");
              out.write("                        <input type=\"hidden\" name=\"spId\" value=\"");
              out.print(spId );
              out.write("\"/>\n");
              out.write("                        <input type=\"hidden\" name=\"urlQuery\" value=\"");
              out.print(request.getQueryString() );
              out.write("\"/>\n");
              out.write("                        <input type=\"hidden\" name=\"isMultiRecoveryOptionsAvailable\"\n");
              out.write("                            value=\"");
              out.print(multipleRecoveryOptionsAvailable );
              out.write("\"/>\n");
              out.write("\n");
              out.write("                        ");

                            String callback = request.getParameter("callback");
                            if (callback != null) {
                        
              out.write("\n");
              out.write("                            <input type=\"hidden\" name=\"callback\" value=\"");
              out.print(Encode.forHtmlAttribute(callback) );
              out.write("\"/>\n");
              out.write("                        ");

                            }
                        
              out.write("\n");
              out.write("\n");
              out.write("                        ");

                            String sessionDataKey = request.getParameter("sessionDataKey");
                            if (sessionDataKey != null) {
                        
              out.write("\n");
              out.write("                            <input type=\"hidden\" name=\"sessionDataKey\"\n");
              out.write("                                value=\"");
              out.print(Encode.forHtmlAttribute(sessionDataKey) );
              out.write("\"/>\n");
              out.write("                        ");

                            }
                        
              out.write("\n");
              out.write("\n");
              out.write("                        ");

                            if (isSaaSApp && StringUtils.isNotBlank(userTenant)) {
                        
              out.write("\n");
              out.write("                            <input type=\"hidden\" name=\"t\"\n");
              out.write("                                value=\"");
              out.print(Encode.forHtmlAttribute(userTenant) );
              out.write("\"/>\n");
              out.write("                        ");

                            }
                        
              out.write("\n");
              out.write("\n");
              out.write("                        ");

                            if (StringUtils.isNotBlank(applicationAccessURLWithoutEncoding)) {
                        
              out.write("\n");
              out.write("                            <input type=\"hidden\" name=\"accessUrl\"\n");
              out.write("                                    value=\"");
              out.print(Encode.forHtmlAttribute(applicationAccessURLWithoutEncoding) );
              out.write("\"/>\n");
              out.write("                        ");

                            }
                        
              out.write("\n");
              out.write("                        <div class=\"mt-4\">\n");
              out.write("                            ");

                                String submitButtoni18nText =
                                    multipleRecoveryOptionsAvailable? "password.recovery.button.multi" :
                                    ( isEmailRecoveryAvailable? "password.recovery.button.email.link" :
                                    ( isQuestionBasedPasswordRecoveryEnabledByTenant? "Recover.with.question" :
                                    ( isSMSRecoveryAvailable ? "password.recovery.button.smsotp" :
                                    "Submit")));
                            
              out.write("\n");
              out.write("                            <button id=\"recoverySubmit\"\n");
              out.write("                                    class=\"ui primary button large fluid\"\n");
              out.write("                                    type=\"submit\">\n");
              out.write("                                    ");
              out.print(i18n(recoveryResourceBundle, customText, submitButtoni18nText));
              out.write("\n");
              out.write("                            </button>\n");
              out.write("                        </div>\n");
              out.write("                        <div class=\"mt-1 align-center\">\n");
              out.write("                            <a href=\"javascript:goBack()\" class=\"ui button secondary large fluid\">\n");
              out.write("                                ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Cancel"));
              out.write("\n");
              out.write("                            </a>\n");
              out.write("                        </div>\n");
              out.write("                        ");

                            if (reCaptchaEnabled) {
                                String reCaptchaKey = CaptchaUtil.reCaptchaSiteKey();
                        
              out.write("\n");
              out.write("                        <div class=\"field\">\n");
              out.write("                            <div class=\"g-recaptcha\"\n");
              out.write("                                data-sitekey=\n");
              out.write("                                        \"");
              out.print(Encode.forHtmlAttribute(reCaptchaKey));
              out.write("\"\n");
              out.write("                                data-bind=\"recoverySubmit\"\n");
              out.write("                                data-callback=\"submitFormReCaptcha\"\n");
              out.write("                                data-theme=\"light\"\n");
              out.write("                                data-tabindex=\"-1\"\n");
              out.write("                            >\n");
              out.write("                            </div>\n");
              out.write("                        </div>\n");
              out.write("                        ");

                            }
                        
              out.write("\n");
              out.write("                    </form>\n");
              out.write("                </div>\n");
              out.write("            </div>\n");
              out.write("        ");
              int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f1.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_layout_005fcomponent_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f1);
          out.write("\n");
          out.write("        ");
          //  layout:component
          org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f2 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
          _jspx_th_layout_005fcomponent_005f2.setPageContext(_jspx_page_context);
          _jspx_th_layout_005fcomponent_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
          // /password-recovery.jsp(485,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_layout_005fcomponent_005f2.setComponentName("ProductFooter");
          int _jspx_eval_layout_005fcomponent_005f2 = _jspx_th_layout_005fcomponent_005f2.doStartTag();
          if (_jspx_eval_layout_005fcomponent_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("            ");
              out.write("\n");
              out.write("            ");

                File productFooterFile = new File(getServletContext().getRealPath("extensions/product-footer.jsp"));
                if (productFooterFile.exists()) {
            
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-footer.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } else { 
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-footer.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } 
              out.write("\n");
              out.write("        ");
              int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f2.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_layout_005fcomponent_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f2);
          out.write("\n");
          out.write("        ");
          if (_jspx_meth_layout_005fdynamicComponent_005f0(_jspx_th_layout_005fmain_005f0, _jspx_page_context))
            return;
          out.write("\n");
          out.write("    ");
          int evalDoAfterBody = _jspx_th_layout_005fmain_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_layout_005fmain_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.reuse(_jspx_th_layout_005fmain_005f0);
      out.write("\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        File footerFile = new File(getServletContext().getRealPath("extensions/footer.jsp"));
        if (footerFile.exists()) {
    
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("        function goBack() {\n");
      out.write("            window.history.back();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function submitFormReCaptcha() {\n");
      out.write("            var subVal = submitForm();\n");
      out.write("            if (subVal) {\n");
      out.write("                document.getElementById(\"recoverDetailsForm\").submit();\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function submitForm() {\n");
      out.write("            // Prevent clicking multiple times, and notify the user something\n");
      out.write("            // is happening in the background.\n");
      out.write("            const submitButton = $(\"#recoverySubmit\");\n");
      out.write("            submitButton.addClass(\"loading\").attr(\"disabled\", true);\n");
      out.write("\n");
      out.write("            if (!validateForm()) {\n");
      out.write("                submitButton.removeClass(\"loading\").attr(\"disabled\", false);\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function validateForm() {\n");
      out.write("            if (!validateUsername()) {\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Validate reCaptcha\n");
      out.write("            ");
 if (reCaptchaEnabled) { 
      out.write("\n");
      out.write("                const errorMessage = $(\"#error-msg\");\n");
      out.write("                const reCaptchaResponse = $(\"[name='g-recaptcha-response']\")[0].value;\n");
      out.write("\n");
      out.write("                if (reCaptchaResponse.trim() === \"\") {\n");
      out.write("                    errorMessage.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                        "Please.select.reCaptcha"));
      out.write("\");\n");
      out.write("                    errorMessage.show();\n");
      out.write("                    $(\"html, body\").animate({scrollTop: errorMessage.offset().top}, \"slow\");\n");
      out.write("\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function validateUsername() {\n");
      out.write("            const errorMessage = $(\"#error-msg-invalid-email\");\n");
      out.write("            const invalidEmailErrorMsg = \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                        "Please.enter.valid.email"));
      out.write("\";\n");
      out.write("            const emptyUsernameErrorMsg = \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                        "Please.enter.your.username"));
      out.write("\";\n");
      out.write("            const emptyUserIdentifierMsg = \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                        "Please.enter.your.identifier"));
      out.write("\";\n");
      out.write("            let errorMsgContent = document.getElementById(\"error-message\");\n");
      out.write("\n");
      out.write("            let userName = document.getElementById(\"username\");\n");
      out.write("            const usernameUserInput = document.getElementById(\"usernameUserInput\");\n");
      out.write("            if (usernameUserInput) {\n");
      out.write("                userName.value = usernameUserInput.value.trim();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if ($(\"#username\").val() === \"\") {\n");
      out.write("                errorMsgContent.innerHTML =\n");
      out.write("                    ");
      out.print(isMultiAttributeLoginEnabledInTenant? "emptyUserIdentifierMsg" : "emptyUsernameErrorMsg");
      out.write(";\n");
      out.write("                errorMessage.show();\n");
      out.write("                submitBtnState( { disabled: true } );\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            var emailRegex = /^(?=.{3,50}$)[\\u00C0-\\u00FFA-Za-z0-9_-]+(((\\+(?!\\.))|\\.)[\\u00C0-\\u00FFA-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,10})$/;\n");
      out.write("            ");

            if (StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {
            
      out.write("\n");
      out.write("                emailRegex = /^(?=.{3,50}$)[\\u00C0-\\u00FFA-Za-z0-9_-]+(\\.[\\u00C0-\\u00FFA-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,10})$/;\n");
      out.write("            ");

            }
            
      out.write("\n");
      out.write("            var userEmailAddress = $(\"#usernameUserInput\").val();\n");
      out.write("\n");
      out.write("            if (!userEmailAddress){\n");
      out.write("                errorMsgContent.innerHTML = invalidEmailErrorMsg;\n");
      out.write("                errorMessage.show();\n");
      out.write("                submitBtnState( { disabled: true } );\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            errorMessage.hide();\n");
      out.write("            $(\"#recoverySubmit\").attr(\"disabled\", false);\n");
      out.write("\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function submitBtnState(options) {\n");
      out.write("            const disabled = options.disabled;\n");
      out.write("            $(\"#recoverySubmit\").attr(\"disabled\", disabled);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        $(document).ready(function () {\n");
      out.write("\n");
      out.write("            const usernameInput = $(\"#usernameUserInput\").val();\n");
      out.write("            if (!usernameInput || usernameInput.trim().length === 0) {\n");
      out.write("                submitBtnState( { disabled: true } );\n");
      out.write("            } else {\n");
      out.write("                submitBtnState( { disabled: false } );\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            $(\"#usernameUserInput\").on(\"input\", function(event) {\n");
      out.write("                validateUsername();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $(\"#recoverDetailsForm\")\n");
      out.write("                .on(\"submit\", submitForm)\n");
      out.write("                .keyup(validateUsername)\n");
      out.write("                .blur(validateUsername);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Removing the recaptcha UI from the keyboard tab order\n");
      out.write("        Array.prototype.forEach.call(document.getElementsByClassName(\"g-recaptcha\"), function (element) {\n");
      out.write("            //Add a load event listener to each wrapper, using capture.\n");
      out.write("            element.addEventListener(\"load\", function (e) {\n");
      out.write("                //Get the data-tabindex attribute value from the wrapper.\n");
      out.write("                var tabindex = e.currentTarget.getAttribute(\"data-tabindex\");\n");
      out.write("                //Check if the attribute is set.\n");
      out.write("                if (tabindex) {\n");
      out.write("                    //Set the tabIndex on the iframe.\n");
      out.write("                    e.target.tabIndex = \"-1\";\n");
      out.write("                }\n");
      out.write("            }, true);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_layout_005fdynamicComponent_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_layout_005fmain_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    javax.servlet.http.HttpServletRequest request = (javax.servlet.http.HttpServletRequest)_jspx_page_context.getRequest();
    javax.servlet.http.HttpServletResponse response = (javax.servlet.http.HttpServletResponse)_jspx_page_context.getResponse();
    //  layout:dynamicComponent
    org.wso2.identity.apps.taglibs.layout.controller.DynamicComponentTagHandler _jspx_th_layout_005fdynamicComponent_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.DynamicComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName.get(org.wso2.identity.apps.taglibs.layout.controller.DynamicComponentTagHandler.class);
    _jspx_th_layout_005fdynamicComponent_005f0.setPageContext(_jspx_page_context);
    _jspx_th_layout_005fdynamicComponent_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
    // /password-recovery.jsp(496,8) name = filePathStoringVariableName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_layout_005fdynamicComponent_005f0.setFilePathStoringVariableName("pathOfDynamicComponent");
    int _jspx_eval_layout_005fdynamicComponent_005f0 = _jspx_th_layout_005fdynamicComponent_005f0.doStartTag();
    if (_jspx_eval_layout_005fdynamicComponent_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("            ");
        org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pathOfDynamicComponent}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
        out.write("\n");
        out.write("        ");
        int evalDoAfterBody = _jspx_th_layout_005fdynamicComponent_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_layout_005fdynamicComponent_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName.reuse(_jspx_th_layout_005fdynamicComponent_005f0);
    return false;
  }
}
