/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-07-07 06:09:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS_MSG;
import org.wso2.carbon.identity.application.authentication.endpoint.util.Constants;
import org.wso2.carbon.identity.captcha.util.CaptchaUtil;
import org.wso2.carbon.identity.core.URLBuilderException;
import org.wso2.carbon.identity.mgt.constants.SelfRegistrationStatusCodes;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementServiceUtil;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil;
import org.wso2.carbon.identity.core.util.IdentityUtil;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApiException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.api.ReCaptchaApi;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.ReCaptchaProperties;
import org.wso2.carbon.identity.mgt.endpoint.util.client.SelfRegistrationMgtClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.SelfRegistrationMgtClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ConfiguredAuthenticatorsRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ConfiguredAuthenticatorsRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.OrganizationDiscoveryConfigDataRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.OrganizationDiscoveryConfigDataRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.client.api.UsernameRecoveryApi;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.Claim;
import org.wso2.carbon.identity.mgt.endpoint.util.client.model.User;
import org.wso2.carbon.identity.mgt.endpoint.util.client.ValidationConfigurationRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import org.wso2.carbon.identity.core.ServiceURLBuilder;
import org.wso2.carbon.utils.multitenancy.MultitenantUtils;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.Enumeration;
import org.json.JSONObject;
import org.json.JSONArray;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl;
import java.nio.charset.StandardCharsets;
import java.util.*;
import org.json.JSONObject;
import java.util.Calendar;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.text.StringEscapeUtils;
import org.owasp.encoder.Encode;
import java.io.BufferedReader;
import java.io.FileReader;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import org.wso2.carbon.identity.core.util.IdentityTenantUtil;
import org.apache.commons.lang.StringUtils;
import java.io.File;
import java.util.Map;
import java.util.HashMap;
import org.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClient;
import org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClientException;
import org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants;
import javax.servlet.http.HttpServletRequest;
import java.util.*;

public final class self_002dregistration_002dusername_002drequest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key) {
        return i18n(resourceBundle, customText, key, null, true);
    }

    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     * Overloaded method with default value.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @param defaultValue Default value.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key, String defaultValue) {
        return i18n(resourceBundle, customText, key, defaultValue, true);
    }

    /**
     * Get the localized string for the given key.
     * Interacts with both the `resourceBundle` & the custom text from the Branding API.
     * Overloaded method with default value with the ability to not fallback to resource bundle and return "" as default.
     *
     * @param resourceBundle Resource bundle.
     * @param customText Custom text.
     * @param key Key of the localized string.
     * @param defaultValue Default value.
     * @param shouldFallbackToResourceBundle Should fallback to resource bundle.
     * @return Localized string.
     */
    public String i18n(ResourceBundle resourceBundle, JSONObject customText, String key, String defaultValue, boolean shouldFallbackToResourceBundle) {
        String localizedString = null;
        Calendar calendar = Calendar.getInstance();
        int currentYear = calendar.get(Calendar.YEAR);

        try {
            if (customText != null && customText.has(key)) {
                localizedString = Encode.forHtmlContent(customText.getString(key));
            } else {
                if (StringUtils.isNotBlank(defaultValue)) {
                    localizedString = Encode.forHtmlContent(defaultValue);
                } else if (shouldFallbackToResourceBundle) {
                    localizedString = IdentityManagementEndpointUtil.i18n(resourceBundle, key);
                } else {
                    localizedString = "";
                }
            }
        } catch (Exception e) {
            // Return the key itself as a fallback
            localizedString = Encode.forHtmlContent(key);
        }

        // Replace newline characters with actual line breaks
        localizedString = localizedString.replace("\\n", "\n");

        return localizedString.replace("{{currentYear}}", String.valueOf(currentYear));
    }

    /**
     * Replaces i18n path placeholders in a given link with locale and country codes.
     *
     * @param locale The locale from which to derive values for placeholders.
     * @param link The link containing i18n placeholders (e.g., {{lang}}, {{country}}, {{locale}}).
     * @return The link with placeholders replaced by actual values based on the given locale.
     */
    public String i18nLink(Locale locale, String link) {
        String transformedLink = link;

        try {
            String langCode = locale.getLanguage();
            String countryCode = locale.getCountry();
            String localeCode = locale.toLanguageTag();

            String LANGUAGE_PLACEHOLDER = "{{lang}}";
            String COUNTRY_PLACEHOLDER = "{{country}}";
            String LOCALE_PLACEHOLDER = "{{locale}}";

            if (transformedLink.contains(LANGUAGE_PLACEHOLDER) || transformedLink.contains(COUNTRY_PLACEHOLDER) || transformedLink.contains(LOCALE_PLACEHOLDER)) {
                transformedLink = transformedLink
                    .replace("{{lang}}", langCode)
                    .replace("{{country}}", countryCode)
                    .replace("{{locale}}", localeCode);
            } else {
                if (transformedLink.contains("?")) {
                    return transformedLink.concat("&ui_locales=" + localeCode);
                } else {
                    return transformedLink.concat("?ui_locales=" + localeCode);
                }
            }

            return StringEscapeUtils.escapeHtml4(transformedLink);
        } catch (Exception e) {
            // Return the link itself as a fallback.
            return StringEscapeUtils.escapeHtml4(transformedLink);
        }
    }

 
    private static final String LOCALE_CODE_KEY = "localeCode";
    private static final String FLAG_CODE_KEY = "flagCode";
    private static final String DISPLAY_NAME_KEY = "displayName";


    /**
     * Retrieve all available locales and their display names for the Local dropdown.
     *
     * @return {List<Map<String, String>>}
     */
    private List<Map<String, String>> getLocaleList(ServletContext context) {
        List<Map<String, String>> localeList = new ArrayList<>();
        String localeOptionsFilePath = context.getRealPath("/WEB-INF/classes/LocaleOptions.properties");

        try (BufferedReader localeReader = new BufferedReader(new FileReader(localeOptionsFilePath, java.nio.charset.StandardCharsets.UTF_8))) {
            Properties localeProperties = new Properties();
            localeProperties.load(localeReader);

            for (String key : localeProperties.stringPropertyNames()) {
                String[] values = localeProperties.getProperty(key).split(",");
                
                // Validate the number of values
                if (values.length == 3) {
                    String flagCode = values[0].trim();
                    String displayName = values[1].trim();
                    String localeCode = values[2].trim();

                    // Avoid null or empty values
                    if (StringUtils.isNotBlank(flagCode) && StringUtils.isNotBlank(displayName) && StringUtils.isNotBlank(localeCode)) {
                        Map<String, String> localeMap = new HashMap<>();
                        localeMap.put(FLAG_CODE_KEY, flagCode);
                        localeMap.put(DISPLAY_NAME_KEY, displayName);
                        localeMap.put(LOCALE_CODE_KEY, localeCode);
                        localeList.add(localeMap);
                    }
                } else {
                    System.err.println("Invalid locale entry in LocaleOptions.properties for key: " + key);
                }
            }
        } catch (Exception e) {
            System.err.println("Error reading LocaleOptions.properties: " + e.getMessage());
            e.printStackTrace();
        }

        return localeList;
    }


    /**
    * Get the user's preferred locale based on the request, cookies, and URL parameters.
    *
    * This method determines the user's locale based on the following priority order:
    * 1. Locale set in a cookie (if available).
    * 2. Locales specified in the "ui_locales" URL parameter.
    * 3. Browser's default locale.
    *
    * If a valid locale cannot be determined from the cookie or URL parameters, the browser's
    * default locale is used as the fallback.
    *
    * @param request The HTTP servlet request.
    * @return The user's preferred locale.
    */
    public Locale getUserLocale(HttpServletRequest request) {
        String lang = "en_US"; // Default lang is en_US
        String COOKIE_NAME = "ui_lang";
        String BUNDLE = "org.wso2.carbon.identity.mgt.recovery.endpoint.i18n.Resources";
        Locale browserLocale = request.getLocale();
        Locale userLocale = browserLocale;
        String uiLocaleFromURL = request.getParameter("ui_locales");
        String localeFromCookie = null;
        // Check cookie for the user selected language first
        Cookie[] cookies = request.getCookies();

        // Map to store default supported language codes.
        Map<String, String> supportedLanguages = new HashMap<>();
        supportedLanguages.put("en", "US");
        supportedLanguages.put("fr", "FR");
        supportedLanguages.put("es", "ES");
        supportedLanguages.put("pt", "PT");
        supportedLanguages.put("de", "DE");
        supportedLanguages.put("zh", "CN");
        supportedLanguages.put("ja", "JP");

        List<String> languageSupportedCountries = new ArrayList<>();
        languageSupportedCountries.add("US");
        languageSupportedCountries.add("FR");
        languageSupportedCountries.add("ES");
        languageSupportedCountries.add("PT");
        languageSupportedCountries.add("DE");
        languageSupportedCountries.add("CN");
        languageSupportedCountries.add("JP");
        languageSupportedCountries.add("BR");

        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals(COOKIE_NAME)) {
                    localeFromCookie = cookie.getValue();
                }
            }
        }
        // Set lang from the priority order
        if (localeFromCookie != null) {
            lang = localeFromCookie;
            try {
                String langStr = "en";
                String langLocale = "US";

                if (lang.contains("_")) {
                    langStr = lang.split("_")[0];
                    langLocale = lang.split("_")[1];
                } else if (lang.contains("-")) {
                    langStr = lang.split("-")[0];
                    langLocale = lang.split("-")[1];
                }

                userLocale = new Locale(langStr, langLocale);
            } catch (Exception e) {
                // In case the language is defined but not in the correct format
                userLocale = browserLocale;
            }
        } else if (uiLocaleFromURL != null) {
            for (String localeStr : uiLocaleFromURL.split(" ")) {
                String langStr = "en";
                String langLocale = "US";

                if (localeStr.contains("_")) {
                    langStr = localeStr.split("_")[0];
                    langLocale = localeStr.split("_")[1];
                } else if (localeStr.contains("-")) {
                    langStr = localeStr.split("-")[0];
                    langLocale = localeStr.split("-")[1];
                }

                Locale tempLocale = new Locale(langStr, langLocale);

                // Trying to find out whether we have a resource bundle for the given locale.
                try {
                    ResourceBundle foundBundle = ResourceBundle.getBundle(BUNDLE, tempLocale);
                    // If the i18n bundle for the locale is found, set the userLocale to that locale. If not, set the
                    // browser locale as user locale.
                    // Currently, we only care about the language - we do not compare about country locales since our
                    // supported locale set is limited.
                    if (tempLocale.getLanguage().equals(foundBundle.getLocale().getLanguage())) {
                        userLocale = tempLocale;
                        break;
                    } else if (tempLocale.getLanguage().equals("en") && foundBundle.getLocale().getLanguage().equals("")) {
                        // When the given locale is "en," which is our fallback one, we have to handle it separately
                        // because it returns an empty string as locale language
                        userLocale = tempLocale;
                        break;
                    } else {
                        userLocale = browserLocale;
                    }
                } catch (Exception e) {
                    userLocale = browserLocale;
                }
            }
        } else {
            // `browserLocale` is coming as `en` instead of `en_US` for the first render before switching the language from the dropdown.
            String countryCode = browserLocale.getCountry();
            String fallbackCountryCode = supportedLanguages.get(browserLocale.getLanguage());

            if (StringUtils.isNotBlank(countryCode) && languageSupportedCountries.contains(countryCode)) {
                userLocale = new Locale(browserLocale.getLanguage(), countryCode);
            } else if (StringUtils.isNotBlank(fallbackCountryCode)){
                userLocale = new Locale(browserLocale.getLanguage(), fallbackCountryCode);
            } else {
                userLocale = new Locale("en","US");
            }
        }
        return userLocale;
    }
    /**
    * Get the user's locale code in the "language-country" format based on the request, cookies, and URL parameters.
    *
    * This method determines the user's locale based on the getUserLocale method and returns the locale code
    * in the "language-country" format (e.g., "en-US").
    *
    * @param request The HTTP servlet request.
    * @return The user's locale code in the "language-country" format.
    */
    public String getUserLocaleCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getLanguage() + "-" + locale.getCountry();
    }
    /**
    * Get the user's language code based on the request, cookies, and URL parameters.
    *
    * This method determines the user's language code based on the getUserLocale method and returns
    * the language code (e.g., "en").
    *
    * @param request The HTTP servlet request.
    * @return The user's language code.
    */
    public String getUserLanguageCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getLanguage();
    }
    /**
    * Get the user's country code based on the request, cookies, and URL parameters.
    *
    * This method determines the user's country code based on the getUserLocale method and returns
    * the country code (e.g., "US").
    *
    * @param request The HTTP servlet request.
    * @return The user's country code.
    */
    public String getUserCountryCode(HttpServletRequest request) {
        Locale locale = getUserLocale(request);
        return locale.getCountry();
    }


    /**
    * Convert the application name by replacing spaces with underscores.
    *
    * This serves as a temporary solution for implementing a custom layout for applications with
    * names containing spaces. It is recommended to remove this workaround and implement a more
    * robust solution in the future.
    * Tracked by - https://github.com/wso2-enterprise/asgardeo-product/issues/19824
    *
    * @param applicationName Name of the application (Service Provider Name).
    * @return Converted application name.
    */
    public String convertApplicationName(String applicationName) {
        return StringUtils.replace(applicationName, " ", "_");
    }


    /**
     * Retrieve all county codes and country display names and
     * store into a map where key/value pair is defined as the
     * country code/country display name.
     *
     * @return {Map<string, string>}
     */
    private Map<String, String> getCountryList() {
        String[] countryCodes = Locale.getISOCountries();

        Map<String, String> mapCountries = new TreeMap<>();

        for (String countryCode : countryCodes) {
            Locale locale = new Locale("", countryCode);
            String country_code = locale.getCountry();
            String country_display_name = locale.getDisplayCountry();
            mapCountries.put(country_code, country_display_name);
        }

        return mapCountries;
    }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(8);
    _jspx_dependants.put("/tenant-resolve.jsp", Long.valueOf(1740062656000L));
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1739947982000L));
    _jspx_dependants.put("jar:file:/home/dheera/Research/ISWithCustAuthPatch/wso2is-7.1.0/repository/deployment/server/webapps/accountrecoveryendpoint/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425958870000L));
    _jspx_dependants.put("/includes/localize.jsp", Long.valueOf(1747321634000L));
    _jspx_dependants.put("/includes/branding-preferences.jsp", Long.valueOf(1747321634000L));
    _jspx_dependants.put("/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.4.34.jar", Long.valueOf(1739947872000L));
    _jspx_dependants.put("jar:file:/home/dheera/Research/ISWithCustAuthPatch/wso2is-7.1.0/repository/deployment/server/webapps/accountrecoveryendpoint/WEB-INF/lib/org.wso2.identity.apps.taglibs.layout.controller-1.4.34.jar!/META-INF/taglib.tld", Long.valueOf(1660634188000L));
    _jspx_dependants.put("/includes/layout-resolver.jsp", Long.valueOf(1740062656000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(76);
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClientException");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.OrganizationDiscoveryConfigDataRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ConfiguredAuthenticatorsRetrievalClientException");
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.URLBuilderException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.api.ReCaptchaApi");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.Constants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.ServiceURLBuilder");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointConstants");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.constants.SelfRegistrationStatusCodes");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.SelfRegistrationMgtClient");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.wso2.carbon.utils.multitenancy.MultitenantUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.captcha.util.CaptchaUtil");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ValidationConfigurationRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClientException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApiException");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.IdentityProviderDataRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.User");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementEndpointUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ApplicationDataRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.ReCaptchaProperties");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.SelfRegistrationMgtClientException");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("org.apache.commons.collections.CollectionUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.api.UsernameRecoveryApi");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.ConfiguredAuthenticatorsRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityTenantUtil");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.model.Claim");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.PreferenceRetrievalClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.BrandingPreferenceRetrievalClient");
    _jspx_imports_classes.add("org.apache.commons.collections.MapUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.IdentityManagementServiceUtil");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS_MSG");
    _jspx_imports_classes.add("org.apache.commons.text.StringEscapeUtils");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl");
    _jspx_imports_classes.add("org.wso2.carbon.identity.mgt.endpoint.util.client.OrganizationDiscoveryConfigDataRetrievalClientException");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.util.TreeMap");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityUtil");
    _jspx_imports_classes.add("java.io.BufferedReader");
    _jspx_imports_classes.add("java.io.FileReader");
    _jspx_imports_classes.add("org.json.JSONArray");
    _jspx_imports_classes.add("org.apache.commons.lang.ArrayUtils");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.release();
    _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String lang = "en_US"; // Default lang is en_US
    String COOKIE_NAME = "ui_lang";
    Locale browserLocale = request.getLocale();
    Locale userLocale = browserLocale;
    String uiLocaleFromURL = request.getParameter("ui_locales");
    String localeFromCookie = null;
    String BUNDLE = "org.wso2.carbon.identity.mgt.recovery.endpoint.i18n.Resources";

    // List of screen names for retrieving text branding customizations.
    List<String> screenNames = new ArrayList<>();
    screenNames.add("common");

    // Map to store default supported language codes.
    // TODO: Use this map to generate the `language-switcher.jsp`.
    Map<String, String> supportedLanguages = new HashMap<>();
    supportedLanguages.put("en", "US");
    supportedLanguages.put("fr", "FR");
    supportedLanguages.put("es", "ES");
    supportedLanguages.put("pt", "PT");
    supportedLanguages.put("de", "DE");
    supportedLanguages.put("zh", "CN");
    supportedLanguages.put("ja", "JP");

    List<String> languageSupportedCountries = new ArrayList<>();
    languageSupportedCountries.add("US");
    languageSupportedCountries.add("FR");
    languageSupportedCountries.add("ES");
    languageSupportedCountries.add("PT");
    languageSupportedCountries.add("DE");
    languageSupportedCountries.add("CN");
    languageSupportedCountries.add("JP");
    languageSupportedCountries.add("BR");

    // Check cookie for the user selected language first
    Cookie[] cookies = request.getCookies();
    if (cookies != null) {
        for (Cookie cookie : cookies) {
            if (cookie.getName().equals(COOKIE_NAME)) {
                localeFromCookie = cookie.getValue();
            }
        }
    }

    // Set lang from the priority order
    if (localeFromCookie != null) {
        lang = localeFromCookie;

        try {
            String langStr = "en";
            String langLocale = "US";

            if (lang.contains("_")) {
                langStr = lang.split("_")[0];
                langLocale = lang.split("_")[1];
            } else if (lang.contains("-")) {
                langStr = lang.split("-")[0];
                langLocale = lang.split("-")[1];
            }

            userLocale = new Locale(langStr, langLocale);
        } catch (Exception e) {
            // In case the language is defined but not in the correct format
            userLocale = browserLocale;
        }
    } else if (uiLocaleFromURL != null) {
        for (String localeStr : uiLocaleFromURL.split(" ")) {
            String langStr = "en";
            String langLocale = "US";

            if (localeStr.contains("_")) {
                langStr = localeStr.split("_")[0];
                langLocale = localeStr.split("_")[1];
            } else if (localeStr.contains("-")) {
                langStr = localeStr.split("-")[0];
                langLocale = localeStr.split("-")[1];
            }

            Locale tempLocale = new Locale(langStr, langLocale);

            // Trying to find out whether we have resource bundle for the given locale
            try {
                ResourceBundle foundBundle = ResourceBundle.getBundle(BUNDLE, tempLocale);

                // If so, setting the userLocale to that locale. If not, set the browser locale as user locale
                // Currently, we only care about the language - we do not compare about country locales since our
                // supported locale set is limited.
                if (tempLocale.getLanguage().equals(foundBundle.getLocale().getLanguage())) {
                    userLocale = tempLocale;
                    break;
                } else if (tempLocale.getLanguage().equals("en") && foundBundle.getLocale().getLanguage().equals("")) {
                    // When the given locale is en - which is our fallback one, we have to handle it separately because
                    // returns and empty string as locale language
                    userLocale = tempLocale;
                    break;
                } else {
                    userLocale = browserLocale;
                }
            } catch (Exception e) {
                userLocale = browserLocale;
            }
        }
    } else {
        // `browserLocale` is coming as `en` instead of `en_US` for the first render before switching the language from the dropdown.
        String countryCode = browserLocale.getCountry();
        String fallbackCountryCode = supportedLanguages.get(browserLocale.getLanguage());

        if (StringUtils.isNotBlank(countryCode) && languageSupportedCountries.contains(countryCode)) {
            userLocale = new Locale(browserLocale.getLanguage(), countryCode);
        } else if (StringUtils.isNotBlank(fallbackCountryCode)){
            userLocale = new Locale(browserLocale.getLanguage(), fallbackCountryCode);
        } else {
            userLocale = new Locale("en","US");
        }
    }

    ResourceBundle recoveryResourceBundle = ResourceBundle.getBundle(BUNDLE, userLocale, new
        EncodedControl(StandardCharsets.UTF_8.toString()));

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String tenantDomain;
    String tenantForTheming;
    String userTenant;
    String userTenantDomain;
    String spAppName = request.getParameter("sp");
    String spAppId = request.getParameter("spId");

    if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
        tenantDomain = IdentityTenantUtil.resolveTenantDomain();
        String tenantDomainFromURL = request.getParameter("t");
        if (IdentityManagementEndpointConstants.SUPER_TENANT.equals(tenantDomain) &&
                !StringUtils.isBlank(tenantDomainFromURL)) {
            tenantDomain = tenantDomainFromURL;
        }
        tenantForTheming = tenantDomain;
        userTenant = tenantDomain;
        String tenantDomainOfUser = request.getParameter("ut");
        userTenantDomain = tenantDomainOfUser;

        if (StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)
            && StringUtils.equals(spAppName, "Console")) {
            tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
        } else {
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomainFromURL;
            }
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomain;
            }
            if (StringUtils.isNotBlank(tenantDomainOfUser)) {
                tenantForTheming = tenantDomainOfUser;
            }
            if (StringUtils.equals(spAppName, "My Account")
                && StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {
                tenantForTheming = userTenantDomain;
                userTenant = userTenantDomain;
            }
        }
    } else {
        tenantDomain = request.getParameter("tenantDomain");
        String tenantDomainFromURL = request.getParameter("t");
        String tenantDomainOfUser = request.getParameter("ut");

        if (StringUtils.isBlank(tenantDomain)) {
            tenantDomain = request.getParameter(IdentityManagementEndpointConstants.TENANT_DOMAIN);
        }

        if (!StringUtils.isBlank(tenantDomainFromURL)) {
            tenantDomain = tenantDomainFromURL;
        }

        tenantForTheming = tenantDomain;
        userTenant = tenantDomain;
        userTenantDomain = tenantDomainOfUser;

        if (StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)
            && StringUtils.equals(spAppName, "Console")) {
            tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
        } else {
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomainFromURL;
            }
            if (StringUtils.isBlank(userTenantDomain)) {
                userTenantDomain = tenantDomain;
            }
            if (StringUtils.isNotBlank(tenantDomainOfUser)) {
                tenantForTheming = tenantDomainOfUser;
            }
            if (StringUtils.equals(spAppName, "My Account")
                && StringUtils.equals(tenantDomain, IdentityManagementEndpointConstants.SUPER_TENANT)) {
                tenantForTheming = userTenantDomain;
                userTenant = userTenantDomain;
            }
        }
    }

    // If `tenantDomain` is null, fallback to super tenant.
    if (StringUtils.isBlank(tenantDomain)) {
        tenantDomain = IdentityManagementEndpointConstants.SUPER_TENANT;
    }
    // If `tenantForTheming` is null, fallback to super tenant.
    if (StringUtils.isBlank(tenantForTheming)) {
        tenantForTheming = IdentityManagementEndpointConstants.SUPER_TENANT;
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');

    // Add the sign-up screen to the list to retrieve text branding customizations.
    screenNames.add("sign-up");

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');
      out.write('\n');

    JSONObject brandingPreference = null;
    JSONObject customText = new JSONObject();

    boolean isBrandingEnabledInTenantPreferences = true;
    boolean isSelfSignUpEnabledInTenantPreferences = true;
    boolean isPasswordRecoveryEnabledInTenantPreferences = true;
    boolean shouldRemoveDefaultBranding = true;
    @Deprecated
    JSONObject colors = null;
    JSONObject theme = null;
    String activeThemeName = "";
    String overrideStylesheet = "";
    @Deprecated
    String __DEPRECATED__copyrightText = "";
    @Deprecated
    String __DEPRECATED__siteTitle = "";
    String supportEmail = "contact@wso2.com";
    String logoURL = "";
    String logoAlt = "";
    String faviconURL = "libs/themes/wso2is/assets/images/branding/favicon.ico";
    String privacyPolicyURL = "/authenticationendpoint/privacy_policy.do";
    String termsOfUseURL = "";
    String cookiePolicyURL = "/authenticationendpoint/cookie_policy.do";
    String selfSignUpOverrideURL = "";
    String passwordRecoveryOverrideURL = "";
    String layout = "centered";
    String layoutFileRelativePath = "includes/layouts/" + layout + "/body.ser";
    String layoutStoreURL = "extensions/layouts/custom/${tenantDomain}";
    Map<String, Object> layoutData = new HashMap<String, Object>();
    String productName = "WSO2 Identity Server";
    String productURL = "https://wso2.com/identity-server";
    String productLogoURL = "libs/themes/wso2is/assets/images/branding/logo-full.svg";
    String productLogoAlt = "WSO2 Identity Server Logo";
    String productWhiteLogoURL = "libs/themes/wso2is/assets/images/branding/logo-full-inverted.svg";
    String productWhiteLogoAlt = "WSO2 Identity Server Logo White Variation";
    String poweredByLogoURL = "";

    final String BRANDING_PREFERENCE_CACHE_KEY = "BrandingPreferenceCache";
    final String BRANDING_TEXT_PREFERENCE_CACHE_KEY = "BrandingTextPreferenceCache";

    // Constants used to create full custom layout name
    String PREFIX_FOR_CUSTOM_LAYOUT_NAME = "custom";
    String CUSTOM_LAYOUT_NAME_SEPERATOR = "-";

    // Preferences response object pointer keys.
    String PREFERENCE_KEY = "preference";
    String ACTIVE_THEME_KEY = "activeTheme";
    String COLORS_KEY = "colors";
    String THEME_KEY = "theme";
    String STYLESHEETS_KEY = "stylesheets";
    String ACCOUNT_APP_STYLESHEET_KEY = "accountApp";
    String ORG_DETAILS_KEY = "organizationDetails";
    String COPYRIGHT_TEXT_KEY = "copyrightText";
    String SITE_TITLE_KEY = "siteTitle";
    String SUPPORT_EMAIL_KEY = "supportEmail";
    String IMAGES_KEY = "images";
    String IMAGE_URL_KEY = "imgURL";
    String ALT_TEXT_KEY = "altText";
    String LOGO_KEY = "logo";
    String FAVICON_KEY = "favicon";
    String URLS_KEY = "urls";
    String PRIVACY_POLICY_URL_KEY = "privacyPolicyURL";
    String TERMS_OF_USE_URL_KEY = "termsOfUseURL";
    String COOKIE_POLICY_URL_KEY = "cookiePolicyURL";
    String SELF_SIGN_UP_URL_KEY = "selfSignUpURL";
    String PASSWORD_RECOVERY_URL_KEY = "passwordRecoveryURL";
    String CONFIGS_KEY = "configs";
    String IS_BRANDING_ENABLED_KEY= "isBrandingEnabled";
    String IS_SELF_SIGN_UP_ENABLED_KEY = "isSelfSignUpEnabled";
    String IS_PASSWORD_RECOVERY_ENABLED_KEY = "isPasswordRecoveryEnabled";
    String SHOULD_REMOVE_ASGARDEO_BRANDING_KEY = "removeAsgardeoBranding";
    String SHOULD_REMOVE_DEFAULT_BRANDING_KEY = "removeDefaultBranding";
    String TEXT_KEY = "text";

    // Additional keys to override the fallback values.
    String PRODUCT_NAME_KEY = "productName";
    String PRODUCT_URL_KEY = "productURL";
    String PRODUCT_LOGO_URL_KEY = "productLogoURL";
    String PRODUCT_LOGO_ALT_KEY = "productLogoAlt";
    String PRODUCT_WHITE_LOGO_URL_KEY = "productWhiteLogoURL";
    String PRODUCT_WHITE_LOGO_ALT_KEY = "productWhiteLogoAlt";

    // Load the branding fallback override values file if it exists.
    if (config.getServletContext().getResource("extensions/branding-fallbacks.jsp") != null) {

      out.write("\n");
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/extensions/branding-fallbacks.jsp", out, false);
      out.write('\n');
      out.write('\n');

    }

    /*
        The override values are set within the request object using a Map object.
        This approach is necessary because 'branding-fallbacks.jsp' may not always exist.
        Consequently, a directive include cannot be employed; rather, an action include must be utilized.
        It ensures that the override values are accessible to this JSP page through the request object.
    */
    Map<String, Object> overrideFallbackValues = (Map<String, Object>) request.getAttribute("overrideFallbackValues");

    // Override the branding fallback values
    if (overrideFallbackValues != null) {
        // Configs
        if (overrideFallbackValues.containsKey(IS_BRANDING_ENABLED_KEY)) {
            isBrandingEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_BRANDING_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(IS_SELF_SIGN_UP_ENABLED_KEY)) {
            isSelfSignUpEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_SELF_SIGN_UP_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(IS_PASSWORD_RECOVERY_ENABLED_KEY)) {
            isPasswordRecoveryEnabledInTenantPreferences = (boolean) overrideFallbackValues.get(IS_PASSWORD_RECOVERY_ENABLED_KEY);
        }

        if (overrideFallbackValues.containsKey(SHOULD_REMOVE_DEFAULT_BRANDING_KEY)) {
            shouldRemoveDefaultBranding = (boolean) overrideFallbackValues.get(SHOULD_REMOVE_DEFAULT_BRANDING_KEY);
        }

        // Colors.
        // @deprecated Moved in to `theme` object. Kept here for backward compatibility.
        if (overrideFallbackValues.containsKey(COLORS_KEY)) {
            colors = (JSONObject) overrideFallbackValues.get(COLORS_KEY);
        }

        // Theme
        if (overrideFallbackValues.containsKey(THEME_KEY)) {
            theme = (JSONObject) overrideFallbackValues.get(THEME_KEY);
        }

        if (overrideFallbackValues.containsKey(ACTIVE_THEME_KEY)) {
            activeThemeName = (String) overrideFallbackValues.get(ACTIVE_THEME_KEY);
        }

        // Product details
        if (overrideFallbackValues.containsKey(PRODUCT_NAME_KEY)) {
            productName = (String) overrideFallbackValues.get(PRODUCT_NAME_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_URL_KEY)) {
            productURL = (String) overrideFallbackValues.get(PRODUCT_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_LOGO_URL_KEY)) {
            productLogoURL = (String) overrideFallbackValues.get(PRODUCT_LOGO_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_LOGO_ALT_KEY)) {
            productLogoAlt = (String) overrideFallbackValues.get(PRODUCT_LOGO_ALT_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_WHITE_LOGO_URL_KEY)) {
            productWhiteLogoURL = (String) overrideFallbackValues.get(PRODUCT_WHITE_LOGO_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PRODUCT_WHITE_LOGO_ALT_KEY)) {
            productWhiteLogoAlt = (String) overrideFallbackValues.get(PRODUCT_WHITE_LOGO_ALT_KEY);
        }

        // Stylesheets
        if (overrideFallbackValues.containsKey(ACCOUNT_APP_STYLESHEET_KEY)) {
            overrideStylesheet = (String) overrideFallbackValues.get(ACCOUNT_APP_STYLESHEET_KEY);
        }

        // Organization Details
        if (overrideFallbackValues.containsKey(COPYRIGHT_TEXT_KEY)) {
            __DEPRECATED__copyrightText = (String) overrideFallbackValues.get(COPYRIGHT_TEXT_KEY);
        }

        if (overrideFallbackValues.containsKey(SITE_TITLE_KEY)) {
            __DEPRECATED__siteTitle = (String) overrideFallbackValues.get(SITE_TITLE_KEY);
        }

        if (overrideFallbackValues.containsKey(SUPPORT_EMAIL_KEY)) {
            supportEmail = (String) overrideFallbackValues.get(SUPPORT_EMAIL_KEY);
        }

        // Images
        if (overrideFallbackValues.containsKey(FAVICON_KEY)) {
            faviconURL = (String) overrideFallbackValues.get(FAVICON_KEY);
        }

        // Links
        if (overrideFallbackValues.containsKey(PRIVACY_POLICY_URL_KEY)) {
            privacyPolicyURL = (String) overrideFallbackValues.get(PRIVACY_POLICY_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(TERMS_OF_USE_URL_KEY)) {
            termsOfUseURL = (String) overrideFallbackValues.get(TERMS_OF_USE_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(COOKIE_POLICY_URL_KEY)) {
            cookiePolicyURL = (String) overrideFallbackValues.get(COOKIE_POLICY_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(SELF_SIGN_UP_URL_KEY)) {
            selfSignUpOverrideURL = (String) overrideFallbackValues.get(SELF_SIGN_UP_URL_KEY);
        }

        if (overrideFallbackValues.containsKey(PASSWORD_RECOVERY_URL_KEY)) {
            passwordRecoveryOverrideURL = (String) overrideFallbackValues.get(PASSWORD_RECOVERY_URL_KEY);
        }
    }

    String DEFAULT_RESOURCE_LOCALE = "en-US";
    String ORG_PREFERENCE_RESOURCE_TYPE = "ORG";
    String APP_PREFERENCE_RESOURCE_TYPE = "APP";
    String RESOURCE_TYPE = "type";
    String preferenceResourceType = ORG_PREFERENCE_RESOURCE_TYPE;
    String tenantRequestingPreferences = tenantForTheming;
    String applicationRequestingPreferences = spAppId;
    String locale = StringUtils.isNotBlank(getUserLocaleCode(request)) ? getUserLocaleCode(request) : DEFAULT_RESOURCE_LOCALE;

    try {

        // If the `sp` param is defined, set the resource type as app.
        if (StringUtils.isNotBlank(applicationRequestingPreferences)) {
            preferenceResourceType = APP_PREFERENCE_RESOURCE_TYPE;
        }

        BrandingPreferenceRetrievalClient brandingPreferenceRetrievalClient = new BrandingPreferenceRetrievalClient();
        JSONObject brandingPreferenceResponse = null;
        Object cachedBrandingPreferenceResponse = request.getAttribute(BRANDING_PREFERENCE_CACHE_KEY);
        if (cachedBrandingPreferenceResponse != null && cachedBrandingPreferenceResponse instanceof BrandingPreferenceRetrievalClientException) {
            throw (BrandingPreferenceRetrievalClientException) cachedBrandingPreferenceResponse;
        } else {
            brandingPreferenceResponse = (JSONObject) cachedBrandingPreferenceResponse;
        }
        if (brandingPreferenceResponse == null) {
            brandingPreferenceResponse = brandingPreferenceRetrievalClient.getPreference(tenantRequestingPreferences,
                preferenceResourceType, applicationRequestingPreferences, DEFAULT_RESOURCE_LOCALE);
            request.setAttribute(BRANDING_PREFERENCE_CACHE_KEY, brandingPreferenceResponse);
        }

        if (brandingPreferenceResponse.has(PREFERENCE_KEY)) {
            brandingPreference = brandingPreferenceResponse.getJSONObject(PREFERENCE_KEY);
            preferenceResourceType = brandingPreferenceResponse.getString(RESOURCE_TYPE);
        }


      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');


    // Get the layout store url from the configuration file
    String tempLayoutStoreURL = application.getInitParameter("LayoutStoreURL");
    if (!StringUtils.equals(tenantRequestingPreferences, IdentityManagementEndpointConstants.SUPER_TENANT) && !StringUtils.isBlank(tempLayoutStoreURL)) {
        layoutStoreURL = tempLayoutStoreURL;
    }

    // Common data for the layout file.
    layoutData.put("BASE_URL", "includes/layouts/" + layout);

    if (brandingPreference != null) {
        // First, check if Branding is enabled.
        if (brandingPreference.has(CONFIGS_KEY)) {
            if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_BRANDING_ENABLED_KEY)) {
                isBrandingEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_BRANDING_ENABLED_KEY);
            }
        }

        // Proceed only if the branding is enabled.
        if (isBrandingEnabledInTenantPreferences) {
            // Keys.
            String LAYOUT_KEY = "layout";
            String ACTIVE_LAYOUT_KEY = "activeLayout";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY = "sideImg";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY = "imgURL";
            String LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY = "altText";
            String LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY = "productTagLine";

            // Layout names.
            String LEFT_IMAGE_LAYOUT_NAME = "left-image";
            String RIGHT_IMAGE_LAYOUT_NAME = "right-image";
            String LEFT_ALIGNED_LAYOUT_NAME = "left-aligned";
            String RIGHT_ALIGNED_LAYOUT_NAME = "right-aligned";

            // Keys for the layout data hash map.
            String SIDE_IMAGE_URL_KEY = "sideImgUrl";
            String SIDE_IMAGE_ALT_KEY = "sideImgAltText";
            String PRODUCT_TAG_LINE_KEY = "productTagLine";

            // Layout resolving logic.
            if (brandingPreference.has(LAYOUT_KEY)) {
                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(ACTIVE_LAYOUT_KEY)) {
                    if (!StringUtils.isBlank(brandingPreference.getJSONObject(LAYOUT_KEY).getString(ACTIVE_LAYOUT_KEY))){
                        String temp = brandingPreference.getJSONObject(LAYOUT_KEY).getString(ACTIVE_LAYOUT_KEY);
                        if (StringUtils.equals(temp, PREFIX_FOR_CUSTOM_LAYOUT_NAME)) {
                            // App-wise and tenant-wise custom layout resolving logic.
                            if (StringUtils.equals(preferenceResourceType, APP_PREFERENCE_RESOURCE_TYPE)) {
                                layout = temp + CUSTOM_LAYOUT_NAME_SEPERATOR + tenantRequestingPreferences + CUSTOM_LAYOUT_NAME_SEPERATOR + convertApplicationName(applicationRequestingPreferences);
                                layoutFileRelativePath = layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/apps/" + convertApplicationName(applicationRequestingPreferences) + "/body.ser";
                                layoutData.put("BASE_URL", layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/apps/" + convertApplicationName(applicationRequestingPreferences));
                            } else if (StringUtils.equals(preferenceResourceType, ORG_PREFERENCE_RESOURCE_TYPE)) {
                                layout = temp + CUSTOM_LAYOUT_NAME_SEPERATOR + tenantRequestingPreferences;
                                layoutFileRelativePath = layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences) + "/body.ser";
                                layoutData.put("BASE_URL", layoutStoreURL.replace("${tenantDomain}", tenantRequestingPreferences));
                            }
                        } else {
                            // Pre-added layouts
                            String layoutFilePath = "includes/layouts/" + temp + "/body.ser";
                            if (config.getServletContext().getResource(layoutFilePath) != null) {
                                layout = temp;
                                layoutFileRelativePath = layoutFilePath;
                                layoutData.put("BASE_URL", "includes/layouts/" + temp);

                                // Get the related data to specific layouts.
                                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY)) {
                                    if (brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY)) {
                                        layoutData.put(SIDE_IMAGE_URL_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).getString(LAYOUT_ATTRIBUTE_SIDE_IMAGE_URL_KEY));
                                    }
                                    if (brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).has(LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY)) {
                                        layoutData.put(SIDE_IMAGE_ALT_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getJSONObject(LAYOUT_ATTRIBUTE_SIDE_IMAGE_KEY).getString(LAYOUT_ATTRIBUTE_SIDE_IMAGE_ALT_KEY));
                                    }
                                }
                                if (brandingPreference.getJSONObject(LAYOUT_KEY).has(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY)) {
                                    if (!StringUtils.isBlank(brandingPreference.getJSONObject(LAYOUT_KEY).getString(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY))) {
                                        layoutData.put(PRODUCT_TAG_LINE_KEY, brandingPreference.getJSONObject(LAYOUT_KEY).getString(LAYOUT_ATTRIBUTE_PRODUCT_TAG_LINE_KEY));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');


        // Proceed only if `preferences` object is defined.
        if (brandingPreference != null) {
            // First, check if Branding is enabled.
            if (brandingPreference.has(CONFIGS_KEY)) {
                if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_BRANDING_ENABLED_KEY)) {
                    isBrandingEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_BRANDING_ENABLED_KEY);
                }
            }

            // Proceed only if the branding is enabled.
            if (isBrandingEnabledInTenantPreferences) {
                // Custom Text
                for (String screenName : screenNames) {
                    StringBuilder textBrandingCacheKey = new StringBuilder(BRANDING_TEXT_PREFERENCE_CACHE_KEY);
                    textBrandingCacheKey.append("-");
                    textBrandingCacheKey.append(screenName);
                    JSONObject customTextPreferenceResponse = (JSONObject) request.getAttribute(textBrandingCacheKey.toString());
                    if (customTextPreferenceResponse == null) {
                        customTextPreferenceResponse = brandingPreferenceRetrievalClient.getCustomTextPreference(
                            tenantRequestingPreferences,
                            preferenceResourceType,
                            applicationRequestingPreferences,
                            screenName,
                            locale
                        );
                        request.setAttribute(textBrandingCacheKey.toString(), customTextPreferenceResponse);
                    }

                    // Merge the preferences for the current screen into the customText object
                    if (customTextPreferenceResponse.has(PREFERENCE_KEY)) {
                        if (customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY) != null && customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).has(TEXT_KEY)) {
                            if (customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY) != null) {
                                for (Object keyObj : customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY).keySet()) {
                                    String key = (String) keyObj;
                                    customText.put(key, customTextPreferenceResponse.getJSONObject(PREFERENCE_KEY).getJSONObject(TEXT_KEY).getString(key));
                                }
                            }
                        }
                    }
                }

                // Configs
                if (brandingPreference.has(CONFIGS_KEY)) {
                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_SELF_SIGN_UP_ENABLED_KEY)) {
                        isSelfSignUpEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_SELF_SIGN_UP_ENABLED_KEY);
                    }

                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(IS_PASSWORD_RECOVERY_ENABLED_KEY)) {
                        isPasswordRecoveryEnabledInTenantPreferences = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(IS_PASSWORD_RECOVERY_ENABLED_KEY);
                    }

                    // @deprecated Renamed to `removeDefaultBranding` key. Kept here for backward compatibility.
                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(SHOULD_REMOVE_ASGARDEO_BRANDING_KEY)) {
                        shouldRemoveDefaultBranding = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(SHOULD_REMOVE_ASGARDEO_BRANDING_KEY);
                    }

                    if (brandingPreference.getJSONObject(CONFIGS_KEY).has(SHOULD_REMOVE_DEFAULT_BRANDING_KEY)) {
                        shouldRemoveDefaultBranding = brandingPreference.getJSONObject(CONFIGS_KEY).getBoolean(SHOULD_REMOVE_DEFAULT_BRANDING_KEY);
                    }
                }

                // Colors.
                // @deprecated Moved in to `theme` object. Kept here for backward compatibility.
                if (brandingPreference.has(COLORS_KEY)) {
                    colors = brandingPreference.getJSONObject(COLORS_KEY);
                }

                // Theme
                if (brandingPreference.has(THEME_KEY)) {
                    if (brandingPreference.getJSONObject(THEME_KEY).has(ACTIVE_THEME_KEY)) {
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(THEME_KEY).getString(ACTIVE_THEME_KEY))) {
                            activeThemeName = brandingPreference.getJSONObject(THEME_KEY).getString(ACTIVE_THEME_KEY);

                            if (brandingPreference.getJSONObject(THEME_KEY).has(activeThemeName)
                                && brandingPreference.getJSONObject(THEME_KEY).getJSONObject(activeThemeName) != null) {

                                theme = brandingPreference.getJSONObject(THEME_KEY).getJSONObject(activeThemeName);

                                if (theme.has(IMAGES_KEY) && theme.getJSONObject(IMAGES_KEY) != null) {
                                    if (theme.getJSONObject(IMAGES_KEY).has(LOGO_KEY) && theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY) != null) {
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(IMAGE_URL_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY))) {

                                            logoURL = theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY);
                                        }
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(ALT_TEXT_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY))) {

                                            logoAlt = theme.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY);
                                        }
                                    }
                                    if (theme.getJSONObject(IMAGES_KEY).has(FAVICON_KEY) && theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY) != null) {
                                        if (theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).has(IMAGE_URL_KEY)
                                            && !StringUtils.isBlank(theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY))) {

                                            faviconURL = theme.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                // Stylesheets
                if (brandingPreference.has(STYLESHEETS_KEY)) {
                    if (brandingPreference.getJSONObject(STYLESHEETS_KEY).has(ACCOUNT_APP_STYLESHEET_KEY)) {
                        // Only assign the `stylesheet` from response if not empty.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(STYLESHEETS_KEY).getString(ACCOUNT_APP_STYLESHEET_KEY))) {
                            overrideStylesheet = brandingPreference.getJSONObject(STYLESHEETS_KEY).getString(ACCOUNT_APP_STYLESHEET_KEY);
                        }
                    }
                }

                // Organization Details
                if (brandingPreference.has(ORG_DETAILS_KEY)) {
                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(COPYRIGHT_TEXT_KEY)) {
                        // Only assign the `copyright` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(COPYRIGHT_TEXT_KEY))) {
                            __DEPRECATED__copyrightText = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(COPYRIGHT_TEXT_KEY);
                        }
                    }

                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(SITE_TITLE_KEY)) {
                        // Only assign the `siteTitle` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SITE_TITLE_KEY))) {
                            __DEPRECATED__siteTitle = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SITE_TITLE_KEY);
                        }
                    }

                    if (brandingPreference.getJSONObject(ORG_DETAILS_KEY).has(SUPPORT_EMAIL_KEY)) {
                        // Only assign the `supportEmail` from response if not empty. Else use the default value.
                        if (!StringUtils.isBlank(brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SUPPORT_EMAIL_KEY))) {
                            supportEmail = brandingPreference.getJSONObject(ORG_DETAILS_KEY).getString(SUPPORT_EMAIL_KEY);
                        }
                    }
                }

                // Images
                if (brandingPreference.has(IMAGES_KEY)) {
                    if (brandingPreference.getJSONObject(IMAGES_KEY).has(LOGO_KEY)) {
                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(IMAGE_URL_KEY)) {
                            // Only assign the `logoURL` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY))) {
                                logoURL = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(IMAGE_URL_KEY);
                            }
                        }

                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).has(ALT_TEXT_KEY)) {
                            // Only assign the `logoAlt` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY))) {
                                logoAlt = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(LOGO_KEY).getString(ALT_TEXT_KEY);
                            }
                        }
                    }

                    if (brandingPreference.getJSONObject(IMAGES_KEY).has(FAVICON_KEY)) {
                        if (brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).has(IMAGE_URL_KEY)) {
                            // Only assign the `faviconURL` from response if not empty. Else use the default value.
                            if (!StringUtils.isBlank(brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY))) {
                                faviconURL = brandingPreference.getJSONObject(IMAGES_KEY).getJSONObject(FAVICON_KEY).getString(IMAGE_URL_KEY);
                            }
                        }
                    }
                }

                // Links
                if (brandingPreference.has(URLS_KEY)) {
                    if (brandingPreference.getJSONObject(URLS_KEY).has(PRIVACY_POLICY_URL_KEY)) {
                        // Only assign the `privacyPolicyURL` from response if not empty. Else use the default value.
                        String privacyPolicyURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(PRIVACY_POLICY_URL_KEY);
                        if (!StringUtils.isBlank(privacyPolicyURLInput) && !privacyPolicyURLInput.toLowerCase().contains("javascript:") &&
                            !privacyPolicyURLInput.toLowerCase().contains("data:")) {
                                privacyPolicyURL = privacyPolicyURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(TERMS_OF_USE_URL_KEY)) {
                        // Only assign the `termsOfUseURL` from response if not empty. Else use the default value.
                        String termsOfUseURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(TERMS_OF_USE_URL_KEY);
                        if (!StringUtils.isBlank(termsOfUseURLInput) && !termsOfUseURLInput.toLowerCase().contains("javascript:") &&
                            !termsOfUseURLInput.toLowerCase().contains("data:")) {
                                termsOfUseURL = termsOfUseURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(COOKIE_POLICY_URL_KEY)) {
                        // Only assign the `cookiePolicyURL` from response if not empty. Else use the default value.
                        String cookiePolicyURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(COOKIE_POLICY_URL_KEY);
                        if (!StringUtils.isBlank(cookiePolicyURLInput) && !cookiePolicyURLInput.toLowerCase().contains("javascript:") &&
                            !cookiePolicyURLInput.toLowerCase().contains("data:")) {
                                cookiePolicyURL = cookiePolicyURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(SELF_SIGN_UP_URL_KEY)) {
                        String selfSignUpURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(SELF_SIGN_UP_URL_KEY);
                        if (!StringUtils.isBlank(selfSignUpURLInput) && !selfSignUpURLInput.toLowerCase().contains("javascript:") &&
                            !selfSignUpURLInput.toLowerCase().contains("data:")) {
                            selfSignUpOverrideURL = selfSignUpURLInput;
                        }
                    }

                    if (brandingPreference.getJSONObject(URLS_KEY).has(PASSWORD_RECOVERY_URL_KEY)) {
                        String passwordRecoveryURLInput = brandingPreference.getJSONObject(URLS_KEY).getString(PASSWORD_RECOVERY_URL_KEY);
                        if (!StringUtils.isBlank(passwordRecoveryURLInput) && !passwordRecoveryURLInput.toLowerCase().contains("javascript:") &&
                            !passwordRecoveryURLInput.toLowerCase().contains("data:")) {
                            passwordRecoveryOverrideURL = passwordRecoveryURLInput;
                        }
                    }
                }
            }
        }

    } catch (BrandingPreferenceRetrievalClientException e) {
        // Exception is ignored and the variable will use the fallbacks.
        // TODO: Move the duplicated logic to a common place.
        request.setAttribute(BRANDING_PREFERENCE_CACHE_KEY, e);
    } finally {

        // Set fallbacks.
        if (StringUtils.isEmpty(logoURL)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                logoURL = productLogoURL;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                logoURL = productWhiteLogoURL;
            } else {
                logoURL = productLogoURL;
            }
        }

        // Set powered by logo URL.
        if (StringUtils.isEmpty(poweredByLogoURL)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                poweredByLogoURL = productLogoURL;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                poweredByLogoURL = productWhiteLogoURL;
            } else {
                poweredByLogoURL = productLogoURL;
            }
        }

        if (StringUtils.isEmpty(logoAlt)) {
            if (StringUtils.isEmpty(activeThemeName)) {
                logoAlt = productLogoAlt;
            } else if (StringUtils.equalsIgnoreCase(activeThemeName, "DARK")) {
                logoAlt = productWhiteLogoAlt;
            } else {
                logoAlt = productLogoAlt;
            }
        }
    }

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

    layoutData.put("isSelfRegistrationUsernameRequestPage", true);

      out.write('\n');
      out.write('\n');

    String BASIC_AUTHENTICATOR = "BasicAuthenticator";
    String OPEN_ID_AUTHENTICATOR = "OpenIDAuthenticator";
    String GOOGLE_AUTHENTICATOR = "GoogleOIDCAuthenticator";
    String GITHUB_AUTHENTICATOR = "GithubAuthenticator";
    String FACEBOOK_AUTHENTICATOR = "FacebookAuthenticator";
    String OIDC_AUTHENTICATOR = "OpenIDConnectAuthenticator";
    String SSO_AUTHENTICATOR = "OrganizationAuthenticator";
    String SSO_AUTHENTICATOR_NAME = "SSO";
    String commonauthURL = "../commonauth";

    boolean error = IdentityManagementEndpointUtil.getBooleanValue(request.getAttribute("error"));
    boolean isSaaSApp = Boolean.parseBoolean(request.getParameter("isSaaSApp"));
    boolean skipSignUpEnableCheck = Boolean.parseBoolean(request.getParameter("skipsignupenablecheck"));
    boolean allowchangeusername = Boolean.parseBoolean(request.getParameter("allowchangeusername"));
    boolean isPasswordProvisionEnabled = Boolean.parseBoolean(request.getParameter("passwordProvisionEnabled"));
    boolean piisConfigured = false;
    PreferenceRetrievalClient preferenceRetrievalClient = new PreferenceRetrievalClient();
    boolean isSelfRegistrationLockOnCreationEnabled = preferenceRetrievalClient.checkSelfRegistrationLockOnCreation(tenantDomain);
    String callback = Encode.forHtmlAttribute(request.getParameter("callback"));
    String backToUrl = callback;
    String sp = Encode.forHtmlAttribute(request.getParameter("sp"));
    String previousStep = Encode.forHtmlAttribute(request.getParameter("previous_step"));
    String username = request.getParameter("username");
    String password = request.getParameter("password");
    String emailValue = request.getParameter("http://wso2.org/claims/emailaddress");
    String errorCode = null;
    String spId = "";
    String errorCodeFromRequest = IdentityManagementEndpointUtil.getStringValue(request.getAttribute("errorCode"));
    String errorMsg = IdentityManagementEndpointUtil.getStringValue(request.getAttribute("errorMsg"));
    String consentPurposeGroupName = "SELF-SIGNUP";
    String consentPurposeGroupType = "SYSTEM";
    boolean isEmailUsernameEnabled = MultitenantUtils.isEmailUserName();
    boolean hideUsernameFieldWhenEmailAsUsernameIsEnabled = Boolean.parseBoolean(config.getServletContext().getInitParameter(
        "HideUsernameWhenEmailAsUsernameEnabled"));
    OrganizationDiscoveryConfigDataRetrievalClient orgDiscoveryConfigRetrievalClient = new OrganizationDiscoveryConfigDataRetrievalClient();
    Map<String, String> discoveryConfig;
    String discoveredUsername = request.getParameter("discoveredUsername");

    String[] missingClaimList = new String[0];
    String[] missingClaimDisplayName = new String[0];
    Integer defaultPurposeCatId = null;

    Object errorCodeObj = request.getAttribute("errorCode");
    Object errorMsgObj = request.getAttribute("errorMsg");
    JSONObject usernameValidityResponse;

    Map<String, Claim> uniquePIIs = null;

    SelfRegistrationMgtClient selfRegistrationMgtClient = new SelfRegistrationMgtClient();
    User user = IdentityManagementServiceUtil.getInstance().resolveUser(username, tenantDomain, isSaaSApp);
    boolean isUsernameValidationEnabled = Boolean.parseBoolean(IdentityUtil.getProperty("InputValidation.Username.Enabled"));
    ApplicationDataRetrievalClient applicationDataRetrievalClient = new ApplicationDataRetrievalClient();
    try {
        // Retrieve application Id.
        spId = applicationDataRetrievalClient.getApplicationID(tenantDomain,sp);
    } catch (Exception e) {
        // Nothing happens.
    }

    // Get validation configuration.
    ValidationConfigurationRetrievalClient validationConfigurationRetrievalClient = new ValidationConfigurationRetrievalClient();
    JSONObject passwordConfig = null;
    JSONObject usernameConfig = null;
    try {
        passwordConfig = validationConfigurationRetrievalClient.getPasswordConfiguration(tenantDomain);
        usernameConfig = validationConfigurationRetrievalClient.getUsernameConfiguration(tenantDomain);
    } catch (Exception e) {
        passwordConfig = null;
        usernameConfig = null;
    }

    // Get authenticators configured for an application.
    JSONArray configuredAuthenticators = null;
    if (!StringUtils.equalsIgnoreCase(spId,"")) {
        try {
            ConfiguredAuthenticatorsRetrievalClient configuredAuthenticatorsRetrievalClient = new ConfiguredAuthenticatorsRetrievalClient();
            configuredAuthenticators = configuredAuthenticatorsRetrievalClient.getConfiguredAuthenticators(spId, tenantDomain);
        } catch (Exception e) {
            configuredAuthenticators = null;
        }
    }

    String identityServerEndpointContextParam = IdentityUtil.getServerURL("/", true, true);
    if (!StringUtils.equals(tenantDomain, "carbon.super")) {
        identityServerEndpointContextParam = ServiceURLBuilder.create().setTenant(tenantDomain).build()
                .getAbsolutePublicURL();
    }
    commonauthURL = identityServerEndpointContextParam + "/commonauth";

    String multiOptionURIParam = "";
    String baseURL;
    try {
        baseURL = ServiceURLBuilder.create().addPath(request.getRequestURI()).build().getRelativePublicURL();
    } catch (URLBuilderException e) {
        request.setAttribute(STATUS, AuthenticationEndpointUtil.i18n(recoveryResourceBundle, "internal.error.occurred"));
        request.setAttribute(STATUS_MSG, AuthenticationEndpointUtil.i18n(recoveryResourceBundle, "error.when.processing.authentication.request"));
        request.getRequestDispatcher("error.do").forward(request, response);
        return;
    }

    String queryParamString = request.getQueryString() != null ? ("?" + request.getQueryString()) : "";
    multiOptionURIParam = "&multiOptionURI=" + Encode.forUriComponent(baseURL + queryParamString);

    boolean isLocal = false;
    boolean isFederated = false;
    boolean isBasic = false;
    boolean isSSOLoginAuthenticatorConfigured = false;
    boolean emailDomainDiscoveryEnabled = false;
    boolean emailDomainBasedSelfSignupEnabled = false;
    // Enable basic account creation flow if there are no authenticators configured.
    if (configuredAuthenticators == null) {
        isBasic = true;
    }

    JSONArray localAuthenticators = new JSONArray();
    JSONArray federatedAuthenticators = new JSONArray();

    try {
        discoveryConfig = orgDiscoveryConfigRetrievalClient.getDiscoveryConfiguration(tenantDomain);
    } catch (OrganizationDiscoveryConfigDataRetrievalClientException e) {
        discoveryConfig = null;
    }

    if (discoveryConfig != null) {
        emailDomainDiscoveryEnabled = Boolean.parseBoolean(discoveryConfig.get("emailDomain.enable"));
        emailDomainBasedSelfSignupEnabled = Boolean.parseBoolean(discoveryConfig.get("emailDomainBasedSelfSignup.enable"));
    }

    if (configuredAuthenticators != null) {
        for ( int index = 0; index < configuredAuthenticators.length(); index++) {
            JSONObject step = (JSONObject)configuredAuthenticators.get(index);
            int stepId = (int)step.get("stepId");
            if (stepId == 1 || stepId == 2) {
                JSONArray tempLocalAuthenticators = (JSONArray)step.get("localAuthenticators");
                for (int i = 0; i < tempLocalAuthenticators.length(); i++) {
                    JSONObject localAuth = (JSONObject)tempLocalAuthenticators.get(i);
                    localAuthenticators.put(localAuth);
                    // check basic authenticator
                    if (StringUtils.equalsIgnoreCase(BASIC_AUTHENTICATOR, (String)localAuth.get("type"))) {
                        isLocal = true;
                    }
                }
            }
            if (stepId == 1) {
                federatedAuthenticators = (JSONArray)step.get("federatedAuthenticators");

                    for (int i = 0; i < federatedAuthenticators.length(); i++) {
                        JSONObject jsonObject = federatedAuthenticators.getJSONObject(i);
                        if (SSO_AUTHENTICATOR.equals(jsonObject.getString("type"))) {
                            if (!emailDomainBasedSelfSignupEnabled) {
                                federatedAuthenticators.remove(i);
                            } else {
                                isSSOLoginAuthenticatorConfigured = true;
                            }
                            break;
                        }
                    }

                if (federatedAuthenticators.length() > 0) {
                    isFederated = true;
                }
            }
        }
    }

    if (request.getParameter(Constants.MISSING_CLAIMS) != null) {
        missingClaimList = request.getParameter(Constants.MISSING_CLAIMS).split(",");
    }
    if (request.getParameter("missingClaimsDisplayName") != null) {
        missingClaimDisplayName = request.getParameter("missingClaimsDisplayName").split(",");
    }

    if (errorCodeObj != null) {
        errorCode = errorCodeObj.toString();
    }
    if (SelfRegistrationStatusCodes.ERROR_CODE_INVALID_TENANT.equalsIgnoreCase(errorCode)) {
        errorMsg = IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "invalid.tenant.domain")
                + " - " + user.getTenantDomain();
    } else if (SelfRegistrationStatusCodes.ERROR_CODE_USER_ALREADY_EXISTS.equalsIgnoreCase(errorCode)) {
        errorMsg = IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Username") + " '"
                + username + "' " + IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "username.already.taken.pick.different.username");
        isFederated = false;
    } else if (SelfRegistrationStatusCodes.ERROR_CODE_SELF_REGISTRATION_DISABLED.equalsIgnoreCase(errorCode)) {
        errorMsg = IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "self.registration.disabled.for.tenant")
            + " - " + user.getTenantDomain();
    } else if (SelfRegistrationStatusCodes.CODE_USER_NAME_INVALID.equalsIgnoreCase(errorCode)) {
        if (request.getAttribute("errorMessage") != null) {
            errorMsg = (String) request.getAttribute("errorMessage");
        } else {
            errorMsg = user.getUsername() + " "
                    + IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "invalid.username.pick.a.valid.username");
        }
    } else if (StringUtils.equalsIgnoreCase(SelfRegistrationStatusCodes.ERROR_CODE_INVALID_EMAIL_USERNAME,
            errorCode)) {
        errorMsg = IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "username.is.invalid.should.be.in.email.format");
    } else if (SelfRegistrationStatusCodes.ERROR_CODE_INVALID_USERSTORE.equalsIgnoreCase(errorCode)) {
        errorMsg = IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "invalid.userstore.domain") + " - " + user.getRealm();
    } else if (errorMsgObj != null) {
        errorMsg = errorMsgObj.toString();
    }

        /**
    * For SaaS applications, read the user tenant from parameters.
    */
    String srtenantDomain = request.getParameter("srtenantDomain");
    if (isSaaSApp && StringUtils.isNotBlank(srtenantDomain)) {
        tenantDomain = srtenantDomain;
    }

    if (skipSignUpEnableCheck) {
        consentPurposeGroupName = "JIT";
    }

    if (StringUtils.isBlank(callback) || StringUtils.equalsIgnoreCase(callback, "null")) {
        callback = Encode.forHtmlAttribute(IdentityManagementEndpointUtil.getUserPortalUrl(
                application.getInitParameter(IdentityManagementEndpointConstants.ConfigConstants.USER_PORTAL_URL), tenantDomain));
    }

    /**
    * If backToUrl is null get to access url of the application.
    */
    if (StringUtils.equalsIgnoreCase(backToUrl,"null")) {
        try {
                // Retrieve application access url to redirect user back to the application.
                backToUrl = applicationDataRetrievalClient.getApplicationAccessURL(tenantDomain, sp);
            } catch (Exception e) {
                backToUrl = null;
        }
    }

    String purposes;
    try {
        purposes = selfRegistrationMgtClient.getPurposes(tenantDomain, consentPurposeGroupName,
            consentPurposeGroupType);
    } catch (SelfRegistrationMgtClientException e) {
        purposes = null;
    }
    boolean hasPurposes = StringUtils.isNotEmpty(purposes);
    Claim[] claims = new Claim[0];

    /**
     * Change consentDisplayType to "template" inorder to use a custom html template.
     * other Default values are "row" and "tree".
     */
    String consentDisplayType = "row";

    if (hasPurposes) {
        defaultPurposeCatId = selfRegistrationMgtClient.getDefaultPurposeId(tenantDomain);
        uniquePIIs = IdentityManagementEndpointUtil.getUniquePIIs(purposes);
        if (MapUtils.isNotEmpty(uniquePIIs)) {
            piisConfigured = true;
        }
    }

    List<Claim> claimsList;
    UsernameRecoveryApi usernameRecoveryApi = new UsernameRecoveryApi();
    try {
        claimsList = usernameRecoveryApi.claimsGet(tenantDomain, false, "selfRegistration");
        uniquePIIs = IdentityManagementEndpointUtil.fillPiisWithClaimInfo(uniquePIIs, claimsList);
        if (uniquePIIs != null) {
            claims = uniquePIIs.values().toArray(new Claim[0]);
        }
        IdentityManagementEndpointUtil.addReCaptchaHeaders(request, usernameRecoveryApi.getApiClient().getResponseHeaders());

    } catch (ApiException e) {
        IdentityManagementEndpointUtil.addErrorInformation(request, e);
        if (!StringUtils.isBlank(username)) {
            request.setAttribute("username", username);
        }
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }

    Claim emailPII =
        uniquePIIs.get(IdentityManagementEndpointConstants.ClaimURIs.EMAIL_CLAIM);
    Boolean isAlphanumericUsernameEnabled = false;
    if (usernameConfig.has("alphanumericFormatValidator")) {
        isAlphanumericUsernameEnabled = (Boolean) usernameConfig.get("alphanumericFormatValidator");
    }

    /**
    * Temporarily read recapcha status from password recovery endpoint.
    */
    ReCaptchaApi reCaptchaApi = new ReCaptchaApi();
    try {
        ReCaptchaProperties reCaptchaProperties = reCaptchaApi.getReCaptcha(tenantDomain, true, "ReCaptcha",
            "self-registration");

        if (reCaptchaProperties.getReCaptchaEnabled()) {
            Map<String, List<String>> headers = new HashMap<>();
            headers.put("reCaptcha", Arrays.asList(String.valueOf(true)));
            headers.put("reCaptchaAPI", Arrays.asList(reCaptchaProperties.getReCaptchaAPI()));
            headers.put("reCaptchaKey", Arrays.asList(reCaptchaProperties.getReCaptchaKey()));
            IdentityManagementEndpointUtil.addReCaptchaHeaders(request, headers);
        }
    } catch (ApiException e) {
        request.setAttribute("error", true);
        request.setAttribute("errorMsg", e.getMessage());
        if (!StringUtils.isBlank(username)) {
            request.setAttribute("username", username);
        }
        request.getRequestDispatcher("error.jsp").forward(request, response);
        return;
    }

    boolean reCaptchaEnabled = false;
    if (request.getAttribute("reCaptcha") != null && "TRUE".equalsIgnoreCase((String) request.getAttribute("reCaptcha"))) {
        reCaptchaEnabled = true;
    } else if (request.getParameter("reCaptcha") != null && Boolean.parseBoolean(request.getParameter("reCaptcha"))) {
        reCaptchaEnabled = true;
    }

      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("<!doctype html>\n");
      out.write("<html lang=\"en-US\">\n");
      out.write("<head>\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        File headerFile = new File(getServletContext().getRealPath("extensions/header.jsp"));
        if (headerFile.exists()) {
    
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("    ");

        if (reCaptchaEnabled) {
            String reCaptchaAPI = CaptchaUtil.reCaptchaAPIURL();
    
      out.write("\n");
      out.write("        <script src='");
      out.print((reCaptchaAPI));
      out.write("'></script>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("    <link rel=\"stylesheet\" href=\"libs/addons/calendar.min.css\"/>\n");
      out.write("</head>\n");
      out.write("<body class=\"login-portal layout recovery-layout\">\n");
      out.write("    ");
      //  layout:main
      org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler _jspx_th_layout_005fmain_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler) _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.get(org.wso2.identity.apps.taglibs.layout.controller.MainTagHandler.class);
      _jspx_th_layout_005fmain_005f0.setPageContext(_jspx_page_context);
      _jspx_th_layout_005fmain_005f0.setParent(null);
      // /self-registration-username-request.jsp(453,4) name = layoutName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_layout_005fmain_005f0.setLayoutName( layout );
      // /self-registration-username-request.jsp(453,4) name = layoutFileRelativePath type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_layout_005fmain_005f0.setLayoutFileRelativePath( layoutFileRelativePath );
      // /self-registration-username-request.jsp(453,4) name = data type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_layout_005fmain_005f0.setData( layoutData );
      int _jspx_eval_layout_005fmain_005f0 = _jspx_th_layout_005fmain_005f0.doStartTag();
      if (_jspx_eval_layout_005fmain_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("        ");
          //  layout:component
          org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
          _jspx_th_layout_005fcomponent_005f0.setPageContext(_jspx_page_context);
          _jspx_th_layout_005fcomponent_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
          // /self-registration-username-request.jsp(454,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_layout_005fcomponent_005f0.setComponentName("ProductHeader");
          int _jspx_eval_layout_005fcomponent_005f0 = _jspx_th_layout_005fcomponent_005f0.doStartTag();
          if (_jspx_eval_layout_005fcomponent_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("            ");
              out.write("\n");
              out.write("            ");

                File productTitleFile = new File(getServletContext().getRealPath("extensions/product-title.jsp"));
                if (productTitleFile.exists()) {
            
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-title.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } else { 
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-title.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } 
              out.write("\n");
              out.write("        ");
              int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f0.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_layout_005fcomponent_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f0);
          out.write("\n");
          out.write("        ");
          //  layout:component
          org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f1 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
          _jspx_th_layout_005fcomponent_005f1.setPageContext(_jspx_page_context);
          _jspx_th_layout_005fcomponent_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
          // /self-registration-username-request.jsp(465,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_layout_005fcomponent_005f1.setComponentName("MainSection");
          int _jspx_eval_layout_005fcomponent_005f1 = _jspx_th_layout_005fcomponent_005f1.doStartTag();
          if (_jspx_eval_layout_005fcomponent_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("        ");
 if(skipSignUpEnableCheck) {
              out.write("\n");
              out.write("            <div class=\"ui segment\">\n");
              out.write("                <h3 class=\"ui header\">\n");
              out.write("                    ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Initiate.sign.up"));
              out.write("\n");
              out.write("                </h3>\n");
              out.write("                <div class=\"ui negative message\" id=\"error-msg\" hidden=\"hidden\"></div>\n");
              out.write("                ");
 if (error) { 
              out.write("\n");
              out.write("                <div class=\"ui negative message\" id=\"server-error-msg\">\n");
              out.write("                    ");
              out.print( IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, errorMsg) );
              out.write("\n");
              out.write("                </div>\n");
              out.write("                ");
 } 
              out.write("\n");
              out.write("                <div class=\"ui divider hidden\"></div>\n");
              out.write("                <div class=\"segment-form\">\n");
              out.write("                    <form class=\"ui large form\" action=\"signup.do\" method=\"post\" id=\"register\">\n");
              out.write("                        <div class=\"field\">\n");
              out.write("                            <label for=\"username\">\n");
              out.write("                                ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                    "Enter.your.username.here"));
              out.write("\n");
              out.write("                            </label>\n");
              out.write("                            <input id=\"username\" name=\"username\" type=\"text\" required\n");
              out.write("                                ");
 if(skipSignUpEnableCheck && StringUtils.isNotBlank(username)) {
              out.write(" value=\"");
              out.print(Encode.forHtmlAttribute(username));
              out.write('"');
              out.write(' ');
}
              out.write(">\n");
              out.write("                        </div>\n");
              out.write("                        ");
 if (isSaaSApp) { 
              out.write("\n");
              out.write("                        <p class=\"ui tiny compact info message\">\n");
              out.write("                            <i class=\"icon info circle\"></i>\n");
              out.write("                            ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                    "If.you.specify.tenant.domain.you.registered.under.super.tenant"));
              out.write("\n");
              out.write("                        </p>\n");
              out.write("                        ");
 } 
              out.write("\n");
              out.write("                        <input id=\"callback\" name=\"callback\" type=\"hidden\" value=\"");
              out.print(callback);
              out.write("\"\n");
              out.write("                               class=\"form-control\" required>\n");
              out.write("                        ");
 Map<String, String[]> requestMap = request.getParameterMap();
                            for (Map.Entry<String, String[]> entry : requestMap.entrySet()) {
                                String key = Encode.forHtmlAttribute(entry.getKey());
                                String value = Encode.forHtmlAttribute(entry.getValue()[0]);
                                if (StringUtils.equalsIgnoreCase("reCaptcha", key)) {
                                    continue;
                                } 
              out.write("\n");
              out.write("                        <div class=\"field\">\n");
              out.write("                            <input id=\"");
              out.print( key);
              out.write("\" name=\"");
              out.print( key);
              out.write("\" type=\"hidden\"\n");
              out.write("                                   value=\"");
              out.print(value);
              out.write("\" class=\"form-control\">\n");
              out.write("                        </div>\n");
              out.write("                        ");
 } 
              out.write("\n");
              out.write("                        ");

                            if (reCaptchaEnabled) {
                                String reCaptchaKey = CaptchaUtil.reCaptchaSiteKey();
                        
              out.write("\n");
              out.write("                        <div class=\"field\">\n");
              out.write("                            <div class=\"g-recaptcha\"\n");
              out.write("                                data-size=\"invisible\"\n");
              out.write("                                data-callback=\"onCompleted\"\n");
              out.write("                                data-action=\"register\"\n");
              out.write("                                data-sitekey=\"");
              out.print(Encode.forHtmlContent(reCaptchaKey));
              out.write("\"\n");
              out.write("                            >\n");
              out.write("                            </div>\n");
              out.write("                        </div>\n");
              out.write("                        ");
 }  
              out.write("\n");
              out.write("                        <div class=\"ui divider hidden\"></div>\n");
              out.write("                        <div class=\"align-right buttons\">\n");
              out.write("                            <button id=\"registrationSubmit\" class=\"ui primary fluid large button mb-2\" type=\"submit\">\n");
              out.write("                                ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                    "Proceed.to.self.register"));
              out.write("\n");
              out.write("                            </button>\n");
              out.write("                            <a href=\"javascript:goBack()\" class=\"ui button secondary fluid large button\">\n");
              out.write("                                ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Cancel"));
              out.write("\n");
              out.write("                            </a>\n");
              out.write("                        </div>\n");
              out.write("                    </form>\n");
              out.write("                </div>\n");
              out.write("            </div>\n");
              out.write("        ");
 } else {
              out.write("\n");
              out.write("            <div class=\"ui segment\">\n");
              out.write("                <h3 class=\"ui header\" data-testid=\"self-registration-username-request-page-header\">\n");
              out.write("                    ");
              out.print(i18n(recoveryResourceBundle, customText, "sign.up.heading"));
              out.write("\n");
              out.write("                </h3>\n");
              out.write("\n");
              out.write("                ");
 if (error) { 
              out.write("\n");
              out.write("                <div class=\"ui negative message\" id=\"server-error-msg\">\n");
              out.write("                    ");
              out.print( IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, errorMsg) );
              out.write("\n");
              out.write("                </div>\n");
              out.write("                ");
 } 
              out.write("\n");
              out.write("\n");
              out.write("                <!-- show continue with email button -->\n");
              out.write("                <div id=\"continue-with-email\" hidden=\"hidden\">\n");
              out.write("                    <div class=\"buttons mt-4\">\n");
              out.write("                        <button\n");
              out.write("                            id=\"ContinueWithEmail\"\n");
              out.write("                            class=\"ui primary button large fluid\"\n");
              out.write("                            type=\"submit\"\n");
              out.write("                            data-testid=\"continue-with-email-button\"\n");
              out.write("                            onclick=\"showEmail()\"\n");
              out.write("                        >\n");
              out.write("                            ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "continue.with.email"));
              out.write("\n");
              out.write("                        </button>\n");
              out.write("                    </div>\n");
              out.write("                    <div class=\"ui horizontal divider\">\n");
              out.write("                        ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "or"));
              out.write("\n");
              out.write("                    </div>\n");
              out.write("                </div>\n");
              out.write("\n");
              out.write("                <!-- federated authenticators -->\n");
              out.write("                <div class=\"ui divider hidden\"></div>\n");
              out.write("                <div id=\"federated-authenticators\" hidden=\"hidden\">\n");
              out.write("                    ");

                    for (int i = 0; i < federatedAuthenticators.length(); i++) {

                        JSONObject federatedAuthenticator = (JSONObject) federatedAuthenticators.get(i);
                        String name = (String)federatedAuthenticator.get("name");
                        String type = (String)federatedAuthenticator.get("type");
                        String displayName = name;

                        String imageURL = "libs/themes/wso2is/assets/images/identity-providers/enterprise-idp-illustration.svg";
                        try {
                            IdentityProviderDataRetrievalClient identityProviderDataRetrievalClient = new IdentityProviderDataRetrievalClient();
                            imageURL = identityProviderDataRetrievalClient.getIdPImage(tenantDomain, name);
                        } catch (IdentityProviderDataRetrievalClientException e) {
                            // Exception is ignored and the default `imageURL` value will be used as a fallback.
                        }
                        // If any IdP's name starts with `Sign in with`, then we need to remove the `Sign in with` part.
                        // If not, the UI will look weird with labels like `Sign in with Sign In With Google`.
                        String EXTERNAL_CONNECTION_PREFIX = "sign in with";
                        if (StringUtils.startsWithIgnoreCase(name, EXTERNAL_CONNECTION_PREFIX)) {
                            displayName = name.substring(EXTERNAL_CONNECTION_PREFIX.length());
                        }
                        // If IdP name is "SSO", need to handle as special case.
                        if (StringUtils.equalsIgnoreCase(name, SSO_AUTHENTICATOR_NAME)) {
                            imageURL = "libs/themes/default/assets/images/identity-providers/sso.svg";
                        }

                        if (StringUtils.equals(type,GOOGLE_AUTHENTICATOR)) {
                    
              out.write("\n");
              out.write("\n");
              out.write("                    <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                        <div class=\"field\">\n");
              out.write("                            <button type=\"button\"\n");
              out.write("                                class=\"ui button\"\n");
              out.write("                                data-testid=\"sign-up-with-google\"\n");
              out.write("                                onclick=\"handleNoDomain(this,\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(name)));
              out.write("',\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(type)));
              out.write("')\"\n");
              out.write("                            >\n");
              out.write("                            <img\n");
              out.write("                                class=\"ui image\"\n");
              out.write("                                src=\"libs/themes/wso2is/assets/images/identity-providers/google-idp-illustration.svg\"\n");
              out.write("                                alt=\"Google sign-up logo\"\n");
              out.write("                                role=\"presentation\">\n");
              out.write("                            <span>");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "continue.with"));
              out.write(' ');
              out.print(Encode.forHtmlContent(displayName));
              out.write("</span>\n");
              out.write("                            </button>\n");
              out.write("                        </div>\n");
              out.write("                    </div>\n");
              out.write("                    <br>\n");
              out.write("                    ");

                        } else if (StringUtils.equals(type,GITHUB_AUTHENTICATOR)) {
                    
              out.write("\n");
              out.write("                    <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                        <div class=\"field\">\n");
              out.write("                            <button type=\"button\"\n");
              out.write("                                class=\"ui button\"\n");
              out.write("                                data-testid=\"sign-up-with-github\"\n");
              out.write("                                onclick=\"handleNoDomain(this,\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(name)));
              out.write("',\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(type)));
              out.write("')\"\n");
              out.write("                            >\n");
              out.write("                            <img\n");
              out.write("                                class=\"ui image\"\n");
              out.write("                                src=\"libs/themes/wso2is/assets/images/identity-providers/github-idp-illustration.svg\"\n");
              out.write("                                alt=\"Github sign-up logo\"\n");
              out.write("                                role=\"presentation\">\n");
              out.write("                            <span>");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "continue.with"));
              out.write(' ');
              out.print(Encode.forHtmlContent(displayName));
              out.write("</span>\n");
              out.write("                            </button>\n");
              out.write("                        </div>\n");
              out.write("                    </div>\n");
              out.write("                    <br>\n");
              out.write("                    ");

                        } else if (StringUtils.equals(type,FACEBOOK_AUTHENTICATOR)) {
                    
              out.write("\n");
              out.write("                    <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                        <div class=\"field\">\n");
              out.write("                            <button type=\"button\"\n");
              out.write("                                class=\"ui button\"\n");
              out.write("                                data-testid=\"sign-up-with-facebook\"\n");
              out.write("                                onclick=\"handleNoDomain(this,\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(name)));
              out.write("',\n");
              out.write("                                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(type)));
              out.write("')\"\n");
              out.write("                            >\n");
              out.write("                            <img\n");
              out.write("                                class=\"ui image\"\n");
              out.write("                                src=\"libs/themes/wso2is/assets/images/identity-providers/facebook-idp-illustration.svg\"\n");
              out.write("                                alt=\"Facebook sign-up logo\"\n");
              out.write("                                role=\"presentation\">\n");
              out.write("                            <span>");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "continue.with"));
              out.write(' ');
              out.print(Encode.forHtmlContent(displayName));
              out.write("</span>\n");
              out.write("                            </button>\n");
              out.write("                        </div>\n");
              out.write("                    </div>\n");
              out.write("                    <br>\n");
              out.write("                    ");
 } else {

                        String logoPath = imageURL;
                        if (!imageURL.isEmpty() && imageURL.contains("/")) {
                            String[] imageURLSegements = imageURL.split("/");
                            String logoFileName = imageURLSegements[imageURLSegements.length - 1];

                            logoPath = "libs/themes/default/assets/images/identity-providers/" + logoFileName;
                        }
                    
              out.write("\n");
              out.write("                    <div class=\"social-login blurring social-dimmer\">\n");
              out.write("                        <div class=\"field\">\n");
              out.write("                            <button\n");
              out.write("                                type=\"button\"\n");
              out.write("                                class=\"ui button\"\n");
              out.write("                                data-testid='sign-up-with-");
              out.print(Encode.forHtmlContent(name));
              out.write("'\n");
              out.write("                                onclick=\"handleNoDomain(this,\n");
              out.write("                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(name)));
              out.write("',\n");
              out.write("                                    '");
              out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(type)));
              out.write("')\"\n");
              out.write("                                >\n");
              out.write("                                    <img\n");
              out.write("                                        role=\"presentation\"\n");
              out.write("                                        alt=\"sign-up-with-");
              out.print(Encode.forHtmlContent(name));
              out.write(" logo\"\n");
              out.write("                                        class=\"ui image\"\n");
              out.write("                                        src=\"");
              out.print(Encode.forHtmlAttribute(logoPath));
              out.write("\">\n");
              out.write("                                    <span>");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "continue.with"));
              out.write(' ');
              out.print(Encode.forHtmlContent(displayName));
              out.write("</span>\n");
              out.write("                            </button>\n");
              out.write("                        </div>\n");
              out.write("                    </div>\n");
              out.write("                    <br>\n");
              out.write("                    ");

                        }
                    }
                    
              out.write("\n");
              out.write("                    <div style=\"text-align: left;\">\n");
              out.write("                        ");
              out.write("\n");
              out.write("                        ");

                            if (StringUtils.isNotBlank(termsOfUseURL) && StringUtils.isNotBlank(privacyPolicyURL)) {
                        
              out.write("\n");
              out.write("                        <p class=\"mt-2 mb-0 left privacy\">When you continue, you are agreeing to our\n");
              out.write("                            <a href=\"");
              out.print( StringEscapeUtils.escapeHtml4(termsOfUseURL) );
              out.write("\" target=\"_blank\"\n");
              out.write("                            data-testid=\"registration-form-tos-link\"\n");
              out.write("                            rel=\"noopener noreferrer\">\n");
              out.write("                                ");
              out.print(i18n(recoveryResourceBundle, customText, "terms.of.service"));
              out.write("\n");
              out.write("                            </a>\n");
              out.write("                            ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "and"));
              out.write("\n");
              out.write("                            <a href=\"");
              out.print( StringEscapeUtils.escapeHtml4(privacyPolicyURL) );
              out.write("\" target=\"_blank\"\n");
              out.write("                            data-testid=\"registration-form-privacy-link\"\n");
              out.write("                            rel=\"noopener noreferrer\">\n");
              out.write("                                ");
              out.print(i18n(recoveryResourceBundle, customText, "privacy.policy"));
              out.write("\n");
              out.write("                            </a>\n");
              out.write("                        </p>\n");
              out.write("                        ");

                            } else if (StringUtils.isNotBlank(termsOfUseURL)) {
                        
              out.write("\n");
              out.write("                        <p class=\"mt-2 mb-0 left privacy\">When you continue, you are agreeing to our\n");
              out.write("                            <a href=\"");
              out.print( StringEscapeUtils.escapeHtml4(termsOfUseURL) );
              out.write("\" target=\"_blank\"\n");
              out.write("                                data-testid=\"registration-form-tos-link\" rel=\"noopener noreferrer\"\n");
              out.write("                            >\n");
              out.write("                                ");
              out.print(i18n(recoveryResourceBundle, customText, "terms.of.service"));
              out.write("\n");
              out.write("                            </a>\n");
              out.write("                        </p>\n");
              out.write("                        ");

                            } else if (StringUtils.isNotBlank(privacyPolicyURL)) {
                        
              out.write("\n");
              out.write("                        <p class=\"mt-2 mb-0 left privacy\">When you continue, you are agreeing to our\n");
              out.write("                            <a href=\"");
              out.print( StringEscapeUtils.escapeHtml4(privacyPolicyURL) );
              out.write("\" target=\"_blank\"\n");
              out.write("                                data-testid=\"registration-form-privacy-link\" rel=\"noopener noreferrer\"\n");
              out.write("                            >\n");
              out.write("                                ");
              out.print(i18n(recoveryResourceBundle, customText, "privacy.policy"));
              out.write("\n");
              out.write("                            </a>\n");
              out.write("                        </p>\n");
              out.write("                        ");

                            }
                        
              out.write("\n");
              out.write("                        ");
              out.write("\n");
              out.write("\n");
              out.write("                        <div class=\"ui divider hidden\"></div>\n");
              out.write("                        ");

                            if (!StringUtils.equalsIgnoreCase(backToUrl, "null") &&
                                !StringUtils.isBlank(backToUrl) &&
                                !backToUrl.toLowerCase().contains("javascript:") &&
                                !backToUrl.toLowerCase().contains("file:") &&
                                !backToUrl.toLowerCase().contains("ftp:") &&
                                !backToUrl.toLowerCase().contains("data:")) {
                        
              out.write("\n");
              out.write("                        <div class=\"buttons mt-2\">\n");
              out.write("                            <div class=\"field external-link-container text-small\">\n");
              out.write("                                ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                        "Already.have.an.account"));
              out.write("\n");
              out.write("                                <a href=\"");
              out.print(backToUrl);
              out.write("\">\n");
              out.write("                                    ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Sign.in"));
              out.write("\n");
              out.write("                                </a>\n");
              out.write("                            </div>\n");
              out.write("                        </div>\n");
              out.write("                        ");

                            }
                        
              out.write("\n");
              out.write("                    </div>\n");
              out.write("                </div>\n");
              out.write("\n");
              out.write("                <!-- validation -->\n");
              out.write("                <div class=\"ui negative message\" id=\"error-msg\" hidden=\"hidden\"></div>\n");
              out.write("                <div class=\"segment-form\" id=\"basic-form\" hidden=\"hidden\">\n");
              out.write("                    <form class=\"ui large form\" action=\"processregistration.do\" method=\"post\" id=\"register\" novalidate>\n");
              out.write("                        <div id=\"alphanumericUsernameField\" class=\"field required\" hidden=\"hidden\">\n");
              out.write("                            <input id=\"isSaaSApp\" name=\"isSaaSApp\" type=\"hidden\"value=\"");
              out.print(isSaaSApp);
              out.write("\">\n");
              out.write("                        ");
 if (isPasswordProvisionEnabled || !skipSignUpEnableCheck) { 
              out.write("\n");
              out.write("                            <div class=\"ui divider hidden\"></div>\n");
              out.write("                            <label>");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Username"));
              out.write("</label>\n");
              out.write("                            <div class=\"ui fluid left icon input\">\n");
              out.write("                                <input\n");
              out.write("                                    type=\"text\"\n");
              out.write("                                    id=\"alphanumericUsernameUserInput\"\n");
              out.write("                                    value=\"");
              out.print(discoveredUsername != null ? Encode.forHtmlAttribute(discoveredUsername) : "");
              out.write("\"\n");
              out.write("                                    name=\"usernameInput\"\n");
              out.write("                                    tabindex=\"1\"\n");
              out.write("                                    placeholder=\"");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "enter.your.username"));
              out.write("\"\n");
              out.write("                                    data-testid=\"self-register-page-username-input\"\n");
              out.write("                                    autocomplete=\"off\"\n");
              out.write("                                    required\n");
              out.write("                                />\n");
              out.write("                                <i aria-hidden=\"true\" class=\"user outline icon\"></i>\n");
              out.write("                            </div>\n");
              out.write("                            <div class=\"mt-1\" id=\"alphanumeric-username-error-msg\" hidden=\"hidden\">\n");
              out.write("                                <div class=\"ui grid\">\n");
              out.write("                                    <div class=\"one wide column\">\n");
              out.write("                                        <i class=\"red exclamation circle icon\"></i>\n");
              out.write("                                    </div>\n");
              out.write("                                    <div class=\"fourteen wide column validation-error-message\" id=\"alphanumeric-username-error-msg-text\"></div>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            <div class=\"mt-1 password-policy-description\" id=\"alphanumeric-username-msg\">\n");
              out.write("                                <div class=\"ui grid\">\n");
              out.write("                                    <div class=\"one wide column\">\n");
              out.write("                                        <i class=\"info circle icon\" data-variation=\"inverted\"></i>\n");
              out.write("                                    </div>\n");
              out.write("                                    <div class=\"fourteen wide column\" id=\"alphanumeric-username-msg-text\"></div>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                        </div>\n");
              out.write("                        <input id=\"username\" name=\"username\" type=\"hidden\"\n");
              out.write("                            ");
 if(skipSignUpEnableCheck) {
              out.write(" value=\"");
              out.print(Encode.forHtmlAttribute(username));
              out.write('"');
              out.write(' ');
}
              out.write(">\n");
              out.write("                        ");
 if (emailPII != null) { 
              out.write("\n");
              out.write("                        <div id=\"usernameField\"\n");
              out.write("                            ");
if (isSelfRegistrationLockOnCreationEnabled || emailPII.getRequired() || !isAlphanumericUsernameEnabled) { 
              out.write("\n");
              out.write("                                class=\"field required\"\n");
              out.write("                            ");
} else { 
              out.write("\n");
              out.write("                                class=\"field\"\n");
              out.write("                            ");
}
              out.write(">\n");
              out.write("                            <div class=\"ui divider hidden\"></div>\n");
              out.write("                            <label>");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Email"));
              out.write("</label>\n");
              out.write("                            <div class=\"ui fluid left icon input\">\n");
              out.write("                                <input\n");
              out.write("                                    type=\"email\"\n");
              out.write("                                    id=\"usernameUserInput\"\n");
              out.write("                                    value=\"");
              out.print(discoveredUsername != null ? Encode.forHtmlAttribute(discoveredUsername) : "");
              out.write("\"\n");
              out.write("                                    name=\"http://wso2.org/claims/emailaddress\"\n");
              out.write("                                    tabindex=\"1\"\n");
              out.write("                                    placeholder=\"");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "enter.your.email"));
              out.write("\"\n");
              out.write("                                    data-testid=\"self-register-page-username-input\"\n");
              out.write("                                    autocomplete=\"off\"\n");
              out.write("                                    ");
if (emailPII.getRequired() || !isAlphanumericUsernameEnabled || isSelfRegistrationLockOnCreationEnabled) {
              out.write(" required ");
}
              out.write("\n");
              out.write("                                />\n");
              out.write("                                <i aria-hidden=\"true\" class=\"envelope outline icon\"></i>\n");
              out.write("                            </div>\n");
              out.write("                            <div class=\"mt-1\" id=\"username-error-msg\" hidden=\"hidden\">\n");
              out.write("                                <div class=\"ui grid\">\n");
              out.write("                                    <div class=\"one wide column\">\n");
              out.write("                                        <i class=\"red exclamation circle icon\"></i>\n");
              out.write("                                    </div>\n");
              out.write("                                    <div class=\"fourteen wide column validation-error-message\" id=\"username-error-msg-text\"></div>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                            <div class=\"ui divider hidden\"></div>\n");
              out.write("                        </div>\n");
              out.write("                        ");
 } 
              out.write("\n");
              out.write("                        <div id=\"passwordField\" class=\"field required\">\n");
              out.write("                            <label>");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Password"));
              out.write("</label>\n");
              out.write("                            <div class=\"ui fluid left icon input addon-wrapper\">\n");
              out.write("                                <input\n");
              out.write("                                    type=\"password\"\n");
              out.write("                                    id=\"passwordUserInput\"\n");
              out.write("                                    value=\"\"\n");
              out.write("                                    name=\"passwordUserInput\"\n");
              out.write("                                    tabindex=\"1\"\n");
              out.write("                                    placeholder=\"");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "enter.your.password"));
              out.write("\"\n");
              out.write("                                    data-testid=\"self-register-page-password-input\"\n");
              out.write("                                    autocomplete=\"new-password\"\n");
              out.write("                                    required\n");
              out.write("                                />\n");
              out.write("                                <i aria-hidden=\"true\" class=\"lock icon\"></i>\n");
              out.write("                                <i id=\"password-eye\" class=\"eye icon right-align password-toggle slash\" onclick=\"showPassword()\"></i>\n");
              out.write("                                <input id=\"password\" name=\"password\" type=\"hidden\"\n");
              out.write("                                    ");
 if(skipSignUpEnableCheck) {
              out.write(" value=\"");
              out.print(Encode.forHtmlAttribute(username));
              out.write('"');
              out.write(' ');
}
              out.write(">\n");
              out.write("                            </div>\n");
              out.write("                            <div class=\"mt-1\" id=\"password-error-msg\" hidden=\"hidden\">\n");
              out.write("                                <div class=\"ui grid\">\n");
              out.write("                                    <div class=\"one wide column\">\n");
              out.write("                                        <i class=\"red exclamation circle icon\"></i>\n");
              out.write("                                    </div>\n");
              out.write("                                    <div class=\"fourteen wide column validation-error-message\" id=\"password-error-msg-text\"></div>\n");
              out.write("                                </div>\n");
              out.write("                            </div>\n");
              out.write("                        </div>\n");
              out.write("                        <input name=\"previous_step\" type=\"hidden\" id=\"previous_step\" />\n");
              out.write("\n");
              out.write("                        ");
 Map<String, String[]> requestMap = request.getParameterMap();
                            for (Map.Entry<String, String[]> entry : requestMap.entrySet()) {
                                String key = Encode.forHtmlAttribute(entry.getKey());
                                String value = Encode.forHtmlAttribute(entry.getValue()[0]);
                                if (StringUtils.equalsIgnoreCase("reCaptcha", key)) {
                                    continue;
                                } 
              out.write("\n");
              out.write("                        <div class=\"field\">\n");
              out.write("                            <input id=\"");
              out.print( key);
              out.write("\" name=\"");
              out.print( key);
              out.write("\" type=\"hidden\"\n");
              out.write("                                   value=\"");
              out.print(value);
              out.write("\" class=\"form-control\">\n");
              out.write("                        </div>\n");
              out.write("                        ");
 } 
              out.write("\n");
              out.write("                        <div id=\"password-validation-block\">\n");
              out.write("                            <div id=\"length-block\" class=\"password-policy-description mb-2\" style=\"display: none;\">\n");
              out.write("                                <i id=\"password-validation-neutral-length\" class=\"inverted grey circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-cross-length\" style=\"display: none;\" class=\"red times circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-check-length\" style=\"display: none;\" class=\"green check circle icon\"></i>\n");
              out.write("                                <p id=\"length\" class=\"pl-4\">\n");
              out.write("                                    ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "more.than.8.chars"));
              out.write("\n");
              out.write("                                </p>\n");
              out.write("                            </div>\n");
              out.write("                            <div id=\"case-block\" class=\"password-policy-description mb-2\" style=\"display: none;\">\n");
              out.write("                                <i id=\"password-validation-neutral-case\" class=\"inverted grey circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-cross-case\" style=\"display: none;\" class=\"red times circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-check-case\" style=\"display: none;\" class=\"green check circle icon\"></i>\n");
              out.write("                                <p id=\"case\" class=\"pl-4\">\n");
              out.write("                                    ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "lowercase.and.uppercase.letter"));
              out.write("\n");
              out.write("                                </p>\n");
              out.write("                            </div>\n");
              out.write("                            <div id=\"number-block\" class=\"password-policy-description mb-2\" style=\"display: none;\">\n");
              out.write("                                <i id=\"password-validation-neutral-number\" class=\"inverted grey circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-cross-number\" style=\"display: none;\" class=\"red times circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-check-number\" style=\"display: none;\" class=\"green check circle icon\"></i>\n");
              out.write("                                <p id=\"number\" class=\"pl-4\">\n");
              out.write("                                    ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "at.least.one.number"));
              out.write("\n");
              out.write("                                </p>\n");
              out.write("                            </div>\n");
              out.write("                            <div id=\"special-chr-block\" class=\"password-policy-description mb-2\" style=\"display: none;\">\n");
              out.write("                                <i id=\"password-validation-neutral-special-chr\" class=\"inverted grey circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-cross-special-chr\" style=\"display: none;\" class=\"red times circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-check-special-chr\" style=\"display: none;\" class=\"green check circle icon\"></i>\n");
              out.write("                                <p id=\"special-chr\" class=\"pl-4\">");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "at.least.one.special.char"));
              out.write("</p>\n");
              out.write("                            </div>\n");
              out.write("                            <div id=\"unique-chr-block\" class=\"password-policy-description mb-2\" style=\"display: none;\">\n");
              out.write("                                <i id=\"password-validation-neutral-unique-chr\" class=\"inverted grey circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-cross-unique-chr\" style=\"display: none;\" class=\"red times circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-check-unique-chr\" style=\"display: none;\" class=\"green check circle icon\"></i>\n");
              out.write("                                <p id=\"unique-chr\" class=\"pl-4\">\n");
              out.write("                                    ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "at.least.one.unique.char"));
              out.write("\n");
              out.write("                                </p>\n");
              out.write("                            </div>\n");
              out.write("                            <div id=\"repeated-chr-block\" class=\"password-policy-description mb-2\" style=\"display: none;\">\n");
              out.write("                                <i id=\"password-validation-neutral-repeated-chr\" class=\"inverted grey circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-cross-repeated-chr\" style=\"display: none;\" class=\"red times circle icon\"></i>\n");
              out.write("                                <i id=\"password-validation-check-repeated-chr\" style=\"display: none;\" class=\"green check circle icon\"></i>\n");
              out.write("                                <p id=\"repeated-chr\" class=\"pl-4\">\n");
              out.write("                                    ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "no.more.than.one.repeated.char"));
              out.write("\n");
              out.write("                                </p>\n");
              out.write("                            </div>\n");
              out.write("                        </div>\n");
              out.write("\n");
              out.write("                        ");
              out.write("\n");
              out.write("                            <div>\n");
              out.write("                                ");

                                    Claim firstNamePII =
                                        uniquePIIs.get(IdentityManagementEndpointConstants.ClaimURIs.FIRST_NAME_CLAIM);
                                    Claim lastNamePII =
                                        uniquePIIs.get(IdentityManagementEndpointConstants.ClaimURIs.LAST_NAME_CLAIM);
                                    if (firstNamePII != null) {
                                        String firstNameValue = request.getParameter(IdentityManagementEndpointConstants.ClaimURIs.FIRST_NAME_CLAIM);
                                
              out.write("\n");
              out.write("                                    <div ");
 if (lastNamePII != null) { 
              out.write(" class=\"two fields mb-0\" ");
} 
              out.write(" >\n");
              out.write("                                        <div id=\"firstNameField\"\n");
              out.write("                                        ");
 if (firstNamePII.getRequired()) { 
              out.write(" class=\"field form-group required\" ");
}
                                                else {
              out.write(" class=\"field\"");
}
              out.write(">\n");
              out.write("                                            <label class=\"control-label\">");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "First.name"));
              out.write("\n");
              out.write("                                            </label>\n");
              out.write("                                            <input id=\"firstNameUserInput\" type=\"text\" name=\"http://wso2.org/claims/givenname\" class=\"form-control\"\n");
              out.write("                                                ");
 if (firstNamePII.getRequired()) {
              out.write(" required ");
}
              out.write("\n");
              out.write("                                                ");
 if (skipSignUpEnableCheck && StringUtils.isNotEmpty(firstNameValue)) { 
              out.write("\n");
              out.write("                                                value=\"");
              out.print( Encode.forHtmlAttribute(firstNameValue));
              out.write("\" disabled ");
 } 
              out.write("\n");
              out.write("                                                placeholder=\"");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "First.name"));
              out.write("\"/>\n");
              out.write("                                                <div class=\"mt-1\" id=\"firstname-error-msg\" hidden=\"hidden\">\n");
              out.write("                                                    <div class=\"ui grid\">\n");
              out.write("                                                        <div class=\"one wide column\">\n");
              out.write("                                                            <i class=\"red exclamation circle icon\"></i>\n");
              out.write("                                                        </div>\n");
              out.write("                                                        <div class=\"ten wide column validation-error-message\" id=\"firstname-error-msg-text\"></div>\n");
              out.write("                                                    </div>\n");
              out.write("                                                </div>\n");
              out.write("                                        </div>\n");
              out.write("                                        ");
}
              out.write("\n");
              out.write("\n");
              out.write("                                        ");

                                            if (lastNamePII != null) {
                                                String lastNameValue =
                                                        request.getParameter(IdentityManagementEndpointConstants.ClaimURIs.LAST_NAME_CLAIM);
                                        
              out.write("\n");
              out.write("\n");
              out.write("                                        <div id=\"lastNameField\"\n");
              out.write("                                            ");
 if (lastNamePII.getRequired()) { 
              out.write(" class=\"field form-group required\" ");
 }
                                                else { 
              out.write(" class=\"field form-group\"");
 } 
              out.write(">\n");
              out.write("                                            <label class=\"control-label\">");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Last.name"));
              out.write("\n");
              out.write("                                            </label>\n");
              out.write("                                            <input id=\"lastNameUserInput\" type=\"text\" name=\"http://wso2.org/claims/lastname\" class=\"form-control\"\n");
              out.write("                                                ");
 if (lastNamePII.getRequired()) {
              out.write(" required ");
}
              out.write("\n");
              out.write("                                                ");
 if (skipSignUpEnableCheck && StringUtils.isNotEmpty(lastNameValue)) { 
              out.write("\n");
              out.write("                                                value=\"");
              out.print( Encode.forHtmlAttribute(lastNameValue));
              out.write("\" disabled ");
 } 
              out.write("\n");
              out.write("                                                placeholder=\"");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Last.name"));
              out.write("\"\n");
              out.write("                                            />\n");
              out.write("                                            <div class=\"mt-1\" id=\"lastname-error-msg\" hidden=\"hidden\">\n");
              out.write("                                                <div class=\"ui grid\">\n");
              out.write("                                                    <div class=\"one wide column\">\n");
              out.write("                                                        <i class=\"red exclamation circle icon\"></i>\n");
              out.write("                                                    </div>\n");
              out.write("                                                    <div class=\"ten wide column validation-error-message\" id=\"lastname-error-msg-text\"></div>\n");
              out.write("                                                </div>\n");
              out.write("                                            </div>\n");
              out.write("                                        </div>\n");
              out.write("                                    </div>\n");
              out.write("                                    <div class=\"mb-3\"></div>\n");
              out.write("\n");
              out.write("                                ");
}
              out.write("\n");
              out.write("                                ");

                                    if (callback != null) {
                                
              out.write("\n");
              out.write("                                ");
 for (int index = 0; index < missingClaimList.length; index++) {
                                    String claim = missingClaimList[index];
                                    String claimDisplayName = missingClaimDisplayName[index];
                                    if (!StringUtils
                                            .equals(claim, IdentityManagementEndpointConstants.ClaimURIs.FIRST_NAME_CLAIM)
                                            && !StringUtils
                                            .equals(claim, IdentityManagementEndpointConstants.ClaimURIs.LAST_NAME_CLAIM)
                                            && !StringUtils
                                            .equals(claim, IdentityManagementEndpointConstants.ClaimURIs.EMAIL_CLAIM)) {
                                
              out.write("\n");
              out.write("                                <div class=\"required field\">\n");
              out.write("                                    <input type=\"text\" name=\"missing-");
              out.print(Encode.forHtmlAttribute(claim));
              out.write("\"\n");
              out.write("                                        id=\"");
              out.print(Encode.forHtmlAttribute(claim));
              out.write("\" class=\"form-control\"\n");
              out.write("                                        onblur=\"showFieldValidationStatus(this)\"\n");
              out.write("                                        oninput=\"hideFieldValidationStatus(this)\"\n");
              out.write("                                        required=\"required\" placeholder=");
              out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, claimDisplayName));
              out.write(">\n");
              out.write("                                </div>\n");
              out.write("                                ");
 }
                                }
              out.write("\n");
              out.write("                                ");

                                    }
                                    List<String> missingClaims = null;
                                    if (ArrayUtils.isNotEmpty(missingClaimList)) {
                                        missingClaims = Arrays.asList(missingClaimList);
                                    }
                                    for (Claim claim : claims) {
                                        if ((CollectionUtils.isEmpty(missingClaims) || !missingClaims.contains(claim.getUri())) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.FIRST_NAME_CLAIM) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.LAST_NAME_CLAIM) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.EMAIL_CLAIM) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.CHALLENGE_QUESTION_URI_CLAIM) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.CHALLENGE_QUESTION_1_CLAIM) &&
                                                !StringUtils.equals(claim.getUri(), IdentityManagementEndpointConstants.ClaimURIs.CHALLENGE_QUESTION_2_CLAIM) &&
                                                !StringUtils.equals(claim.getUri(), "http://wso2.org/claims/groups") &&
                                                !StringUtils.equals(claim.getUri(), "http://wso2.org/claims/role") &&
                                                !StringUtils.equals(claim.getUri(), "http://wso2.org/claims/url") &&
                                                !StringUtils.equals(claim.getUri(), "http://wso2.org/claims/emailAddresses") &&
                                                !StringUtils.equals(claim.getUri(), "http://wso2.org/claims/verifiedEmailAddresses") &&
                                                !StringUtils.equals(claim.getUri(), "http://wso2.org/claims/mobileNumbers") &&
                                                !StringUtils.equals(claim.getUri(), "http://wso2.org/claims/verifiedMobileNumbers") &&
                                                !(claim.getReadOnly() != null ? claim.getReadOnly() : false)) {
                                            String claimURI = claim.getUri();
                                            String claimValue = request.getParameter(claimURI);
                                            String[] claimFields = claimURI.split("/");
                                            String claimName = claimFields[claimFields.length-1];
                                            String claimFieldID = claimName + "_field";
                                            String claimErrorMsg = claimName + "_error";
                                            String claimErrorMsgText = claimName + "_error_text";
                                
              out.write("\n");
              out.write("                                    <div  id= \"");
              out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, claimFieldID));
              out.write("\"\n");
              out.write("                                        ");
 if (claim.getRequired()) { 
              out.write(" class=\"field form-group required\" ");
} else {
              out.write(" class=\"field\"");
}
              out.write("  >\n");
              out.write("                                        <label class=\"control-label\">\n");
              out.write("                                            ");
              out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, claim.getDisplayName()));
              out.write("\n");
              out.write("                                        </label>\n");
              out.write("                                    ");
 if(StringUtils.equals(claim.getUri(), "http://wso2.org/claims/country")) {
              out.write("\n");
              out.write("                                        <div class=\"ui fluid search selection dropdown\"  id=\"country-dropdown\"\n");
              out.write("                                            data-testid=\"country-dropdown\">\n");
              out.write("                                            <input type=\"hidden\"\n");
              out.write("                                                id=\"country\"\n");
              out.write("                                                name=\"");
              out.print( Encode.forHtmlAttribute(claimURI) );
              out.write("\"\n");
              out.write("                                                ");
 if (claim.getRequired()) { 
              out.write("\n");
              out.write("                                                    required\n");
              out.write("                                                ");
 }
              out.write("\n");
              out.write("                                                ");
 if(skipSignUpEnableCheck && StringUtils.isNotEmpty(claimValue)) {
              out.write("\n");
              out.write("                                                    value=\"");
              out.print( Encode.forHtmlAttribute(claimValue));
              out.write("\" disabled");
}
              out.write("\n");
              out.write("                                            />\n");
              out.write("                                            <i class=\"dropdown icon\"></i>\n");
              out.write("                                            <div class=\"default text\">\n");
              out.write("                                                ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "enter.country"));
              out.write("\n");
              out.write("                                            </div>\n");
              out.write("                                            <div class=\"menu\">\n");
              out.write("                                                ");
              //  c:forEach
              org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
              _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
              _jspx_th_c_005fforEach_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fcomponent_005f1);
              // /self-registration-username-request.jsp(1065,48) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
              _jspx_th_c_005fforEach_005f0.setItems(getCountryList());
              // /self-registration-username-request.jsp(1065,48) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_c_005fforEach_005f0.setVar("country");
              int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
              try {
                int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
                if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                  do {
                    out.write("\n");
                    out.write("                                                    <div class=\"item\" data-value=\"");
                    out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${country.value}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
                    out.write("\">\n");
                    out.write("                                                        <i class=\"");
                    out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${country.key.toLowerCase()}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
                    out.write(" flag\"></i>\n");
                    out.write("                                                            ");
                    out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${country.value}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
                    out.write("\n");
                    out.write("                                                    </div>\n");
                    out.write("                                                ");
                    int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
                    if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                      break;
                  } while (true);
                }
                if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                  return;
                }
              } catch (java.lang.Throwable _jspx_exception) {
                while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
                  out = _jspx_page_context.popBody();
                _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
              } finally {
                _jspx_th_c_005fforEach_005f0.doFinally();
              }
              _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
              out.write("\n");
              out.write("                                            </div>\n");
              out.write("                                        </div>\n");
              out.write("                                    ");
 } else if (StringUtils.equals(claim.getUri(), "http://wso2.org/claims/local")) { 
              out.write("\n");
              out.write("                                        <div class=\"ui fluid search selection dropdown\" id=\"local-dropdown\" data-testid=\"local-dropdown\">\n");
              out.write("                                            <input type=\"hidden\" \n");
              out.write("                                                id=\"local-input\" \n");
              out.write("                                                name=\"");
              out.print( Encode.forHtmlAttribute(claimURI) );
              out.write("\"\n");
              out.write("                                                ");
 if (claim.getRequired()) { 
              out.write("\n");
              out.write("                                                    required\n");
              out.write("                                                ");
 }
              out.write("\n");
              out.write("                                                ");
 if(skipSignUpEnableCheck && StringUtils.isNotEmpty(claimValue)) {
              out.write("\n");
              out.write("                                                    value=\"");
              out.print( Encode.forHtmlAttribute(claimValue));
              out.write("\" disabled");
}
              out.write("\n");
              out.write("                                            />\n");
              out.write("                                            <i class=\"dropdown icon\"></i>\n");
              out.write("                                            <div class=\"default text\">\n");
              out.write("                                                ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "enter.local"));
              out.write("\n");
              out.write("                                            </div>\n");
              out.write("                                            <div class=\"menu\">\n");
              out.write("                                                ");

                                                    List<Map<String, String>> localeList = getLocaleList(application);
                                                    for (Map<String, String> localeItem : localeList) {
                                                
              out.write("\n");
              out.write("                                                    <div class=\"item\" data-value=\"");
              out.print( localeItem.get(LOCALE_CODE_KEY) );
              out.write("\">\n");
              out.write("                                                        <i class=\"");
              out.print( localeItem.get(FLAG_CODE_KEY).toLowerCase() );
              out.write(" flag\"></i>\n");
              out.write("                                                        ");
              out.print( localeItem.get(DISPLAY_NAME_KEY) );
              out.write("\n");
              out.write("                                                    </div>\n");
              out.write("                                                ");

                                                    }
                                                
              out.write("\n");
              out.write("                                            </div>                                            \n");
              out.write("                                        </div>\n");
              out.write("                                    ");
 } else if (StringUtils.equals(claim.getUri(), "http://wso2.org/claims/dob")) { 
              out.write("\n");
              out.write("                                        <div class=\"ui calendar\" id=\"date_picker\">\n");
              out.write("                                            <div class=\"ui input right icon\" style=\"width: 100%;\">\n");
              out.write("                                                <i class=\"calendar icon\"></i>\n");
              out.write("                                                <input type=\"text\"\n");
              out.write("                                                        autocomplete=\"off\"\n");
              out.write("                                                        name=\"");
              out.print( Encode.forHtmlAttribute(claimURI) );
              out.write("\"\n");
              out.write("                                                        id=\"birthOfDate\"\n");
              out.write("                                                        ");
 if (claim.getRequired()) { 
              out.write("\n");
              out.write("                                                            required\n");
              out.write("                                                        ");
 } 
              out.write("\n");
              out.write("                                                        placeholder=\"");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "enter.birth.date"));
              out.write("\"\n");
              out.write("                                                    ");
 if(skipSignUpEnableCheck && StringUtils.isNotEmpty(claimValue)) {
              out.write("\n");
              out.write("                                                        value=\"");
              out.print( Encode.forHtmlAttribute(claimValue));
              out.write("\" disabled");
}
              out.write("\n");
              out.write("                                                />\n");
              out.write("                                            </div>\n");
              out.write("                                        </div>\n");
              out.write("                                    ");
 } else { 
              out.write("\n");
              out.write("                                            <input type=\"text\" name=\"");
              out.print( Encode.forHtmlAttribute(claimURI) );
              out.write("\"\n");
              out.write("                                                class=\"form-control\"\n");
              out.write("                                                onblur=\"showFieldValidationStatus(this)\"\n");
              out.write("                                                oninput=\"hideFieldValidationStatus(this)\"\n");
              out.write("                                                ");
 if (claim.getValidationRegex() != null) { 
              out.write("\n");
              out.write("                                                pattern=\"");
              out.print( Encode.forHtmlContent(claim.getValidationRegex()) );
              out.write("\"\n");
              out.write("                                                ");
 } 
              out.write("\n");
              out.write("                                                ");
 if (claim.getRequired()) { 
              out.write("\n");
              out.write("                                                    required\n");
              out.write("                                                ");
 } 
              out.write("\n");
              out.write("                                                ");
 if (StringUtils.equals(claim.getUri(), "http://wso2.org/claims/mobile")) { 
              out.write("\n");
              out.write("                                                    id=\"mobileNumber\"\n");
              out.write("                                            ");
 }
              out.write("\n");
              out.write("                                                placeholder=\"");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "enter"));
              out.write(' ');
              out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, claim.getDisplayName()));
              out.write("\"\n");
              out.write("                                                ");
 if(skipSignUpEnableCheck && StringUtils.isNotEmpty(claimValue)) {
              out.write("\n");
              out.write("                                                value=\"");
              out.print( Encode.forHtmlAttribute(claimValue));
              out.write("\" disabled");
}
              out.write("\n");
              out.write("                                            />\n");
              out.write("                                    ");
 } 
              out.write("\n");
              out.write("                                    <div class=\"mt-1\" id=\"");
              out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, claimErrorMsg));
              out.write("\" hidden=\"hidden\">\n");
              out.write("                                        <div class=\"ui grid\">\n");
              out.write("                                            <div class=\"one wide column\">\n");
              out.write("                                                <i class=\"red exclamation circle icon\"></i>\n");
              out.write("                                            </div>\n");
              out.write("                                            <div class=\"fourteen wide column validation-error-message\"\n");
              out.write("                                            id=\"");
              out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, claimErrorMsgText));
              out.write("\"></div>\n");
              out.write("                                        </div>\n");
              out.write("                                    </div>\n");
              out.write("                                    </div>\n");
              out.write("                                ");

                                    }
                                }
                                
              out.write("\n");
              out.write("\n");
              out.write("                            </div>\n");
              out.write("                            ");
 } else { 
              out.write("\n");
              out.write("                            <div>\n");
              out.write("                                <div class=\"field\">\n");
              out.write("                                    <label class=\"control-label\">\n");
              out.write("                                        ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "username"));
              out.write("\n");
              out.write("                                    </label>\n");
              out.write("                                    <input type=\"text\" class=\"form-control\"\n");
              out.write("                                        value=\"");
              out.print(Encode.forHtmlAttribute(username));
              out.write("\" disabled>\n");
              out.write("                                </div>\n");
              out.write("                                ");

                                    for (Claim claim : claims) {
                                        String claimUri = claim.getUri();
                                        String claimValue = request.getParameter(claimUri);

                                        if (StringUtils.isNotEmpty(claimValue)) { 
              out.write("\n");
              out.write("                                <div class=\"field\">\n");
              out.write("                                    <label class=\"control-label\">\n");
              out.write("                                        ");
              out.print(IdentityManagementEndpointUtil.i18nBase64(recoveryResourceBundle, claim.getDisplayName()));
              out.write("\n");
              out.write("                                    </label>\n");
              out.write("                                    <input type=\"text\" class=\"form-control\"\n");
              out.write("                                        value=\"");
              out.print( Encode.forHtmlAttribute(claimValue));
              out.write("\" disabled>\n");
              out.write("                                </div>\n");
              out.write("                                ");
 }
                                }
              out.write("\n");
              out.write("                            </div>\n");
              out.write("                            ");
 } 
              out.write("\n");
              out.write("                            ");
 if (skipSignUpEnableCheck) { 
              out.write("\n");
              out.write("                            <div class=\"field\">\n");
              out.write("                                <input type=\"hidden\" name=\"sessionDataKey\" value='");
              out.print(Encode.forHtmlAttribute
                                        (request.getParameter("sessionDataKey")));
              out.write("'/>\n");
              out.write("                            </div>\n");
              out.write("                            <div class=\"field\">\n");
              out.write("                                <input type=\"hidden\" name=\"policy\" value='");
              out.print(Encode.forHtmlAttribute
                                        (IdentityManagementServiceUtil.getInstance().getServiceContextURL().replace("/services",
                                        "/authenticationendpoint/privacy_policy.do")));
              out.write("'/>\n");
              out.write("                            </div>\n");
              out.write("                            ");
 }

                                if (hasPurposes) {
                            
              out.write("\n");
              out.write("                            <div class=\"ui divider hidden\"></div>\n");
              out.write("                            <div class=\"ui secondary left aligned segment\">\n");
              out.write("                                <p>\n");
              out.write("                                    ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                        "Need.consent.for.following.purposes"));
              out.write("\n");
              out.write("                                    <span>\n");
              out.write("                                        ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                            "I.consent.to.use.them"));
              out.write("\n");
              out.write("                                    </span>\n");
              out.write("                                    ");

                                        if (consentDisplayType == "template") {
                                    
              out.write("\n");
              out.write("                                    ");
              out.write("\n");
              out.write("                                        <div class=\"consent-statement\"></div>\n");
              out.write("                                    ");
              out.write("\n");
              out.write("                                    ");
 } else if (consentDisplayType == "tree") { 
              out.write("\n");
              out.write("                                    ");
              out.write("\n");
              out.write("                                        <div id=\"tree-table\"></div>\n");
              out.write("                                    ");
              out.write("\n");
              out.write("                                    ");

                                    } else if (consentDisplayType == "row") {
                                    
              out.write("\n");
              out.write("                                    ");
              out.write("\n");
              out.write("                                        <div id=\"row-container\"></div>\n");
              out.write("                                    ");
              out.write("\n");
              out.write("                                    ");

                                        }
                                    
              out.write("\n");
              out.write("                                </p>\n");
              out.write("                            </div>\n");
              out.write("                            ");

                                }
                            
              out.write("\n");
              out.write("                            <div class=\"field\">\n");
              out.write("                                ");

                                    if (reCaptchaEnabled) {
                                        String reCaptchaKey = CaptchaUtil.reCaptchaSiteKey();
                                
              out.write("\n");
              out.write("                                <div class=\"ui divider hidden\"></div>\n");
              out.write("                                <div class=\"field\">\n");
              out.write("                                    <div class=\"g-recaptcha\"\n");
              out.write("                                        data-sitekey=\"");
              out.print(Encode.forHtmlAttribute(reCaptchaKey));
              out.write("\"\n");
              out.write("                                        data-theme=\"light\"\n");
              out.write("                                        data-bind=\"registrationSubmit\"\n");
              out.write("                                        data-callback=\"submitForm\"\n");
              out.write("                                    >\n");
              out.write("                                    </div>\n");
              out.write("                                </div>\n");
              out.write("                                ");

                                    }
                                
              out.write("\n");
              out.write("                                <div class=\"ui divider hidden\"></div>\n");
              out.write("                                ");

                                if (!isFederated) {
                                
              out.write("\n");
              out.write("                                    ");
              out.write("\n");
              out.write("                                    ");

                                        if (StringUtils.isNotBlank(termsOfUseURL) && StringUtils.isNotBlank(privacyPolicyURL)) {
                                    
              out.write("\n");
              out.write("                                    <p class=\"mt-5 mb-0 privacy\">\n");
              out.write("                                        ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "when.you.click.sign.up.you.are.agreeing"));
              out.write("\n");
              out.write("                                        <a href=\"");
              out.print( StringEscapeUtils.escapeHtml4(termsOfUseURL) );
              out.write("\" target=\"_blank\"\n");
              out.write("                                            data-testid=\"registration-form-tos-link\" rel=\"noopener noreferrer\"\n");
              out.write("                                        >\n");
              out.write("                                            ");
              out.print(i18n(recoveryResourceBundle, customText, "terms.of.service"));
              out.write("\n");
              out.write("                                        </a>\n");
              out.write("                                        ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "and"));
              out.write("\n");
              out.write("                                        <a href=\"");
              out.print( StringEscapeUtils.escapeHtml4(privacyPolicyURL) );
              out.write("\" target=\"_blank\"\n");
              out.write("                                            data-testid=\"registration-form-privacy-link\" rel=\"noopener noreferrer\"\n");
              out.write("                                        >\n");
              out.write("                                            ");
              out.print(i18n(recoveryResourceBundle, customText, "privacy.policy"));
              out.write("\n");
              out.write("                                        </a>\n");
              out.write("                                    </p>\n");
              out.write("                                    ");

                                        } else if (StringUtils.isNotBlank(termsOfUseURL)) {
                                    
              out.write("\n");
              out.write("                                    <p class=\"mt-5 mb-0 privacy\">\n");
              out.write("                                        ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "when.you.click.sign.up.you.are.agreeing"));
              out.write("\n");
              out.write("                                        <a href=\"");
              out.print( StringEscapeUtils.escapeHtml4(termsOfUseURL) );
              out.write("\" target=\"_blank\"\n");
              out.write("                                            data-testid=\"registration-form-tos-link\" rel=\"noopener noreferrer\"\n");
              out.write("                                        >\n");
              out.write("                                            ");
              out.print(i18n(recoveryResourceBundle, customText, "terms.of.service"));
              out.write("\n");
              out.write("                                        </a>\n");
              out.write("                                    </p>\n");
              out.write("                                    ");

                                        } else if (StringUtils.isNotBlank(privacyPolicyURL)) {
                                    
              out.write("\n");
              out.write("                                    <p class=\"mt-5 mb-0 privacy\">\n");
              out.write("                                        ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "when.you.click.sign.up.you.are.agreeing"));
              out.write("\n");
              out.write("                                        <a href=\"");
              out.print( StringEscapeUtils.escapeHtml4(privacyPolicyURL) );
              out.write("\" target=\"_blank\"\n");
              out.write("                                            data-testid=\"registration-form-privacy-link\" rel=\"noopener noreferrer\"\n");
              out.write("                                        >\n");
              out.write("                                            ");
              out.print(i18n(recoveryResourceBundle, customText, "privacy.policy"));
              out.write("\n");
              out.write("                                        </a>\n");
              out.write("                                    </p>\n");
              out.write("                                    ");

                                        }
                                    
              out.write("\n");
              out.write("                                    ");
              out.write("\n");
              out.write("                                ");

                                }
                                
              out.write("\n");
              out.write("                                <div class=\"field\">\n");
              out.write("                                    <input id=\"isSelfRegistrationWithVerification\" type=\"hidden\"\n");
              out.write("                                        name=\"isSelfRegistrationWithVerification\"\n");
              out.write("                                        value=\"true\"/>\n");
              out.write("                                    ");

                                        if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {
                                    
              out.write("\n");
              out.write("                                    <input id=\"tenantDomain\" name=\"tenantDomain\" type=\"hidden\"\n");
              out.write("                                        value=\"");
              out.print( Encode.forHtmlAttribute(tenantDomain) );
              out.write("\"/>\n");
              out.write("                                    ");

                                        }
                                    
              out.write("\n");
              out.write("                                    ");

                                        if (isSaaSApp) {
                                    
              out.write("\n");
              out.write("                                    <input id=\"srtenantDomain\" name=\"srtenantDomain\" type=\"hidden\"\n");
              out.write("                                        value=\"");
              out.print(Encode.forHtmlAttribute(tenantDomain));
              out.write("\"/>\n");
              out.write("                                    ");

                                        }
                                    
              out.write("\n");
              out.write("                                    ");

                                        if (StringUtils.isNotBlank(sp)) {
                                    
              out.write("\n");
              out.write("                                    <input id=\"sp\" name=\"sp\" type=\"hidden\" value=\"");
              out.print(sp);
              out.write("\"/>\n");
              out.write("                                    ");

                                        }
                                    
              out.write("\n");
              out.write("                                </div>\n");
              out.write("\n");
              out.write("                            </div>\n");
              out.write("                        <div class=\"buttons mt-4\">\n");
              out.write("                            <button id=\"registrationSubmit\" class=\"ui primary button large fluid\" type=\"submit\">\n");
              out.write("                                ");
              out.print( i18n(recoveryResourceBundle, customText, "sign.up.button") );
              out.write("\n");
              out.write("                            </button>\n");
              out.write("                        </div>\n");
              out.write("                        <div class=\"ui divider hidden\"></div>\n");
              out.write("                        ");

                            if (!StringUtils.equalsIgnoreCase(backToUrl, "null") &&
                                !StringUtils.isBlank(backToUrl) &&
                                !backToUrl.toLowerCase().contains("javascript:") &&
                                !backToUrl.toLowerCase().contains("file:") &&
                                !backToUrl.toLowerCase().contains("ftp:") &&
                                !backToUrl.toLowerCase().contains("data:")) {
                        
              out.write("\n");
              out.write("                        <div class=\"buttons mt-2\">\n");
              out.write("                            <div class=\"field external-link-container text-small\">\n");
              out.write("                                ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                                        "Already.have.an.account"));
              out.write("\n");
              out.write("                                <a href=\"");
              out.print(backToUrl);
              out.write("\">\n");
              out.write("                                    ");
              out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Sign.in"));
              out.write("\n");
              out.write("                                </a>\n");
              out.write("                            </div>\n");
              out.write("                        </div>\n");
              out.write("                        ");

                            }
                        
              out.write("\n");
              out.write("                    </form>\n");
              out.write("                </div>\n");
              out.write("            </div>\n");
              out.write("        ");
 }
              out.write("\n");
              out.write("        ");
              int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f1.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_layout_005fcomponent_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f1);
          out.write("\n");
          out.write("        ");
          //  layout:component
          org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler _jspx_th_layout_005fcomponent_005f2 = (org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.get(org.wso2.identity.apps.taglibs.layout.controller.ComponentTagHandler.class);
          _jspx_th_layout_005fcomponent_005f2.setPageContext(_jspx_page_context);
          _jspx_th_layout_005fcomponent_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
          // /self-registration-username-request.jsp(1357,8) name = componentName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_layout_005fcomponent_005f2.setComponentName("ProductFooter");
          int _jspx_eval_layout_005fcomponent_005f2 = _jspx_th_layout_005fcomponent_005f2.doStartTag();
          if (_jspx_eval_layout_005fcomponent_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\n");
              out.write("            ");
              out.write("\n");
              out.write("            ");

                File productFooterFile = new File(getServletContext().getRealPath("extensions/product-footer.jsp"));
                if (productFooterFile.exists()) {
            
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/product-footer.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } else { 
              out.write("\n");
              out.write("                ");
              org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/product-footer.jsp", out, false);
              out.write("\n");
              out.write("            ");
 } 
              out.write("\n");
              out.write("        ");
              int evalDoAfterBody = _jspx_th_layout_005fcomponent_005f2.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_layout_005fcomponent_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          _005fjspx_005ftagPool_005flayout_005fcomponent_0026_005fcomponentName.reuse(_jspx_th_layout_005fcomponent_005f2);
          out.write("\n");
          out.write("        ");
          if (_jspx_meth_layout_005fdynamicComponent_005f0(_jspx_th_layout_005fmain_005f0, _jspx_page_context))
            return;
          out.write("\n");
          out.write("    ");
          int evalDoAfterBody = _jspx_th_layout_005fmain_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_layout_005fmain_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005flayout_005fmain_0026_005flayoutName_005flayoutFileRelativePath_005fdata.reuse(_jspx_th_layout_005fmain_005f0);
      out.write("\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("    ");

        File footerFile = new File(getServletContext().getRealPath("extensions/footer.jsp"));
        if (footerFile.exists()) {
    
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "includes/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <div id=\"mandetory_pii_selection_validation\" class=\"ui tiny modal\">\n");
      out.write("        <div class=\"header\">\n");
      out.write("            <h4>\n");
      out.write("                ");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Consent.selection"));
      out.write("\n");
      out.write("            </h4>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"content\">\n");
      out.write("            ");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Need.to.select.all.mandatory.attributes"));
      out.write("\n");
      out.write("        </div>\n");
      out.write("        <div class=\"actions\">\n");
      out.write("            <button type=\"button\" class=\"ui primary button cancel\" data-dismiss=\"modal\">\n");
      out.write("                ");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Ok"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <script type=\"text/javascript\" src=\"libs/handlebars.min-v4.7.7.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" src=\"libs/jstree/src/jstree.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" src=\"libs/jstree/src/jstree-actions.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" src=\"js/consent_template_1.js\"></script>\n");
      out.write("    <script type=\"text/javascript\" src=\"js/consent_template_2.js\"></script>\n");
      out.write("    <script>\n");
      out.write("        const ALPHANUMERIC_USERNAME_REGEX = /^(?=.*[a-zA-Z])[a-zA-Z0-9]+$/;\n");
      out.write("        const USERNAME_WITH_SPECIAL_CHARS_REGEX = /^(?=.*[a-zA-Z])[a-zA-Z0-9!@#$&'+\\\\=^.{|}~-]+$/;\n");
      out.write("        var registrationDataKey = \"registrationData\";\n");
      out.write("        var passwordField = $(\"#passwordUserInput\");\n");
      out.write("        var $registerForm = $(\"#register\");\n");
      out.write("        var validUsername = false;\n");
      out.write("        var validPassword = false;\n");
      out.write("        var passwordConfig = ");
      out.print(passwordConfig);
      out.write(";\n");
      out.write("        var usernameConfig = ");
      out.print(usernameConfig);
      out.write(";\n");
      out.write("        var lowerCaseLetters = /[a-z]/g;\n");
      out.write("        var upperCaseLetters = /[A-Z]/g;\n");
      out.write("        var numbers = /[0-9]/g;\n");
      out.write("        var specialChr = /[!#$%&'()*+,\\-\\.\\/:;<=>?@[\\]^_{|}~]/g;\n");
      out.write("        var consecutiveChr = /([^])\\1+/g;\n");
      out.write("        var errorMessage = getErrorMessage();\n");
      out.write("        var validConsentPurpose = true;\n");
      out.write("\n");
      out.write("        if (passwordConfig.minLength> 0 || passwordConfig.maxLength > 0) {\n");
      out.write("            document.getElementById(\"length\").innerHTML = '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "must.be.between"));
      out.write("' +\n");
      out.write("                \" \" + (passwordConfig.minLength ?? 8) +\n");
      out.write("                \" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "and"));
      out.write("' +\n");
      out.write("                    \" \" + (passwordConfig.maxLength ?? 30) + \" \" +\n");
      out.write("            '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "characters"));
      out.write("';\n");
      out.write("            $(\"#length-block\").css(\"display\", \"block\");\n");
      out.write("        }\n");
      out.write("        if (passwordConfig.minNumber > 0) {\n");
      out.write("            document.getElementById(\"number\").innerHTML = '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "at.least"));
      out.write("'\n");
      out.write("                + \" \" + passwordConfig.minNumber + \" \"\n");
      out.write("                + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "numbers"));
      out.write("';\n");
      out.write("            $(\"#number-block\").css(\"display\", \"block\");\n");
      out.write("        }\n");
      out.write("        if ((passwordConfig.minUpperCase > 0) || passwordConfig.minLowerCase > 0) {\n");
      out.write("            let cases = [];\n");
      out.write("            if (passwordConfig.minUpperCase > 0) {\n");
      out.write("                cases.push(passwordConfig.minUpperCase + \" \"\n");
      out.write("                    + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "uppercase"));
      out.write("');\n");
      out.write("            }\n");
      out.write("            if (passwordConfig.minLowerCase > 0) {\n");
      out.write("                cases.push(passwordConfig.minLowerCase + \" \"\n");
      out.write("                    + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "lowercase"));
      out.write("');\n");
      out.write("            }\n");
      out.write("            document.getElementById(\"case\").innerHTML = '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "at.least"));
      out.write("'\n");
      out.write("                + \" \" + (cases.length > 1\n");
      out.write("                    ? cases.join(\" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "and"));
      out.write("' +  \" \")\n");
      out.write("                    : cases[0]) + \" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "character.s"));
      out.write("';\n");
      out.write("            $(\"#case-block\").css(\"display\", \"block\");\n");
      out.write("        }\n");
      out.write("        if (passwordConfig.minSpecialChr > 0) {\n");
      out.write("            document.getElementById(\"special-chr\").innerHTML = '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "at.least"));
      out.write("'\n");
      out.write("                + \" \" + passwordConfig.minSpecialChr + \" \"\n");
      out.write("                + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "special.characters"));
      out.write("';\n");
      out.write("            $(\"#special-chr-block\").css(\"display\", \"block\");\n");
      out.write("        }\n");
      out.write("        if (passwordConfig.minUniqueChr > 0) {\n");
      out.write("            document.getElementById(\"unique-chr\").innerHTML = '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "at.least"));
      out.write("'\n");
      out.write("                + \" \" + passwordConfig.minUniqueChr + \" \"\n");
      out.write("                + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "unique.characters"));
      out.write("';\n");
      out.write("            $(\"#unique-chr-block\").css(\"display\", \"block\");\n");
      out.write("        }\n");
      out.write("        if (passwordConfig.maxConsecutiveChr > 0) {\n");
      out.write("            document.getElementById(\"repeated-chr\").innerHTML = '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "no.more.than"));
      out.write("'\n");
      out.write("                + \" \" + passwordConfig.maxConsecutiveChr + \" \"\n");
      out.write("                + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "repeated.characters"));
      out.write("';\n");
      out.write("            $(\"#repeated-chr-block\").css(\"display\", \"block\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Prepare the alphanumeric username message text.\n");
      out.write("        var alphanumericUsernameText = $(\"#alphanumeric-username-msg-text\");\n");
      out.write("        if (usernameConfig.enableSpecialCharacters) {\n");
      out.write("            alphanumericUsernameText.html(\n");
      out.write("                \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "must.be.between"));
      out.write("\"\n");
      out.write("                + \" \" + (usernameConfig?.minLength ?? 3) + \" \"\n");
      out.write("                + \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "to"));
      out.write("\"\n");
      out.write("                + \" \" + (usernameConfig.maxLength ?? 255) + \" \"\n");
      out.write("                + \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "characters.may.contain"));
      out.write("\"\n");
      out.write("            );\n");
      out.write("        } else {\n");
      out.write("            alphanumericUsernameText.text(\n");
      out.write("                \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "must.be.alphanumeric"));
      out.write("\"\n");
      out.write("                + \" \" + (usernameConfig?.minLength ?? 3) + \" \"\n");
      out.write("                + \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "to"));
      out.write("\"\n");
      out.write("                + \" \" + (usernameConfig.maxLength ?? 255) + \" \"\n");
      out.write("                + \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "characters.including.one.letter"));
      out.write("\"\n");
      out.write("            );\n");
      out.write("        }\n");
      out.write("        if (!");
      out.print(isUsernameValidationEnabled);
      out.write(") {\n");
      out.write("            $(\"#alphanumeric-username-msg\").hide();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Check whether the alphanumeric username is enabled or disabled.\n");
      out.write("        function isAlphanumericUsernameEnabled() {\n");
      out.write("            return usernameConfig?.alphanumericFormatValidator == true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Show the alphanumeric username field only when alphanumeric usernames are allowed.\n");
      out.write("        if (isAlphanumericUsernameEnabled()) {\n");
      out.write("            $(\"#alphanumericUsernameField\").show();\n");
      out.write("            document.getElementById(\"alphanumericUsernameUserInput\").setAttribute(\"name\", \"alphanumericUsernameUserInput\");\n");
      out.write("        }\n");
      out.write("        if (!");
      out.print(isUsernameValidationEnabled);
      out.write(") {\n");
      out.write("            $(\"#alphanumericUsernameField\").show();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Reloads the page if the page is loaded by going back in history.\n");
      out.write("        // Fixes issues with Firefox.\n");
      out.write("        window.addEventListener( \"pageshow\", function ( event ) {\n");
      out.write("            var historyTraversal = event.persisted ||\n");
      out.write("                                ( typeof window.performance != \"undefined\" &&\n");
      out.write("                                    window.performance.navigation.type === 2 );\n");
      out.write("\n");
      out.write("            if ( historyTraversal ) {\n");
      out.write("                if($registerForm){\n");
      out.write("                    $registerForm.data(\"submitted\", false);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        function goBack() {\n");
      out.write("            window.history.back();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Fires when username field lose focus.\n");
      out.write("        $('#usernameUserInput').bind('blur', function () {\n");
      out.write("            showUsernameValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires when username field lose focus.\n");
      out.write("        $('#alphanumericUsernameUserInput').bind('blur', function () {\n");
      out.write("            if (");
      out.print(isUsernameValidationEnabled);
      out.write(") {\n");
      out.write("                showAlphanumericUsernameValidationStatus();\n");
      out.write("            } else {\n");
      out.write("            	showUsernameRegexValidationStatus();\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires when password field lose focus.\n");
      out.write("        $('#passwordUserInput').bind('blur', function () {\n");
      out.write("            showPasswordValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires when firstname field lose focus.\n");
      out.write("        $('#firstNameUserInput').bind('blur', function () {\n");
      out.write("            showFirstNameValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires when lastname field lose focus.\n");
      out.write("        $('#lastNameUserInput').bind('blur', function () {\n");
      out.write("            showLastNameValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires when mobile field lose focus.\n");
      out.write("        $('#mobileNumber').bind('blur', function () {\n");
      out.write("            showMobileNumberValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires when country field lose focus.\n");
      out.write("        $('#country').bind('blur', function () {\n");
      out.write("            showCountryValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires when local field lose focus.\n");
      out.write("        $('#local-input').bind('blur', function () {\n");
      out.write("            showLocalValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires on username field input.\n");
      out.write("        $('#usernameUserInput').bind('input', function () {\n");
      out.write("            hideUsernameValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires on password field input.\n");
      out.write("        $('#passwordUserInput').bind('input', function () {\n");
      out.write("            hidePasswordValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires on firstname field input.\n");
      out.write("        $('#firstNameUserInput').bind('input', function () {\n");
      out.write("            hideFirstNameValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires on lastname field input.\n");
      out.write("        $('#lastNameUserInput').bind('input', function () {\n");
      out.write("            hideLastNameValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires on mobile field input.\n");
      out.write("        $('#mobileNumber').bind('input', function () {\n");
      out.write("            hideMobileNumberValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Fires on country field input.\n");
      out.write("        $('#country').bind('input', function () {\n");
      out.write("            hideCountryValidationStatus();\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        function unflatten(arr) {\n");
      out.write("            var tree = [],\n");
      out.write("                mappedArr = {},\n");
      out.write("                arrElem,\n");
      out.write("                mappedElem;\n");
      out.write("\n");
      out.write("            // First map the nodes of the array to an object -> create a hash table.\n");
      out.write("            for (var i = 0, len = arr.length; i < len; i++) {\n");
      out.write("                arrElem = arr[i];\n");
      out.write("                mappedArr[arrElem.id] = arrElem;\n");
      out.write("                mappedArr[arrElem.id]['children'] = [];\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            for (var id in mappedArr) {\n");
      out.write("                if (mappedArr.hasOwnProperty(id)) {\n");
      out.write("                    mappedElem = mappedArr[id];\n");
      out.write("                    // If the element is not at the root level, add it to its parent array of children.\n");
      out.write("                    if (mappedElem.parent && mappedElem.parent != \"#\" && mappedArr[mappedElem['parent']]) {\n");
      out.write("                        mappedArr[mappedElem['parent']]['children'].push(mappedElem);\n");
      out.write("                    }\n");
      out.write("                    // If the element is at the root level, add it to first level elements array.\n");
      out.write("                    else {\n");
      out.write("                        tree.push(mappedElem);\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            return tree;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Process the consent purposes for submission using tree view.\n");
      out.write("        function addReciptInformation(container) {\n");
      out.write("            // var oldReceipt = receiptData.receipts;\n");
      out.write("            var newReceipt = {};\n");
      out.write("            var services = [];\n");
      out.write("            var service = {};\n");
      out.write("            var mandatoryPiis = [];\n");
      out.write("            var selectedMandatoryPiis = [];\n");
      out.write("\n");
      out.write("            var selectedNodes = container.jstree(true).get_selected('full', true);\n");
      out.write("            var undeterminedNodes = container.jstree(true).get_undetermined('full', true);\n");
      out.write("            var allTreeNodes = container.jstree(true).get_json('#', {flat: true});\n");
      out.write("\n");
      out.write("            $.each(allTreeNodes, function (i, val) {\n");
      out.write("                if (typeof (val.li_attr.mandetorypiicatergory) != \"undefined\" &&\n");
      out.write("                    val.li_attr.mandetorypiicatergory == \"true\") {\n");
      out.write("                    mandatoryPiis.push(val.li_attr.piicategoryid);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $.each(selectedNodes, function (i, val) {\n");
      out.write("                if (val.hasOwnProperty('li_attr')) {\n");
      out.write("                    selectedMandatoryPiis.push(selectedNodes[i].li_attr.piicategoryid);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            var allMandatoryPiisSelected = mandatoryPiis.every(function (val) {\n");
      out.write("                return selectedMandatoryPiis.indexOf(val) >= 0;\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            if (!allMandatoryPiisSelected) {\n");
      out.write("                $(\"#mandetory_pii_selection_validation\").modal({blurring: true}).modal(\"show\");\n");
      out.write("                validConsentPurpose = false;\n");
      out.write("            } else {\n");
      out.write("                validConsentPurpose = true;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (!selectedNodes || selectedNodes.length < 1) {\n");
      out.write("                //revokeReceipt(oldReceipt.consentReceiptID);\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("            selectedNodes = selectedNodes.concat(undeterminedNodes);\n");
      out.write("            var relationshipTree = unflatten(selectedNodes); //Build relationship tree\n");
      out.write("            var purposes = relationshipTree[0].children;\n");
      out.write("            var newPurposes = [];\n");
      out.write("\n");
      out.write("            for (var i = 0; i < purposes.length; i++) {\n");
      out.write("                var purpose = purposes[i];\n");
      out.write("                var newPurpose = {};\n");
      out.write("                newPurpose[\"purposeId\"] = purpose.li_attr.purposeid;\n");
      out.write("                newPurpose['piiCategory'] = [];\n");
      out.write("                newPurpose['purposeCategoryId'] = [");
      out.print(defaultPurposeCatId);
      out.write("];\n");
      out.write("\n");
      out.write("                var piiCategory = [];\n");
      out.write("                var categories = purpose.children;\n");
      out.write("                for (var j = 0; j < categories.length; j++) {\n");
      out.write("                    var category = categories[j];\n");
      out.write("                    var c = {};\n");
      out.write("                    c['piiCategoryId'] = category.li_attr.piicategoryid;\n");
      out.write("                    piiCategory.push(c);\n");
      out.write("                }\n");
      out.write("                newPurpose['piiCategory'] = piiCategory;\n");
      out.write("                newPurposes.push(newPurpose);\n");
      out.write("            }\n");
      out.write("            service['purposes'] = newPurposes;\n");
      out.write("            services.push(service);\n");
      out.write("            newReceipt['services'] = services;\n");
      out.write("\n");
      out.write("            return newReceipt;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Process the consent purposes for submission using template view.\n");
      out.write("        function addReciptInformationFromTemplate() {\n");
      out.write("            var newReceipt = {};\n");
      out.write("            var services = [];\n");
      out.write("            var service = {};\n");
      out.write("            var newPurposes = [];\n");
      out.write("\n");
      out.write("            $('.consent-statement input[type=\"checkbox\"], .consent-statement strong label')\n");
      out.write("                .each(function (i, element) {\n");
      out.write("                    var checked = $(element).prop('checked');\n");
      out.write("                    var isLable = $(element).is(\"lable\");\n");
      out.write("                    var newPurpose = {};\n");
      out.write("                    var piiCategories = [];\n");
      out.write("                    var isExistingPurpose = false;\n");
      out.write("\n");
      out.write("                    if (!isLable && checked) {\n");
      out.write("                        var purposeId = element.data(\"purposeid\");\n");
      out.write("\n");
      out.write("                        if (newPurposes.length != 0) {\n");
      out.write("                            for (var i = 0; i < newPurposes.length; i++) {\n");
      out.write("                                var selectedPurpose = newPurposes[i];\n");
      out.write("                                if (selectedPurpose.purposeId == purposeId) {\n");
      out.write("                                    newPurpose = selectedPurpose;\n");
      out.write("                                    piiCategories = newPurpose.piiCategory;\n");
      out.write("                                    isExistingPurpose = true;\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    var newPiiCategory = {};\n");
      out.write("\n");
      out.write("                    newPurpose[\"purposeId\"] = element.data(\"purposeid\");\n");
      out.write("                    newPiiCategory['piiCategoryId'] = element.data(\"piicategoryid\");\n");
      out.write("                    piiCategories.push(newPiiCategory);\n");
      out.write("                    newPurpose['piiCategory'] = piiCategories;\n");
      out.write("                    newPurpose['purposeCategoryId'] = [");
      out.print(defaultPurposeCatId);
      out.write("];\n");
      out.write("                    if (!isExistingPurpose) {\n");
      out.write("                        newPurposes.push(newPurpose);\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("            service['purposes'] = newPurposes;\n");
      out.write("            services.push(service);\n");
      out.write("            newReceipt['services'] = services;\n");
      out.write("\n");
      out.write("            return newReceipt;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Process the consent purposes for submission using row view.\n");
      out.write("        function addReciptInformationFromRows() {\n");
      out.write("            var newReceipt = {};\n");
      out.write("            var services = [];\n");
      out.write("            var service = {};\n");
      out.write("            var newPurposes = [];\n");
      out.write("            var mandatoryPiis = [];\n");
      out.write("            var selectedMandatoryPiis = [];\n");
      out.write("\n");
      out.write("            $('#row-container input[type=\"checkbox\"]').each(function (i, checkbox) {\n");
      out.write("                var checkboxLabel = $(checkbox).next();\n");
      out.write("                var checked = $(checkbox).prop('checked');\n");
      out.write("                var newPurpose = {};\n");
      out.write("                var piiCategories = [];\n");
      out.write("                var isExistingPurpose = false;\n");
      out.write("\n");
      out.write("                if (checkboxLabel.data(\"mandetorypiicatergory\")) {\n");
      out.write("                    mandatoryPiis.push(checkboxLabel.data(\"piicategoryid\"));\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if (checked) {\n");
      out.write("                    var purposeId = checkboxLabel.data(\"purposeid\");\n");
      out.write("                    selectedMandatoryPiis.push(checkboxLabel.data(\"piicategoryid\"));\n");
      out.write("                    if (newPurposes.length != 0) {\n");
      out.write("                        for (var i = 0; i < newPurposes.length; i++) {\n");
      out.write("                            var selectedPurpose = newPurposes[i];\n");
      out.write("                            if (selectedPurpose.purposeId == purposeId) {\n");
      out.write("                                newPurpose = selectedPurpose;\n");
      out.write("                                piiCategories = newPurpose.piiCategory;\n");
      out.write("                                isExistingPurpose = true;\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                    var newPiiCategory = {};\n");
      out.write("\n");
      out.write("                    newPurpose[\"purposeId\"] = checkboxLabel.data(\"purposeid\");\n");
      out.write("                    newPiiCategory['piiCategoryId'] = checkboxLabel.data(\"piicategoryid\");\n");
      out.write("                    piiCategories.push(newPiiCategory);\n");
      out.write("                    newPurpose['piiCategory'] = piiCategories;\n");
      out.write("                    newPurpose['purposeCategoryId'] = [");
      out.print(defaultPurposeCatId);
      out.write("];\n");
      out.write("                    if (!isExistingPurpose) {\n");
      out.write("                        newPurposes.push(newPurpose);\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("            service['purposes'] = newPurposes;\n");
      out.write("            services.push(service);\n");
      out.write("            newReceipt['services'] = services;\n");
      out.write("\n");
      out.write("            var allMandatoryPiisSelected = mandatoryPiis.every(function (val) {\n");
      out.write("                return selectedMandatoryPiis.indexOf(val) >= 0;\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            if (!allMandatoryPiisSelected) {\n");
      out.write("                $(\"#mandetory_pii_selection_validation\").modal({blurring: true}).modal(\"show\");\n");
      out.write("                validConsentPurpose = false;\n");
      out.write("            } else {\n");
      out.write("                validConsentPurpose = true;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            return newReceipt;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Handle the consent purpose submission.\n");
      out.write("        function handleConsentPurpose() {\n");
      out.write("            ");

                if (hasPurposes) {
            
      out.write("\n");
      out.write("                    var receipt;\n");
      out.write("            ");

                    if (consentDisplayType == "template") {
            
      out.write("\n");
      out.write("                        receipt = addReciptInformationFromTemplate();\n");
      out.write("            ");

                    } else if (consentDisplayType == "tree") {
            
      out.write("\n");
      out.write("                        receipt = addReciptInformation(container);\n");
      out.write("            ");

                    } else if (consentDisplayType == "row")  {
            
      out.write("\n");
      out.write("                        receipt = addReciptInformationFromRows();\n");
      out.write("            ");

                    }
            
      out.write("\n");
      out.write("                    if (validConsentPurpose) {\n");
      out.write("                        $('<input />').attr('type', 'hidden')\n");
      out.write("                            .attr('name', \"consent\")\n");
      out.write("                            .attr('value', JSON.stringify(receipt))\n");
      out.write("                            .appendTo('#register');\n");
      out.write("                    }\n");
      out.write("            ");

                }
            
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Handle form submission preventing double submission.\n");
      out.write("        $(document).ready(function(){\n");
      out.write("\n");
      out.write("            passwordField.keyup(function() {\n");
      out.write("                ShowPasswordStatus();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            passwordField.focusout(function() {\n");
      out.write("                displayPasswordCross();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            ");

                if (error){
            
      out.write("\n");
      out.write("                var registrationData = sessionStorage.getItem(registrationDataKey);\n");
      out.write("                sessionStorage.removeItem(registrationDataKey);\n");
      out.write("\n");
      out.write("                if (registrationData){\n");
      out.write("                    var fields = JSON.parse(registrationData);\n");
      out.write("\n");
      out.write("                    if (fields.length > 0) {\n");
      out.write("                        fields.forEach(function(field) {\n");
      out.write("                            document.getElementsByName(field.name)[0].value = field.value;\n");
      out.write("                        })\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            ");

                }
            
      out.write("\n");
      out.write("\n");
      out.write("            // Dynamically render the configured authenticators.\n");
      out.write("            var hasFederated = false;\n");
      out.write("            var isBasicForm = true;\n");
      out.write("            try {\n");
      out.write("                var hasFederated = JSON.parse(");
      out.print(isFederated);
      out.write(");\n");
      out.write("                var isBasicForm = JSON.parse(");
      out.print(isBasic);
      out.write(");\n");
      out.write("            } catch(error) {\n");
      out.write("                // Do nothing.\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            var isSSOLoginAuthenticatorConfigured = JSON.parse(");
      out.print(isSSOLoginAuthenticatorConfigured);
      out.write(");\n");
      out.write("            var emailDomainDiscoveryEnabled = JSON.parse(");
      out.print(emailDomainDiscoveryEnabled);
      out.write(");\n");
      out.write("            var emailDomainBasedSelfSignupEnabled = JSON.parse(");
      out.print(emailDomainBasedSelfSignupEnabled);
      out.write(");\n");
      out.write("\n");
      out.write("            if (isSSOLoginAuthenticatorConfigured && emailDomainDiscoveryEnabled && emailDomainBasedSelfSignupEnabled) {\n");
      out.write("                var params = new URLSearchParams({\n");
      out.write("                    idp: 'SSO',\n");
      out.write("                    authenticator: 'OrganizationAuthenticator',\n");
      out.write("                    sessionDataKey: \"");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("\",\n");
      out.write("                    isSelfRegistration: 'true'\n");
      out.write("                });\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?\" + params.toString();\n");
      out.write("            } else if(hasFederated){\n");
      out.write("                    $(\"#continue-with-email\").show();\n");
      out.write("                    $(\"#federated-authenticators\").show();\n");
      out.write("            } else {\n");
      out.write("                $(\"#continue-with-email\").hide();\n");
      out.write("                $(\"#federated-authenticators\").hide();\n");
      out.write("                $(\"#basic-form\").show();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            var container;\n");
      out.write("            var allAttributes = [];\n");
      out.write("            var canSubmit;\n");
      out.write("\n");
      out.write("            var agreementChk = $(\".agreement-checkbox input\");\n");
      out.write("            var countryDropdown = $(\"#country-dropdown\");\n");
      out.write("            var localDropdown = $(\"#local-dropdown\");\n");
      out.write("\n");
      out.write("            countryDropdown.dropdown('hide');\n");
      out.write("            $(\"> input.search\", countryDropdown).attr(\"role\", \"presentation\");\n");
      out.write("\n");
      out.write("            localDropdown.dropdown({\n");
      out.write("                onChange: function (value) {\n");
      out.write("                    $(\"#local-input\").val(value);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            $(\"#date_picker\").calendar({\n");
      out.write("                type: 'date',\n");
      out.write("                formatter: {\n");
      out.write("                    date: function (date, settings) {\n");
      out.write("                        var EMPTY_STRING = \"\";\n");
      out.write("                        var DATE_SEPARATOR = \"-\";\n");
      out.write("                        var STRING_ZERO = \"0\";\n");
      out.write("                        if (!date) return EMPTY_STRING;\n");
      out.write("                            var day = date.getDate() + EMPTY_STRING;\n");
      out.write("                        if (day.length < 2) {\n");
      out.write("                            day = STRING_ZERO + day;\n");
      out.write("                        }\n");
      out.write("                        var month = (date.getMonth() + 1) + EMPTY_STRING;\n");
      out.write("                        if (month.length < 2) {\n");
      out.write("                            month = STRING_ZERO + month;\n");
      out.write("                        }\n");
      out.write("                        var year = date.getFullYear();\n");
      out.write("                        return year + DATE_SEPARATOR + month + DATE_SEPARATOR + day;\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            Handlebars.registerHelper('grouped_each', function (every, context, options) {\n");
      out.write("                var out = \"\", subcontext = [], i;\n");
      out.write("                if (context && context.length > 0) {\n");
      out.write("                    for (i = 0; i < context.length; i++) {\n");
      out.write("                        if (i > 0 && i % every === 0) {\n");
      out.write("                            out += options.fn(subcontext);\n");
      out.write("                            subcontext = [];\n");
      out.write("                        }\n");
      out.write("                        subcontext.push(context[i]);\n");
      out.write("                    }\n");
      out.write("                    out += options.fn(subcontext);\n");
      out.write("                }\n");
      out.write("                return out;\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            ");

                if (hasPurposes) {
                    if(consentDisplayType == "template") {
            
      out.write("\n");
      out.write("                        renderReceiptDetailsFromTemplate(JSON.parse(\"");
      out.print( Encode.forJava(purposes) );
      out.write("\"));\n");
      out.write("            ");

                    } else if (consentDisplayType == "tree") {
            
      out.write("\n");
      out.write("                        renderReceiptDetails(JSON.parse(\"");
      out.print( Encode.forJava(purposes) );
      out.write("\"));\n");
      out.write("            ");

                    } else if (consentDisplayType == "row"){
            
      out.write("\n");
      out.write("                        renderReceiptDetailsFromRows(JSON.parse(\"");
      out.print( Encode.forJava(purposes) );
      out.write("\"));\n");
      out.write("            ");

                    }
                }
            
      out.write("\n");
      out.write("\n");
      out.write("            // Render the consent purposes through tree view.\n");
      out.write("            function renderReceiptDetails(data) {\n");
      out.write("\n");
      out.write("                var treeTemplate =\n");
      out.write("                    '<div id=\"html1\">' +\n");
      out.write("                    '<ul><li class=\"jstree-open\" data-jstree=\\'{\"icon\":\"icon-book\"}\\'>All' +\n");
      out.write("                    '<ul>' +\n");
      out.write("                    '{{#purposes}}' +\n");
      out.write("                    '<li data-jstree=\\'{\"icon\":\"icon-book\"}\\' purposeid=\"{{purposeId}}\" mandetorypurpose={{mandatory}}>' +\n");
      out.write("                    '{{purpose}}{{#if mandatory}}<span class=\"required_consent\">*</span>{{/if}} {{#if description}}<img src=\"images/info.png\" class=\"form-info\" data-toggle=\"tooltip\" data-content=\"{{description}}\" data-placement=\"right\"/>{{/if}}<ul>' +\n");
      out.write("                    '{{#piiCategories}}' +\n");
      out.write("                    '<li data-jstree=\\'{\"icon\":\"icon-user\"}\\' piicategoryid=\"{{piiCategoryId}}\" mandetorypiicatergory={{mandatory}}>{{#if displayName}}{{displayName}}{{else}}{{piiCategory}}{{/if}}{{#if mandatory}}<span class=\"required_consent\">*</span>{{/if}}</li>' +\n");
      out.write("                    '</li>' +\n");
      out.write("                    '{{/piiCategories}}' +\n");
      out.write("                    '</ul>' +\n");
      out.write("                    '{{/purposes}}' +\n");
      out.write("                    '</ul></li>' +\n");
      out.write("                    '</ul>' +\n");
      out.write("                    '</div>';\n");
      out.write("\n");
      out.write("                var tree = Handlebars.compile(treeTemplate);\n");
      out.write("                var treeRendered = tree(data);\n");
      out.write("\n");
      out.write("                $(\"#tree-table\").html(treeRendered);\n");
      out.write("\n");
      out.write("                container = $(\"#html1\").jstree({\n");
      out.write("                    plugins: [\"table\", \"sort\", \"checkbox\", \"actions\"],\n");
      out.write("                    checkbox: {\"keep_selected_style\": false},\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                container.bind('hover_node.jstree', function () {\n");
      out.write("                    var bar = $(this).find('.jstree-wholerow-hovered');\n");
      out.write("                    bar.css('height',\n");
      out.write("                        bar.parent().children('a.jstree-anchor').height() + 'px');\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                container.on('ready.jstree', function (event, data) {\n");
      out.write("                    var $tree = $(this);\n");
      out.write("                    $($tree.jstree().get_json($tree, {\n");
      out.write("                        flat: true\n");
      out.write("                    }))\n");
      out.write("                        .each(function (index, value) {\n");
      out.write("                            var node = container.jstree().get_node(this.id);\n");
      out.write("                            allAttributes.push(node.id);\n");
      out.write("                        });\n");
      out.write("                    container.jstree('open_all');\n");
      out.write("                });\n");
      out.write("\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Render the consent purposes through template view.\n");
      out.write("            function renderReceiptDetailsFromTemplate(receipt) {\n");
      out.write("                /*\n");
      out.write("                 *   Available when consentDisplayType is set to \"template\"\n");
      out.write("                 *   customConsentTempalte1 is from the js file which is loaded as a normal js resource\n");
      out.write("                 *   also try customConsentTempalte2 located at assets/js/consent_template_2.js\n");
      out.write("                 */\n");
      out.write("                var templateString = customConsentTempalte1;\n");
      out.write("                var purp, purpose, piiCategory, piiCategoryInputTemplate;\n");
      out.write("                $(receipt.purposes).each(function (i, e) {\n");
      out.write("                    purp = e.purpose;\n");
      out.write("                    purpose = \"{{purpose:\" + purp + \"}}\";\n");
      out.write("                    var purposeInputTemplate = '<strong data-id=\"' + purpose + '\">' + purp + '</strong>';\n");
      out.write("                    templateString = templateString.replaceAll(purpose, purposeInputTemplate);\n");
      out.write("                    $(e.piiCategories).each(function (i, ee) {\n");
      out.write("                        piiCategory = \"{{pii:\" + purp + \":\" + ee.displayName + \"}}\";\n");
      out.write("                        var piiCategoryMin = piiCategory.replace(/\\s/g, '');\n");
      out.write("                        if (ee.mandatory == true) {\n");
      out.write("                            piiCategoryInputTemplate = '<strong><label id=\"' + piiCategoryMin + '\" data-id=\"' +\n");
      out.write("                                piiCategory + '\" data-piiCategoryId=\"' + ee.piiCategoryId + '\" data-purposeId=\"' +\n");
      out.write("                                e.purposeId + '\" data-mandetoryPiiCategory=\"' + ee.mandatory + '\">' + ee.displayName +\n");
      out.write("                                '<span class=\"required_consent\">*</span></label></strong>';\n");
      out.write("                        } else {\n");
      out.write("                            piiCategoryInputTemplate = '<span><label for=\"' + piiCategoryMin + '\"><input type=\"checkbox\" id=\"' + piiCategoryMin + '\" data-id=\"' +\n");
      out.write("                                piiCategory + '\" data-piiCategoryId=\"' + ee.piiCategoryId + '\" data-purposeId=\"' + e.purposeId + '\"' +\n");
      out.write("                                'data-mandetoryPiiCategory=\"' + ee.mandatory + '\" name=\"\" value=\"\">' + ee.displayName + '</label></span>';\n");
      out.write("                        }\n");
      out.write("                        templateString = templateString.replaceAll(piiCategory, piiCategoryInputTemplate);\n");
      out.write("                    });\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                $(\".consent-statement\").html(templateString);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // Render the consent purposes through row view.\n");
      out.write("            function renderReceiptDetailsFromRows(data) {\n");
      out.write("                var rowTemplate =\n");
      out.write("                    '{{#purposes}}' +\n");
      out.write("                    '<div class=\"ui bulleted list\">' +\n");
      out.write("                    '<div class=\"item\"><span>{{purpose}} {{#if description}}<span id=\"description-{{purposeId}}\" data-tooltip=\"{{description}}\"\" data-inverted=\"\"><i class=\"info circle icon\"></i></span>{{/if}}</span></div></div>' +\n");
      out.write("                    '<div class=\"ui form\">' +\n");
      out.write("                    '{{#grouped_each 2 piiCategories}}' +\n");
      out.write("                    '{{#each this }}' +\n");
      out.write("                    '<div class=\"{{#if mandatory}}required{{/if}} field\">'+\n");
      out.write("                    '<div class=\"ui checkbox\">' +\n");
      out.write("                    '<input type=\"checkbox\" name=\"switch\" id=\"consent-checkbox-{{../../purposeId}}-{{piiCategoryId}}\" {{#if mandatory}}required{{/if}} />' +\n");
      out.write("                    '<label for=\"consent-checkbox-{{../../purposeId}}-{{piiCategoryId}}\" data-piicategoryid=\"{{piiCategoryId}}\" data-mandetorypiicatergory=\"{{mandatory}}\" data-purposeid=\"{{../../purposeId}}\">' +\n");
      out.write("                    '<span>{{#if displayName}}{{displayName}}{{else}}{{piiCategory}}{{/if}}'+\n");
      out.write("                    '</label></div>' +\n");
      out.write("                    '</div>'+\n");
      out.write("                    '{{/each}}' +\n");
      out.write("                    '{{/grouped_each}}' +\n");
      out.write("                    '</div></div>' +\n");
      out.write("                    '{{/purposes}}';\n");
      out.write("\n");
      out.write("                var rows = Handlebars.compile(rowTemplate);\n");
      out.write("                var rowsRendered = rows(data);\n");
      out.write("\n");
      out.write("                $(\"#row-container\").html(rowsRendered);\n");
      out.write("                $(\"#description\").popup();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            $(\".form-info\").popup();\n");
      out.write("\n");
      out.write("            $.fn.preventDoubleSubmission = function() {\n");
      out.write("                $(this).on(\"submit\", function(e){\n");
      out.write("                    var $form = $(this);\n");
      out.write("                    if ($form.data(\"submitted\") === true) {\n");
      out.write("                        // Previously submitted - don't submit again.\n");
      out.write("                        e.preventDefault();\n");
      out.write("                        console.warn(\"Prevented a possible double submit event\");\n");
      out.write("                    } else {\n");
      out.write("                        e.preventDefault();\n");
      out.write("\n");
      out.write("                        var validInput = true;\n");
      out.write("                        var userName = document.getElementById(\"username\");\n");
      out.write("                        var alphanumericUsernameUserInput = document.getElementById(\"alphanumericUsernameUserInput\");\n");
      out.write("                        var usernameUserInput = document.getElementById(\"usernameUserInput\");\n");
      out.write("                        var password = document.getElementById(\"password\");\n");
      out.write("                        var passwordUserInput = document.getElementById(\"passwordUserInput\");\n");
      out.write("                        var unsafeCharPattern = /[<>`\\\"]/;\n");
      out.write("                        var elements = document.getElementsByTagName(\"input\");\n");
      out.write("                        var error_msg = $(\"#error-msg\");\n");
      out.write("                        var server_error_msg = $(\"#server-error-msg\");\n");
      out.write("\n");
      out.write("                        if (");
      out.print(isEmailUsernameEnabled);
      out.write(" && ");
      out.print(hideUsernameFieldWhenEmailAsUsernameIsEnabled);
      out.write(") {\n");
      out.write("                            alphanumericUsernameUserInput.value = usernameUserInput.value;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        if (!");
      out.print(isUsernameValidationEnabled);
      out.write(") {\n");
      out.write("                            if (showUsernameRegexValidationStatus()) {\n");
      out.write("                                userName.value = alphanumericUsernameUserInput.value.trim();\n");
      out.write("                            } else {\n");
      out.write("                                validInput = false;\n");
      out.write("                            }\n");
      out.write("                            if (");
      out.print(isSelfRegistrationLockOnCreationEnabled);
      out.write(" && !showUsernameValidationStatus()) {\n");
      out.write("                                validInput = false\n");
      out.write("                            }\n");
      out.write("                        } else if (isAlphanumericUsernameEnabled()) {\n");
      out.write("                            if (showAlphanumericUsernameValidationStatus()) {\n");
      out.write("                                userName.value = alphanumericUsernameUserInput.value.trim();\n");
      out.write("                            } else {\n");
      out.write("                                validInput = false;\n");
      out.write("                            }\n");
      out.write("                        } else {\n");
      out.write("                            if (showUsernameValidationStatus()) {\n");
      out.write("                                userName.value = usernameUserInput.value.trim();\n");
      out.write("                            } else {\n");
      out.write("                                validInput = false;\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // Password validation.\n");
      out.write("                        if (showPasswordValidationStatus()) {\n");
      out.write("                            if (passwordUserInput) {\n");
      out.write("                                password.value = passwordUserInput.value.trim();\n");
      out.write("                            }\n");
      out.write("                        } else {\n");
      out.write("                            validInput = false;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // Firstname validation.\n");
      out.write("                        if (!showFirstNameValidationStatus()) {\n");
      out.write("                            validInput = false;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // Lastname validation.\n");
      out.write("                        if (!showLastNameValidationStatus()) {\n");
      out.write("                            validInput = false;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // Date of birth validation.\n");
      out.write("                        if (!showDateOfBirthValidationStatus()) {\n");
      out.write("                            validInput = false;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // Mobile number validation.\n");
      out.write("                        if (!showMobileNumberValidationStatus()) {\n");
      out.write("                            validInput = false;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // Country validation\n");
      out.write("                        if (!showCountryValidationStatus()) {\n");
      out.write("                            validInput = false;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // Local validation\n");
      out.write("                        if (!showLocalValidationStatus()) {\n");
      out.write("                            validInput = false;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // Validate the custom input fields.\n");
      out.write("                        // If at least one of the fields return false,\n");
      out.write("                        // the input will be invalid.\n");
      out.write("                        for (i = 0; i < elements.length; i++) {\n");
      out.write("                            if (!showFieldValidationStatus(elements[i])) {\n");
      out.write("                                validInput = false;\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // Hide the error message from server if exists.\n");
      out.write("                        if (server_error_msg.text() !== null && server_error_msg.text().trim() !== \"\"  ) {\n");
      out.write("                            $(\"#error-msg\").hide();\n");
      out.write("                            error_msg = $(\"#server-error-msg\");\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        handleConsentPurpose();\n");
      out.write("\n");
      out.write("                        // If the input is not valid,\n");
      out.write("                        // This will return false and prevent form submission.\n");
      out.write("                        if (!validInput || !validConsentPurpose) {\n");
      out.write("                            return false;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // Mark it so that the next submit can be ignored.\n");
      out.write("                        $form.data(\"submitted\", true);\n");
      out.write("                        document.getElementById(\"register\").submit();\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                return this;\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            $registerForm.preventDoubleSubmission();\n");
      out.write("\n");
      out.write("            $(\"#previous_step\").val(window.location.href);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Submit form method to submit when recaptcha is enabled.\n");
      out.write("        function submitForm() {\n");
      out.write("            $form = $(\"#register\");\n");
      out.write("            if ($form.data(\"submitted\") === true) {\n");
      out.write("                // Previously submitted - don't submit again.\n");
      out.write("                console.warn(\"Prevented a possible double submit event\");\n");
      out.write("            } else {\n");
      out.write("                var validInput = true;\n");
      out.write("                var userName = document.getElementById(\"username\");\n");
      out.write("                var alphanumericUsernameUserInput = document.getElementById(\"alphanumericUsernameUserInput\");\n");
      out.write("                var usernameUserInput = document.getElementById(\"usernameUserInput\");\n");
      out.write("                var password = document.getElementById(\"password\");\n");
      out.write("                var passwordUserInput = document.getElementById(\"passwordUserInput\");\n");
      out.write("                var unsafeCharPattern = /[<>`\\\"]/;\n");
      out.write("                var elements = document.getElementsByTagName(\"input\");\n");
      out.write("                var error_msg = $(\"#error-msg\");\n");
      out.write("                var server_error_msg = $(\"#server-error-msg\");\n");
      out.write("\n");
      out.write("                if (");
      out.print(isEmailUsernameEnabled);
      out.write(" && ");
      out.print(hideUsernameFieldWhenEmailAsUsernameIsEnabled);
      out.write(") {\n");
      out.write("                    alphanumericUsernameUserInput.value = usernameUserInput.value;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // Username validation.\n");
      out.write("                if (!");
      out.print(isUsernameValidationEnabled);
      out.write(") {\n");
      out.write("                    if (showUsernameRegexValidationStatus()) {\n");
      out.write("                        userName.value = alphanumericUsernameUserInput.value.trim();\n");
      out.write("                    } else {\n");
      out.write("                        validInput = false;\n");
      out.write("                    }\n");
      out.write("                    if (");
      out.print(isSelfRegistrationLockOnCreationEnabled);
      out.write(" && !showUsernameValidationStatus()) {\n");
      out.write("                        validInput = false\n");
      out.write("                    }\n");
      out.write("		        } else if (isAlphanumericUsernameEnabled()) {\n");
      out.write("                    if (showAlphanumericUsernameValidationStatus()) {\n");
      out.write("                        userName.value = alphanumericUsernameUserInput.value.trim();\n");
      out.write("                    } else {\n");
      out.write("                        validInput = false;\n");
      out.write("                    }\n");
      out.write("                } else {\n");
      out.write("                    if (showUsernameValidationStatus()) {\n");
      out.write("                        userName.value = usernameUserInput.value.trim();\n");
      out.write("                    } else {\n");
      out.write("                        validInput = false;\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("                // Password validation.\n");
      out.write("                if (showPasswordValidationStatus()) {\n");
      out.write("                    if (passwordUserInput) {\n");
      out.write("                        password.value = passwordUserInput.value.trim();\n");
      out.write("                    }\n");
      out.write("                } else {\n");
      out.write("                    validInput = false;\n");
      out.write("                }\n");
      out.write("                // Firstname validation.\n");
      out.write("                if (!showFirstNameValidationStatus()) {\n");
      out.write("                    validInput = false;\n");
      out.write("                }\n");
      out.write("                // Lastname validation.\n");
      out.write("                if (!showLastNameValidationStatus()) {\n");
      out.write("                    validInput = false;\n");
      out.write("                }\n");
      out.write("                // Date of birth validation.\n");
      out.write("                if (!showDateOfBirthValidationStatus()) {\n");
      out.write("                    validInput = false;\n");
      out.write("                }\n");
      out.write("                // Mobile number validation.\n");
      out.write("                if (!showMobileNumberValidationStatus()) {\n");
      out.write("                    validInput = false;\n");
      out.write("                }\n");
      out.write("                // Country validation\n");
      out.write("                if (!showCountryValidationStatus()) {\n");
      out.write("                    validInput = false;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // Local validation\n");
      out.write("                if (!showLocalValidationStatus()) {\n");
      out.write("                    validInput = false;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // Validate the custom input fields.\n");
      out.write("                // If at least one of the fields return false,\n");
      out.write("                // the input will be invalid.\n");
      out.write("                for (i = 0; i < elements.length; i++) {\n");
      out.write("                    if (!showFieldValidationStatus(elements[i])) {\n");
      out.write("                        validInput = false;\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("                // Hide the error message from server if exists.\n");
      out.write("                if (server_error_msg.text() !== null && server_error_msg.text().trim() !== \"\"  ) {\n");
      out.write("                    $(\"#error-msg\").hide();\n");
      out.write("                    error_msg = $(\"#server-error-msg\");\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                handleConsentPurpose();\n");
      out.write("\n");
      out.write("                // Do the form submission if the inputs are valid.\n");
      out.write("                if (validInput && validConsentPurpose) {\n");
      out.write("                    $form.data(\"submitted\", true);\n");
      out.write("                    document.getElementById(\"register\").submit();\n");
      out.write("                } else {\n");
      out.write("                    // Reset the recaptcha to allow another submission.\n");
      out.write("                    var reCaptchaType = \"");
      out.print( CaptchaUtil.getReCaptchaType());
      out.write("\"\n");
      out.write("                    if (\"recaptcha-enterprise\" == reCaptchaType) {\n");
      out.write("                        grecaptcha.enterprise.reset();\n");
      out.write("                    } else {\n");
      out.write("                        grecaptcha.reset();\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Handle selected authenticators.\n");
      out.write("        function handleNoDomain(elem, key, value) {\n");
      out.write("            var linkClicked = \"link-clicked\";\n");
      out.write("            if ($(elem).hasClass(linkClicked)) {\n");
      out.write("                console.warn(\"Preventing multi click.\")\n");
      out.write("            } else {\n");
      out.write("                $(elem).addClass(linkClicked);\n");
      out.write("\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                    \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("\" +\n");
      out.write("                    \"");
      out.print(multiOptionURIParam);
      out.write("\";\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // show email\n");
      out.write("        function showEmail() {\n");
      out.write("            $(\"#continue-with-email\").hide();\n");
      out.write("            $(\"#federated-authenticators\").hide();\n");
      out.write("            $(\"#basic-form\").show();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // show password function\n");
      out.write("        function showPassword() {\n");
      out.write("            var passwordField = $('#passwordUserInput');\n");
      out.write("\n");
      out.write("            if (passwordField.attr(\"type\") === 'text') {\n");
      out.write("                passwordField.attr(\"type\", \"password\")\n");
      out.write("                document.getElementById(\"password-eye\").classList.add(\"slash\");\n");
      out.write("            } else {\n");
      out.write("                passwordField.attr(\"type\", \"text\")\n");
      out.write("                document.getElementById(\"password-eye\").classList.remove(\"slash\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showFieldValidationStatus(element) {\n");
      out.write("            var unsafeCharPattern = /[<>`\\\"]/;\n");
      out.write("            var element_claim_name = element.name.split(\"/\").pop();\n");
      out.write("\n");
      out.write("            if (element_claim_name === \"lastname\") {\n");
      out.write("                element_claim_name = \"givenname\";\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (element_claim_name === \"usernameInput\") {\n");
      out.write("                return true;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            var element_field = element_claim_name + \"_field\";\n");
      out.write("            var error_msg_txt = element_claim_name + \"_error_text\";\n");
      out.write("            var error_msg_element = element_claim_name + \"_error\";\n");
      out.write("\n");
      out.write("            if (element.type === 'text' && element.value != null && element.value.trim() !== \"\"\n");
      out.write("                && element.value.length > 250)  {\n");
      out.write("                $(\"#\" + error_msg_txt).text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "maxium.length.cannot.exceed"));
      out.write("\" + \" 250\");\n");
      out.write("                $(\"#\" + error_msg_element).show();\n");
      out.write("                $(\"#\" + element_field).addClass(\"error\");\n");
      out.write("                var error_msg_txt_element = document.getElementById(error_msg_txt);\n");
      out.write("                if (error_msg_txt_element) {\n");
      out.write("                    $(\"html, body\").animate({scrollTop: $(\"#\" + error_msg_txt).offset().top}, 'slow');\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("            if (element.type === 'text' && element.value != null\n");
      out.write("                && element.value.match(unsafeCharPattern) != null) {\n");
      out.write("                $(\"#\" + error_msg_txt).text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                    "For.security.following.characters.restricted"));
      out.write("\");\n");
      out.write("                $(\"#\" + error_msg_element).show();\n");
      out.write("                $(\"#\" + element_field).addClass(\"error\");\n");
      out.write("                var error_msg_txt_element = document.getElementById(error_msg_txt);\n");
      out.write("                if (error_msg_txt_element) {\n");
      out.write("                    $(\"html, body\").animate({scrollTop: $(\"#\" + error_msg_txt).offset().top}, 'slow');\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("            if (element.type === 'text' && element.required && element.value.trim() === \"\") {\n");
      out.write("                $(\"#\" + error_msg_txt).text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                "For.required.fields.cannot.be.empty"));
      out.write("\");\n");
      out.write("                $(\"#\" + error_msg_element).show();\n");
      out.write("                $(\"#\" + element_field).addClass(\"error\");\n");
      out.write("                var error_msg_txt_element = document.getElementById(error_msg_txt);\n");
      out.write("                if (error_msg_txt_element) {\n");
      out.write("                    $(\"html, body\").animate({scrollTop: $(\"#\" + error_msg_txt).offset().top}, 'slow');\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("            if (element.type === 'text' && element.value != null && !element.checkValidity()) {\n");
      out.write("                $(\"#\" + error_msg_txt).text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle,
                    "Please.enter.valid.input"));
      out.write("\");\n");
      out.write("                $(\"#\" + error_msg_element).show();\n");
      out.write("                $(\"#\" + element_field).addClass(\"error\");\n");
      out.write("                var error_msg_txt_element = document.getElementById(error_msg_txt);\n");
      out.write("                if (error_msg_txt_element) {\n");
      out.write("                    $(\"html, body\").animate({scrollTop: $(\"#\" + error_msg_txt).offset().top}, 'slow');\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function hideFieldValidationStatus(element) {\n");
      out.write("            var element_claim_name = element.name.split(\"/\").pop();\n");
      out.write("\n");
      out.write("            if (element_claim_name === \"lastname\") {\n");
      out.write("                element_claim_name = \"givenname\";\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            var element_field = element_claim_name + \"_field\";\n");
      out.write("            var error_msg_txt = element_claim_name + \"_error_text\";\n");
      out.write("            var error_msg_element = element_claim_name + \"_error\";\n");
      out.write("\n");
      out.write("            // Remove previous errors.\n");
      out.write("            $(\"#\" + error_msg_element).hide();\n");
      out.write("            $(\"#\" + element_field).removeClass(\"error\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showUsernameRegexValidationStatus() {\n");
      out.write("\n");
      out.write("            var alphanumericUsernameUserInput = document.getElementById(\"alphanumericUsernameUserInput\");\n");
      out.write("            var alphanumericUsernameField = $(\"#alphanumericUsernameField\");\n");
      out.write("            var alphanumeric_username_error_msg = $(\"#alphanumeric-username-error-msg\");\n");
      out.write("            var server_error_msg = $(\"#server-error-msg\");\n");
      out.write("            var alphanumeric_username_error_msg_text = $(\"#alphanumeric-username-error-msg-text\");\n");
      out.write("            if (server_error_msg.text() !== null && server_error_msg.text().trim() !== \"\") {\n");
      out.write("                alphanumeric_username_error_msg.hide();\n");
      out.write("                alphanumericUsernameField.removeClass(\"error\");\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (alphanumericUsernameUserInput.value.trim() === \"\")  {\n");
      out.write("                alphanumeric_username_error_msg_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "enter.your.username"));
      out.write("\");\n");
      out.write("                alphanumeric_username_error_msg.show();\n");
      out.write("                alphanumericUsernameField.addClass(\"error\");\n");
      out.write("                $(\"html, body\").animate({scrollTop: alphanumeric_username_error_msg_text.offset().top}, 'slow');\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("            alphanumeric_username_error_msg.hide();\n");
      out.write("            alphanumericUsernameField.removeClass(\"error\");\n");
      out.write("            return true\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showAlphanumericUsernameValidationStatus() {\n");
      out.write("            var alphanumericUsernameUserInput = document.getElementById(\"alphanumericUsernameUserInput\");\n");
      out.write("            var alphanumericUsernameField = $(\"#alphanumericUsernameField\");\n");
      out.write("            var alphanumeric_username_error_msg = $(\"#alphanumeric-username-error-msg\");\n");
      out.write("            var server_error_msg = $(\"#server-error-msg\");\n");
      out.write("            var alphanumeric_username_error_msg_text = $(\"#alphanumeric-username-error-msg-text\");\n");
      out.write("\n");
      out.write("            if (server_error_msg.text() !== null && server_error_msg.text().trim() !== \"\"  ) {\n");
      out.write("                alphanumeric_username_error_msg.hide();\n");
      out.write("                alphanumericUsernameField.removeClass(\"error\");\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (alphanumericUsernameUserInput.value.trim() === \"\")  {\n");
      out.write("                alphanumeric_username_error_msg_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "enter.your.username"));
      out.write("\");\n");
      out.write("                alphanumeric_username_error_msg.show();\n");
      out.write("                alphanumericUsernameField.addClass(\"error\");\n");
      out.write("                $(\"html, body\").animate({scrollTop: alphanumeric_username_error_msg_text.offset().top}, 'slow');\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            } else {\n");
      out.write("                if (alphanumericUsernameUserInput.value.trim().length < usernameConfig.minLength\n");
      out.write("                || alphanumericUsernameUserInput.value.trim().length > usernameConfig.maxLength) {\n");
      out.write("                    alphanumeric_username_error_msg_text.text(\n");
      out.write("                        \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "username.length.should.be"));
      out.write("\"\n");
      out.write("                        + \" \" + usernameConfig.minLength + \" \"\n");
      out.write("                        + \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "and"));
      out.write("\"\n");
      out.write("                        + \" \" + usernameConfig.maxLength + \".\");\n");
      out.write("                    alphanumeric_username_error_msg.show();\n");
      out.write("                    alphanumericUsernameField.addClass(\"error\");\n");
      out.write("\n");
      out.write("                } else if (usernameConfig.enableSpecialCharacters\n");
      out.write("                    && !USERNAME_WITH_SPECIAL_CHARS_REGEX.test(alphanumericUsernameUserInput.value.trim())) {\n");
      out.write("                    alphanumeric_username_error_msg_text.text(\n");
      out.write("                        \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "username.with.special.character.symbols"));
      out.write("\");\n");
      out.write("                    alphanumeric_username_error_msg.show();\n");
      out.write("                    alphanumericUsernameField.addClass(\"error\");\n");
      out.write("                } else if (!usernameConfig.enableSpecialCharacters\n");
      out.write("                    && !ALPHANUMERIC_USERNAME_REGEX.test(alphanumericUsernameUserInput.value.trim())) {\n");
      out.write("                    alphanumeric_username_error_msg_text.text(\n");
      out.write("                        \"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "username.with.symbols"));
      out.write("\");\n");
      out.write("                    alphanumeric_username_error_msg.show();\n");
      out.write("                    alphanumericUsernameField.addClass(\"error\");\n");
      out.write("                } else {\n");
      out.write("                    // When username is accepted.\n");
      out.write("                    alphanumeric_username_error_msg.hide();\n");
      out.write("                    alphanumericUsernameField.removeClass(\"error\");\n");
      out.write("\n");
      out.write("                    return true;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showUsernameValidationStatus() {\n");
      out.write("            var userName = document.getElementById(\"username\");\n");
      out.write("            var usernameUserInput = document.getElementById(\"usernameUserInput\");\n");
      out.write("            var usernameField = $(\"#usernameField\");\n");
      out.write("            var username_error_msg = $(\"#username-error-msg\");\n");
      out.write("            var server_error_msg = $(\"#server-error-msg\");\n");
      out.write("            var username_error_msg_text = $(\"#username-error-msg-text\");\n");
      out.write("            ");
 if (isSelfRegistrationLockOnCreationEnabled) { 
      out.write("\n");
      out.write("            	var emailRequired = true;\n");
      out.write("            ");
 } else if (emailPII != null) { 
      out.write("\n");
      out.write("                var emailRequired = ");
      out.print(emailPII.getRequired());
      out.write(";\n");
      out.write("            ");
 } else { 
      out.write("\n");
      out.write("                var emailRequired = false;\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("            if (server_error_msg.text() !== null && server_error_msg.text().trim() !== \"\"  ) {\n");
      out.write("                username_error_msg.hide();\n");
      out.write("                usernameField.removeClass(\"error\");\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (usernameUserInput.value.trim() === \"\" && (emailRequired || !isAlphanumericUsernameEnabled()))  {\n");
      out.write("                    username_error_msg_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "enter.your.email"));
      out.write("\");\n");
      out.write("                    username_error_msg.show();\n");
      out.write("                    usernameField.addClass(\"error\");\n");
      out.write("                    $(\"html, body\").animate({scrollTop: username_error_msg_text.offset().top}, 'slow');\n");
      out.write("\n");
      out.write("                    return false;\n");
      out.write("            } else {\n");
      out.write("                var usernamePattern = /(^[\\u00C0-\\u00FFa-zA-Z0-9](?:(?![!#$'+=^_.{|}~\\-&]{2})[\\u00C0-\\u00FF\\w!#$'+=^_.{|}~\\-&]){0,63}(?=[\\u00C0-\\u00FFa-zA-Z0-9_]).\\@(?![+.\\-_])(?:(?![.+\\-_]{2})[\\w.+\\-]){0,245}(?=[\\u00C0-\\u00FFa-zA-Z0-9]).\\.[a-zA-Z]{2,10})$/;\n");
      out.write("                if (!usernamePattern.test(usernameUserInput.value.trim()) && (emailRequired || !isAlphanumericUsernameEnabled())) {\n");
      out.write("                    username_error_msg_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "Please.enter.valid.email"));
      out.write("\")\n");
      out.write("                    username_error_msg.show();\n");
      out.write("                    usernameField.addClass(\"error\");\n");
      out.write("                    $(\"html, body\").animate({scrollTop: username_error_msg_text.offset().top}, 'slow');\n");
      out.write("\n");
      out.write("                    return false;\n");
      out.write("                } else {\n");
      out.write("                    // When username is accepted.\n");
      out.write("                    username_error_msg.hide();\n");
      out.write("                    usernameField.removeClass(\"error\");\n");
      out.write("\n");
      out.write("                    return true;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function hideUsernameValidationStatus() {\n");
      out.write("            var usernameField = $(\"#usernameField\");\n");
      out.write("            var username_error_msg = $(\"#username-error-msg\");\n");
      out.write("            var server_error_msg = $(\"#server-error-msg\");\n");
      out.write("\n");
      out.write("            if (server_error_msg.text() !== null && server_error_msg.text().trim() !== \"\"  ) {\n");
      out.write("                username_error_msg.hide();\n");
      out.write("                usernameField.removeClass(\"error\");\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            username_error_msg.hide();\n");
      out.write("            usernameField.removeClass(\"error\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getErrorMessage() {\n");
      out.write("\n");
      out.write("            let contain = [];\n");
      out.write("            if (passwordConfig.minUpperCase > 0) {\n");
      out.write("                contain.push(passwordConfig.minUpperCase + \" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "uppercase.letters"));
      out.write("');\n");
      out.write("            }\n");
      out.write("            if (passwordConfig.minLowerCase > 0) {\n");
      out.write("                contain.push(passwordConfig.minLowerCase + \" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "lowercase.letters"));
      out.write("');\n");
      out.write("            }\n");
      out.write("            if (passwordConfig.minNumber > 0) {\n");
      out.write("                contain.push(passwordConfig.minNumber + \" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "numbers"));
      out.write("');\n");
      out.write("            }\n");
      out.write("            if (passwordConfig.minSpecialChr > 0) {\n");
      out.write("                contain.push(passwordConfig.minSpecialChr + \" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "special.characters"));
      out.write("');\n");
      out.write("            }\n");
      out.write("            if (passwordConfig.minUniqueChr > 0) {\n");
      out.write("                contain.push(passwordConfig.minUniqueChr + \" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "unique.characters"));
      out.write("');\n");
      out.write("            }\n");
      out.write("            if (passwordConfig.maxConsecutiveChr > 0) {\n");
      out.write("                contain.push(\" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "no.more.than"));
      out.write("'\n");
      out.write("                    + \" \" + passwordConfig.maxConsecutiveChr + \" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "repeated.characters"));
      out.write("');\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            var message = '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "your.password.should.be.between"));
      out.write("'\n");
      out.write("                + \" \" +\n");
      out.write("                (passwordConfig.minLength ? passwordConfig.minLength : 8)\n");
      out.write("                + \" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "and"));
      out.write("' + \" \" +\n");
      out.write("                (passwordConfig.maxLength ? passwordConfig.maxLength : 30)\n");
      out.write("                \" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "characters"));
      out.write("';\n");
      out.write("            if (contain.length > 0) {\n");
      out.write("                message = message + \" \" + '");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "including.atleast"));
      out.write("' + \" \";\n");
      out.write("                let last = contain.pop();\n");
      out.write("                if (contain.length > 0) {\n");
      out.write("                    message = message + contain.join(\", \") + \" and \" + last + \".\";\n");
      out.write("                } else {\n");
      out.write("                    message = message + \" \" + last;\n");
      out.write("                }\n");
      out.write("            } else {\n");
      out.write("                message = message + \".\";\n");
      out.write("            }\n");
      out.write("            return message;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showPasswordValidationStatus() {\n");
      out.write("            var password = document.getElementById(\"password\");\n");
      out.write("            var passwordUserInput = document.getElementById(\"passwordUserInput\");\n");
      out.write("            var passwordField = $(\"#passwordField\");\n");
      out.write("            var password_error_msg = $(\"#password-error-msg\");\n");
      out.write("            var server_error_msg = $(\"#server-error-msg\");\n");
      out.write("            var password_error_msg_text = $(\"#password-error-msg-text\");\n");
      out.write("\n");
      out.write("            if (server_error_msg.text() !== null && server_error_msg.text().trim() !== \"\"  ) {\n");
      out.write("                password_error_msg.hide();\n");
      out.write("                passwordField.removeClass(\"error\");\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (passwordUserInput.value.trim() === \"\")  {\n");
      out.write("                    password_error_msg_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "enter.your.password"));
      out.write("\");\n");
      out.write("                    password_error_msg.show();\n");
      out.write("                    passwordField.addClass(\"error\");\n");
      out.write("                    $(\"html, body\").animate({scrollTop: password_error_msg_text.offset().top}, 'slow');\n");
      out.write("\n");
      out.write("                    return false;\n");
      out.write("            } else {\n");
      out.write("                var passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/;\n");
      out.write("                var showError = false;\n");
      out.write("                if (passwordConfig) {\n");
      out.write("                    if (!validatePassword(passwordUserInput.value.trim())) {\n");
      out.write("                        showError = true;\n");
      out.write("                    }\n");
      out.write("                } else if (!passwordPattern.test(passwordUserInput.value.trim())) {\n");
      out.write("                    showError = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if (showError) {\n");
      out.write("                    passwordField.addClass(\"error\");\n");
      out.write("                    $(\"html, body\").animate({scrollTop: password_error_msg_text.offset().top}, 'slow');\n");
      out.write("\n");
      out.write("                    return false;\n");
      out.write("                } else {\n");
      out.write("                    // When password is accepted.\n");
      out.write("                    password_error_msg.hide();\n");
      out.write("                    passwordField.removeClass(\"error\");\n");
      out.write("\n");
      out.write("                    return true;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function displayPasswordCross() {\n");
      out.write("            var displayError = false;\n");
      out.write("\n");
      out.write("            $(\"#reset-password-container\").removeClass(\"error\");\n");
      out.write("\n");
      out.write("            // Prevent validation from happening when the password is empty\n");
      out.write("            if (passwordField.val().length <= 0) {\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if ((!passwordConfig.minLength || passwordField.val().length >= passwordConfig.minLength) &&\n");
      out.write("                (!passwordConfig.maxLength || passwordField.val().length <= passwordConfig.maxLength)) {\n");
      out.write("                $(\"#password-validation-check-length\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-length\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-length\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-length\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-length\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-length\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                displayError = true;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (checkMatch(passwordField.val(), passwordConfig.minUpperCase, upperCaseLetters) &&\n");
      out.write("                checkMatch(passwordField.val(), passwordConfig.minLowerCase, lowerCaseLetters)) {\n");
      out.write("                $(\"#password-validation-check-case\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-case\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-case\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-case\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-case\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-case\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                displayError = true;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (checkMatch(passwordField.val(), passwordConfig.minNumber, numbers)) {\n");
      out.write("                $(\"#password-validation-check-number\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-number\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-number\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-number\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-number\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-number\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                displayError = true;\n");
      out.write("            }\n");
      out.write("            if (checkMatch(passwordField.val(), passwordConfig.minSpecialChr, specialChr)) {\n");
      out.write("                $(\"#password-validation-check-special-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-special-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-special-chr\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-special-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-special-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-special-chr\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                displayError = true;\n");
      out.write("            }\n");
      out.write("            if (checkUniqueCharacter(passwordField.val(), passwordConfig.minUniqueChr)) {\n");
      out.write("                $(\"#password-validation-check-unique-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-unique-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-unique-chr\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-unique-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-unique-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-unique-chr\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                displayError = true;\n");
      out.write("            }\n");
      out.write("            if (checkConsecutiveMatch(passwordField.val(), passwordConfig.maxConsecutiveChr, consecutiveChr)) {\n");
      out.write("                $(\"#password-validation-check-repeated-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-repeated-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                displayError = true;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (displayError) {\n");
      out.write("                $(\"#reset-password-container\").addClass(\"error\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /**\n");
      out.write("         * Util function to validate password\n");
      out.write("         */\n");
      out.write("        function ShowPasswordStatus() {\n");
      out.write("\n");
      out.write("            if ((!passwordConfig.minLength || passwordField.val().length >= passwordConfig.minLength) &&\n");
      out.write("                (!passwordConfig.maxLength || passwordField.val().length <= passwordConfig.maxLength)) {\n");
      out.write("                $(\"#password-validation-check-length\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-length\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-length\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-neutral-length\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-length\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-length\").css(\"display\", \"none\");\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (checkMatch(passwordField.val(), passwordConfig.minUpperCase, upperCaseLetters) &&\n");
      out.write("                checkMatch(passwordField.val(), passwordConfig.minLowerCase, lowerCaseLetters)) {\n");
      out.write("                $(\"#password-validation-check-case\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-case\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-case\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-neutral-case\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-case\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-case\").css(\"display\", \"none\");\n");
      out.write("            }\n");
      out.write("            if (checkMatch(passwordField.val(), passwordConfig.minNumber, numbers)) {\n");
      out.write("                $(\"#password-validation-check-number\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-number\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-number\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-neutral-number\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-number\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-number\").css(\"display\", \"none\");\n");
      out.write("            }\n");
      out.write("            if (checkMatch(passwordField.val(), passwordConfig.minSpecialChr, specialChr)) {\n");
      out.write("                $(\"#password-validation-check-special-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-special-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-special-chr\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-neutral-special-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-special-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-special-chr\").css(\"display\", \"none\");\n");
      out.write("            }\n");
      out.write("            if (checkUniqueCharacter(passwordField.val(), passwordConfig.minUniqueChr)) {\n");
      out.write("                $(\"#password-validation-check-unique-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-unique-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-unique-chr\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-neutral-unique-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-unique-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-unique-chr\").css(\"display\", \"none\");\n");
      out.write("            }\n");
      out.write("            if (checkConsecutiveMatch(passwordField.val(), passwordConfig.maxConsecutiveChr, consecutiveChr)) {\n");
      out.write("                $(\"#password-validation-check-repeated-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-neutral-repeated-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function validatePassword() {\n");
      out.write("            var valid = true;\n");
      out.write("\n");
      out.write("            if ((!passwordConfig.minLength || passwordField.val().length >= passwordConfig.minLength) &&\n");
      out.write("                (!passwordConfig.maxLength || passwordField.val().length <= passwordConfig.maxLength)) {\n");
      out.write("                $(\"#password-validation-check-length\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-length\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-length\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-length\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-length\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-length\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                valid = false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (checkMatch(passwordField.val(), passwordConfig.minUpperCase, upperCaseLetters) &&\n");
      out.write("                checkMatch(passwordField.val(), passwordConfig.minLowerCase, lowerCaseLetters)) {\n");
      out.write("                $(\"#password-validation-check-case\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-case\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-case\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-case\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-case\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-case\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                valid = false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (checkMatch(passwordField.val(), passwordConfig.minNumber, numbers)) {\n");
      out.write("                $(\"#password-validation-check-number\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-number\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-number\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-number\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-number\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-number\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                valid = false;\n");
      out.write("            }\n");
      out.write("            if (checkMatch(passwordField.val(), passwordConfig.minSpecialChr, specialChr)) {\n");
      out.write("                $(\"#password-validation-check-special-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-special-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-special-chr\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-special-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-special-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-special-chr\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                valid = false;\n");
      out.write("            }\n");
      out.write("            if (checkUniqueCharacter(passwordField.val(), passwordConfig.minUniqueChr)) {\n");
      out.write("                $(\"#password-validation-check-unique-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-unique-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-unique-chr\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-unique-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-unique-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-unique-chr\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                valid = false;\n");
      out.write("            }\n");
      out.write("            if (checkConsecutiveMatch(passwordField.val(), passwordConfig.maxConsecutiveChr, consecutiveChr)) {\n");
      out.write("                $(\"#password-validation-check-repeated-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-neutral-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-cross-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("            } else {\n");
      out.write("                $(\"#password-validation-cross-repeated-chr\").css(\"display\", \"block\");\n");
      out.write("                $(\"#password-validation-check-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("                $(\"#password-validation-neutral-repeated-chr\").css(\"display\", \"none\");\n");
      out.write("\n");
      out.write("                valid = false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            return valid;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /**\n");
      out.write("         * Function to validate against regex pattern.\n");
      out.write("         */\n");
      out.write("        function checkMatch(_password, limit, pattern) {\n");
      out.write("            if (!limit || (_password.match(pattern)?.length >= limit)) {\n");
      out.write("                return true;\n");
      out.write("            } else {\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /**\n");
      out.write("         * Function to validate against consecutive character validator.\n");
      out.write("         */\n");
      out.write("        function checkConsecutiveMatch(_password, limit, pattern) {\n");
      out.write("\n");
      out.write("            var _consValid = true;\n");
      out.write("            if (limit > 0 &&\n");
      out.write("            _password.match(pattern) && _password.match(pattern).length > 0) {\n");
      out.write("                var list = _password.match(pattern);\n");
      out.write("                var longest = list.sort(\n");
      out.write("                    function(a,b) {\n");
      out.write("                        return b.length - a.length\n");
      out.write("                    }\n");
      out.write("                )[0];\n");
      out.write("                if (longest.length > limit) {\n");
      out.write("                    _consValid = false;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            return _consValid;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /**\n");
      out.write("         * Function to validate against unique character validator.\n");
      out.write("         */\n");
      out.write("        function checkUniqueCharacter(_password, limit) {\n");
      out.write("\n");
      out.write("            var unique = _password.split(\"\");\n");
      out.write("            var _unique = new Set(unique);\n");
      out.write("            if (!limit || (_unique.size >= limit)) {\n");
      out.write("                return true;\n");
      out.write("            } else {\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function hidePasswordValidationStatus() {\n");
      out.write("            var passwordField = $(\"#passwordField\");\n");
      out.write("            var password_error_msg = $(\"#password-error-msg\");\n");
      out.write("            var server_error_msg = $(\"#server-error-msg\");\n");
      out.write("\n");
      out.write("            if (server_error_msg.text() !== null && server_error_msg.text().trim() !== \"\"  ) {\n");
      out.write("                password_error_msg.hide();\n");
      out.write("                passwordField.removeClass(\"error\");\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            password_error_msg.hide();\n");
      out.write("            passwordField.removeClass(\"error\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showFirstNameValidationStatus() {\n");
      out.write("            var firstNameUserInput = document.getElementById(\"firstNameUserInput\");\n");
      out.write("            var firstname_error_msg = $(\"#firstname-error-msg\");\n");
      out.write("            var firstname_error_msg_text = $(\"#firstname-error-msg-text\");\n");
      out.write("            var firstname_field= $(\"#firstNameField\");\n");
      out.write("\n");
      out.write("            if (firstNameUserInput != null && firstNameUserInput.value.trim() === \"\" && firstNameUserInput.required)  {\n");
      out.write("                firstname_error_msg_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "required"));
      out.write("\");\n");
      out.write("                firstname_error_msg.show();\n");
      out.write("                firstname_field.addClass(\"error\");\n");
      out.write("                $(\"html, body\").animate({scrollTop: firstname_error_msg_text.offset().top}, 'slow');\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            } else {\n");
      out.write("                // When firstname is accepted.\n");
      out.write("                firstname_error_msg.hide();\n");
      out.write("                firstname_field.removeClass(\"error\");\n");
      out.write("\n");
      out.write("                return true;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function hideFirstNameValidationStatus() {\n");
      out.write("            var firstname_error_msg = $(\"#firstname-error-msg\");\n");
      out.write("            var firstname_field= $(\"#firstNameField\");\n");
      out.write("\n");
      out.write("            firstname_error_msg.hide();\n");
      out.write("            firstname_field.removeClass(\"error\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showLastNameValidationStatus() {\n");
      out.write("            var lastNameUserInput = document.getElementById(\"lastNameUserInput\");\n");
      out.write("            var lastname_error_msg = $(\"#lastname-error-msg\");\n");
      out.write("            var lastname_error_msg_text = $(\"#lastname-error-msg-text\");\n");
      out.write("            var lastname_field= $(\"#lastNameField\");\n");
      out.write("\n");
      out.write("            if (lastNameUserInput != null && lastNameUserInput.value.trim() === \"\" && lastNameUserInput.required)  {\n");
      out.write("                lastname_error_msg_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "required"));
      out.write("\");\n");
      out.write("                lastname_error_msg.show();\n");
      out.write("                lastname_field.addClass(\"error\");\n");
      out.write("                $(\"html, body\").animate({scrollTop: lastname_error_msg_text.offset().top}, 'slow');\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            } else {\n");
      out.write("                // When lastname is accepted.\n");
      out.write("                lastname_error_msg.hide();\n");
      out.write("                lastname_field.removeClass(\"error\");\n");
      out.write("\n");
      out.write("                return true;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function hideLastNameValidationStatus() {\n");
      out.write("            var lastname_error_msg = $(\"#lastname-error-msg\");\n");
      out.write("            var lastname_field= $(\"#lastNameField\");\n");
      out.write("\n");
      out.write("            lastname_error_msg.hide();\n");
      out.write("            lastname_field.removeClass(\"error\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showDateOfBirthValidationStatus() {\n");
      out.write("            var birthOfDate = document.getElementById(\"birthOfDate\");\n");
      out.write("            var dob_error_msg = $(\"#dob_error\");\n");
      out.write("            var dob_error_text = $(\"#dob_error_text\");\n");
      out.write("            var dob_field = $(\"#dob_field\");\n");
      out.write("\n");
      out.write("            dob_field.removeClass(\"error\");\n");
      out.write("            dob_error_msg.hide();\n");
      out.write("\n");
      out.write("            if (birthOfDate != null && birthOfDate.value != null && birthOfDate.value.trim() !== \"\"){\n");
      out.write("                var dobPattern = /^\\d{4}-\\d{2}-\\d{2}$/;\n");
      out.write("                if (!dobPattern.test(birthOfDate.value)) {\n");
      out.write("                    dob_error_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "dob.must.in.correct.format"));
      out.write("\")\n");
      out.write("                    dob_error_msg.show();\n");
      out.write("                    dob_field.addClass(\"error\");\n");
      out.write("                    $(\"html, body\").animate({scrollTop: dob_error_text.offset().top}, 'slow');\n");
      out.write("\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("            } else if (birthOfDate != null && birthOfDate.required && birthOfDate.value.trim() == \"\") {\n");
      out.write("                dob_error_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "For.required.fields.cannot.be.empty"));
      out.write("\")\n");
      out.write("                dob_error_msg.show();\n");
      out.write("                dob_field.addClass(\"error\");\n");
      out.write("                $(\"html, body\").animate({scrollTop: dob_error_text.offset().top}, 'slow');\n");
      out.write("\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function hideDateOfBirthValidationStatus() {\n");
      out.write("            var dob_error_msg = $(\"#dob_error\");\n");
      out.write("            var dob_field = $(\"#dob_field\");\n");
      out.write("\n");
      out.write("            dob_error_msg.hide();\n");
      out.write("            dob_field.removeClass(\"error\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showCountryValidationStatus() {\n");
      out.write("            var country = document.getElementById(\"country\");\n");
      out.write("            var country_error = $(\"#country_error\");\n");
      out.write("            var country_error_msg_text = $(\"#country_error_text\");\n");
      out.write("            var country_field = $(\"#country_field\");\n");
      out.write("\n");
      out.write("            if (country != null && country.value == \"\" && country.required) {\n");
      out.write("                country_error_msg_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "For.required.fields.cannot.be.empty"));
      out.write("\")\n");
      out.write("                country_error.show();\n");
      out.write("                country_field.addClass(\"error\");\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            hideCountryValidationStatus();\n");
      out.write("\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function hideCountryValidationStatus() {\n");
      out.write("            var country_error = $(\"#country_error\");\n");
      out.write("            var country_field = $(\"#country_field\");\n");
      out.write("\n");
      out.write("            country_error.hide();\n");
      out.write("            country_field.removeClass(\"error\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showLocalValidationStatus() {\n");
      out.write("            var local = document.getElementById(\"local-input\");\n");
      out.write("            var local_error = $(\"#local_error\");\n");
      out.write("            var local_error_msg_text = $(\"#local_error_text\");\n");
      out.write("            var local_field = $(\"#local_field\");\n");
      out.write("\n");
      out.write("            if (local != null && local.value == \"\" && local.required) {\n");
      out.write("                local_error_msg_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "For.required.fields.cannot.be.empty"));
      out.write("\")\n");
      out.write("                local_error.show();\n");
      out.write("                local_field.addClass(\"error\");\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            hideLocalValidationStatus();\n");
      out.write("\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function hideLocalValidationStatus() {\n");
      out.write("            var local_error = $(\"#local_error\");\n");
      out.write("            var local_field = $(\"#local_field\");\n");
      out.write("\n");
      out.write("            local_error.hide();\n");
      out.write("            local_field.removeClass(\"error\");\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showMobileNumberValidationStatus() {\n");
      out.write("            var mobileNumber = document.getElementById(\"mobileNumber\");\n");
      out.write("            var mobile_error_msg = $(\"#mobile_error\");\n");
      out.write("            var mobile_error_msg_text = $(\"#mobile_error_text\");\n");
      out.write("            var mobile_field = $(\"#mobile_field\");\n");
      out.write("\n");
      out.write("            if (mobileNumber != null && mobileNumber.value != null && mobileNumber.value.trim() !== \"\"){\n");
      out.write("                var mobilePattern = /^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})?[-. )]*(\\d{3})?[-. ]*(\\d{4,6})(?: *x(\\d+))?\\s*$/;\n");
      out.write("                if (!mobilePattern.test(mobileNumber.value)) {\n");
      out.write("                    mobile_error_msg_text.text(\"");
      out.print(IdentityManagementEndpointUtil.i18n(recoveryResourceBundle, "mobile.number.format.error"));
      out.write("\")\n");
      out.write("                    mobile_error_msg.show();\n");
      out.write("                    mobile_field.addClass(\"error\");\n");
      out.write("                    $(\"html, body\").animate({scrollTop: mobile_error_msg_text.offset().top}, 'slow');\n");
      out.write("\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function hideMobileNumberValidationStatus() {\n");
      out.write("            var mobile_error_msg = $(\"#mobile_error\");\n");
      out.write("            var mobile_field = $(\"#mobile_field\");\n");
      out.write("\n");
      out.write("            mobile_error_msg.hide();\n");
      out.write("            mobile_field.removeClass(\"error\");\n");
      out.write("        }\n");
      out.write("    </script>\n");
      out.write("    <script src=\"libs/addons/calendar.min.js\"></script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_layout_005fdynamicComponent_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_layout_005fmain_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    javax.servlet.http.HttpServletRequest request = (javax.servlet.http.HttpServletRequest)_jspx_page_context.getRequest();
    javax.servlet.http.HttpServletResponse response = (javax.servlet.http.HttpServletResponse)_jspx_page_context.getResponse();
    //  layout:dynamicComponent
    org.wso2.identity.apps.taglibs.layout.controller.DynamicComponentTagHandler _jspx_th_layout_005fdynamicComponent_005f0 = (org.wso2.identity.apps.taglibs.layout.controller.DynamicComponentTagHandler) _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName.get(org.wso2.identity.apps.taglibs.layout.controller.DynamicComponentTagHandler.class);
    _jspx_th_layout_005fdynamicComponent_005f0.setPageContext(_jspx_page_context);
    _jspx_th_layout_005fdynamicComponent_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_layout_005fmain_005f0);
    // /self-registration-username-request.jsp(1368,8) name = filePathStoringVariableName type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_layout_005fdynamicComponent_005f0.setFilePathStoringVariableName("pathOfDynamicComponent");
    int _jspx_eval_layout_005fdynamicComponent_005f0 = _jspx_th_layout_005fdynamicComponent_005f0.doStartTag();
    if (_jspx_eval_layout_005fdynamicComponent_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\n");
        out.write("            ");
        org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pathOfDynamicComponent}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
        out.write("\n");
        out.write("        ");
        int evalDoAfterBody = _jspx_th_layout_005fdynamicComponent_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_layout_005fdynamicComponent_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005flayout_005fdynamicComponent_0026_005ffilePathStoringVariableName.reuse(_jspx_th_layout_005fdynamicComponent_005f0);
    return false;
  }
}
